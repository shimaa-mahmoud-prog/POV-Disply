
POV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000375e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000272  00800060  0000375e  000037f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  008002d2  008002d2  00003a64  2**0
                  ALLOC
  3 .stab         00002b8c  00000000  00000000  00003a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011c6  00000000  00000000  000065f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000077b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007956  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b2d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c4b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c670  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c966  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d2d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__vector_1>
       8:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__vector_2>
       c:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__vector_3>
      10:	0c 94 50 16 	jmp	0x2ca0	; 0x2ca0 <__vector_4>
      14:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <__vector_5>
      18:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__vector_6>
      1c:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__vector_7>
      20:	0c 94 9c 15 	jmp	0x2b38	; 0x2b38 <__vector_8>
      24:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__vector_9>
      28:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <__vector_10>
      2c:	0c 94 15 15 	jmp	0x2a2a	; 0x2a2a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3f       	cpi	r26, 0xF3	; 243
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 55 1a 	call	0x34aa	; 0x34aa <main>
      8a:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 76 1b 	jmp	0x36ec	; 0x36ec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 92 1b 	jmp	0x3724	; 0x3724 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 82 1b 	jmp	0x3704	; 0x3704 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 82 1b 	jmp	0x3704	; 0x3704 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 76 1b 	jmp	0x36ec	; 0x36ec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 92 1b 	jmp	0x3724	; 0x3724 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e7       	ldi	r22, 0x71	; 113
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 82 1b 	jmp	0x3704	; 0x3704 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 82 1b 	jmp	0x3704	; 0x3704 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 82 1b 	jmp	0x3704	; 0x3704 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 86 1b 	jmp	0x370c	; 0x370c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a2 1b 	jmp	0x3744	; 0x3744 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 7e 1b 	jmp	0x36fc	; 0x36fc <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e7 58       	subi	r30, 0x87	; 135
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <app_init>:

volatile u32 N_ov=0;
u8 *word=(u8*)"ABC";

void app_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <app_init+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62



	    DIO_VoidsetPinDirection(PORTB,PIN0,OUTPUT);
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	41 e0       	ldi	r20, 0x01	; 1
     e3e:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_VoidsetPinDirection>
		DIO_VoidsetPinValue(PORTB,PIN0,HIGH);
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	41 e0       	ldi	r20, 0x01	; 1
     e48:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_VoidsetPinValue>

		set_callBack0(EXT_IR_Interrupt);
     e4c:	8e ea       	ldi	r24, 0xAE	; 174
     e4e:	99 e0       	ldi	r25, 0x09	; 9
     e50:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <set_callBack0>
		TIM0_OV_callBack(TIM_OvInterrupt);
     e54:	8c ee       	ldi	r24, 0xEC	; 236
     e56:	99 e0       	ldi	r25, 0x09	; 9
     e58:	0e 94 f7 18 	call	0x31ee	; 0x31ee <TIM0_OV_callBack>




	   EXT_VidInit(EXIT0,FALLIN_EDGE,INTERRUPT);
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	41 e0       	ldi	r20, 0x01	; 1
     e62:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <EXT_VidInit>
       LEDS_void_PortINIT(LED_PORT);
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	0e 94 87 19 	call	0x330e	; 0x330e <LEDS_void_PortINIT>
       /*////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
       		TIM TIME={TIMER0,NORMAL,PRES_8,oc_disconnect,ON,OFF};  //tick time = 1 mcro_sec
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	8c 7f       	andi	r24, 0xFC	; 252
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	83 7c       	andi	r24, 0xC3	; 195
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	8f 73       	andi	r24, 0x3F	; 63
     e7c:	80 68       	ori	r24, 0x80	; 128
     e7e:	89 83       	std	Y+1, r24	; 0x01
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	8e 7f       	andi	r24, 0xFE	; 254
     e84:	8a 83       	std	Y+2, r24	; 0x02
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	89 7f       	andi	r24, 0xF9	; 249
     e8a:	8a 83       	std	Y+2, r24	; 0x02
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	88 60       	ori	r24, 0x08	; 8
     e90:	8a 83       	std	Y+2, r24	; 0x02
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	8f 7e       	andi	r24, 0xEF	; 239
     e96:	8a 83       	std	Y+2, r24	; 0x02
       				TIMER_INIT(TIME);
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	9a 81       	ldd	r25, Y+2	; 0x02
     e9c:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <TIMER_INIT>
       /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////*/
}
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <APP_MAIN>:

void APP_MAIN (void)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	ee 97       	sbiw	r28, 0x3e	; 62
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61

  u8 row_index;
  u8 i=0;
     ebe:	1d ae       	std	Y+61, r1	; 0x3d
  u8 t=0;
     ec0:	1c ae       	std	Y+60, r1	; 0x3c

  u32 time_delay=0;
     ec2:	18 ae       	std	Y+56, r1	; 0x38
     ec4:	19 ae       	std	Y+57, r1	; 0x39
     ec6:	1a ae       	std	Y+58, r1	; 0x3a
     ec8:	1b ae       	std	Y+59, r1	; 0x3b
  u32 cycle_time=0;
     eca:	1c aa       	std	Y+52, r1	; 0x34
     ecc:	1d aa       	std	Y+53, r1	; 0x35
     ece:	1e aa       	std	Y+54, r1	; 0x36
     ed0:	1f aa       	std	Y+55, r1	; 0x37
  while(1)
  {

	  /*************************************************************************/

	  cycle_time=(u32)((u32)(N_ov*256)+ (u32)N_tcnt);
     ed2:	80 91 d8 02 	lds	r24, 0x02D8
     ed6:	90 91 d9 02 	lds	r25, 0x02D9
     eda:	a0 91 da 02 	lds	r26, 0x02DA
     ede:	b0 91 db 02 	lds	r27, 0x02DB
     ee2:	22 27       	eor	r18, r18
     ee4:	38 2f       	mov	r19, r24
     ee6:	49 2f       	mov	r20, r25
     ee8:	5a 2f       	mov	r21, r26
     eea:	80 91 d6 02 	lds	r24, 0x02D6
     eee:	88 2f       	mov	r24, r24
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	a0 e0       	ldi	r26, 0x00	; 0
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	82 0f       	add	r24, r18
     ef8:	93 1f       	adc	r25, r19
     efa:	a4 1f       	adc	r26, r20
     efc:	b5 1f       	adc	r27, r21
     efe:	8c ab       	std	Y+52, r24	; 0x34
     f00:	9d ab       	std	Y+53, r25	; 0x35
     f02:	ae ab       	std	Y+54, r26	; 0x36
     f04:	bf ab       	std	Y+55, r27	; 0x37

	  time_delay=(u32)(cycle_time/(u32)300);
     f06:	8c a9       	ldd	r24, Y+52	; 0x34
     f08:	9d a9       	ldd	r25, Y+53	; 0x35
     f0a:	ae a9       	ldd	r26, Y+54	; 0x36
     f0c:	bf a9       	ldd	r27, Y+55	; 0x37
     f0e:	2c e2       	ldi	r18, 0x2C	; 44
     f10:	31 e0       	ldi	r19, 0x01	; 1
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	bc 01       	movw	r22, r24
     f18:	cd 01       	movw	r24, r26
     f1a:	0e 94 25 1b 	call	0x364a	; 0x364a <__udivmodsi4>
     f1e:	da 01       	movw	r26, r20
     f20:	c9 01       	movw	r24, r18
     f22:	88 af       	std	Y+56, r24	; 0x38
     f24:	99 af       	std	Y+57, r25	; 0x39
     f26:	aa af       	std	Y+58, r26	; 0x3a
     f28:	bb af       	std	Y+59, r27	; 0x3b
     f2a:	03 c1       	rjmp	.+518    	; 0x1132 <APP_MAIN+0x288>

	  /************************************************************************/

	  while(word[i]!='\0')
	  {
		  row_index=word[i]-65;
     f2c:	20 91 cf 02 	lds	r18, 0x02CF
     f30:	30 91 d0 02 	lds	r19, 0x02D0
     f34:	8d ad       	ldd	r24, Y+61	; 0x3d
     f36:	88 2f       	mov	r24, r24
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	f9 01       	movw	r30, r18
     f3c:	e8 0f       	add	r30, r24
     f3e:	f9 1f       	adc	r31, r25
     f40:	80 81       	ld	r24, Z
     f42:	81 54       	subi	r24, 0x41	; 65
     f44:	8e af       	std	Y+62, r24	; 0x3e

		  for(u8 j=0;j<9;j++)
     f46:	1b aa       	std	Y+51, r1	; 0x33
     f48:	ed c0       	rjmp	.+474    	; 0x1124 <APP_MAIN+0x27a>
		  {

			  LEDS_VOID_PortValue(LED_PORT,ALPH[row_index][j]);
     f4a:	8e ad       	ldd	r24, Y+62	; 0x3e
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	8b a9       	ldd	r24, Y+51	; 0x33
     f52:	48 2f       	mov	r20, r24
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	c9 01       	movw	r24, r18
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	82 0f       	add	r24, r18
     f66:	93 1f       	adc	r25, r19
     f68:	84 0f       	add	r24, r20
     f6a:	95 1f       	adc	r25, r21
     f6c:	fc 01       	movw	r30, r24
     f6e:	e7 58       	subi	r30, 0x87	; 135
     f70:	fe 4f       	sbci	r31, 0xFE	; 254
     f72:	90 81       	ld	r25, Z
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	69 2f       	mov	r22, r25
     f78:	0e 94 95 19 	call	0x332a	; 0x332a <LEDS_VOID_PortValue>
			 _delay_us((u32)10*time_delay);
     f7c:	88 ad       	ldd	r24, Y+56	; 0x38
     f7e:	99 ad       	ldd	r25, Y+57	; 0x39
     f80:	aa ad       	ldd	r26, Y+58	; 0x3a
     f82:	bb ad       	ldd	r27, Y+59	; 0x3b
     f84:	2a e0       	ldi	r18, 0x0A	; 10
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	bc 01       	movw	r22, r24
     f8e:	cd 01       	movw	r24, r26
     f90:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__mulsi3>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	8d a7       	std	Y+45, r24	; 0x2d
     fa6:	9e a7       	std	Y+46, r25	; 0x2e
     fa8:	af a7       	std	Y+47, r26	; 0x2f
     faa:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     fac:	6d a5       	ldd	r22, Y+45	; 0x2d
     fae:	7e a5       	ldd	r23, Y+46	; 0x2e
     fb0:	8f a5       	ldd	r24, Y+47	; 0x2f
     fb2:	98 a9       	ldd	r25, Y+48	; 0x30
     fb4:	2b ea       	ldi	r18, 0xAB	; 171
     fb6:	3a ea       	ldi	r19, 0xAA	; 170
     fb8:	4a e2       	ldi	r20, 0x2A	; 42
     fba:	50 e4       	ldi	r21, 0x40	; 64
     fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	89 a7       	std	Y+41, r24	; 0x29
     fc6:	9a a7       	std	Y+42, r25	; 0x2a
     fc8:	ab a7       	std	Y+43, r26	; 0x2b
     fca:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     fcc:	69 a5       	ldd	r22, Y+41	; 0x29
     fce:	7a a5       	ldd	r23, Y+42	; 0x2a
     fd0:	8b a5       	ldd	r24, Y+43	; 0x2b
     fd2:	9c a5       	ldd	r25, Y+44	; 0x2c
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e8       	ldi	r20, 0x80	; 128
     fda:	5f e3       	ldi	r21, 0x3F	; 63
     fdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fe0:	88 23       	and	r24, r24
     fe2:	1c f4       	brge	.+6      	; 0xfea <APP_MAIN+0x140>
		__ticks = 1;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	88 a7       	std	Y+40, r24	; 0x28
     fe8:	91 c0       	rjmp	.+290    	; 0x110c <APP_MAIN+0x262>
	else if (__tmp > 255)
     fea:	69 a5       	ldd	r22, Y+41	; 0x29
     fec:	7a a5       	ldd	r23, Y+42	; 0x2a
     fee:	8b a5       	ldd	r24, Y+43	; 0x2b
     ff0:	9c a5       	ldd	r25, Y+44	; 0x2c
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4f e7       	ldi	r20, 0x7F	; 127
     ff8:	53 e4       	ldi	r21, 0x43	; 67
     ffa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ffe:	18 16       	cp	r1, r24
    1000:	0c f0       	brlt	.+2      	; 0x1004 <APP_MAIN+0x15a>
    1002:	7b c0       	rjmp	.+246    	; 0x10fa <APP_MAIN+0x250>
	{
		_delay_ms(__us / 1000.0);
    1004:	6d a5       	ldd	r22, Y+45	; 0x2d
    1006:	7e a5       	ldd	r23, Y+46	; 0x2e
    1008:	8f a5       	ldd	r24, Y+47	; 0x2f
    100a:	98 a9       	ldd	r25, Y+48	; 0x30
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	4a e7       	ldi	r20, 0x7A	; 122
    1012:	54 e4       	ldi	r21, 0x44	; 68
    1014:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	8c a3       	std	Y+36, r24	; 0x24
    101e:	9d a3       	std	Y+37, r25	; 0x25
    1020:	ae a3       	std	Y+38, r26	; 0x26
    1022:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1024:	6c a1       	ldd	r22, Y+36	; 0x24
    1026:	7d a1       	ldd	r23, Y+37	; 0x25
    1028:	8e a1       	ldd	r24, Y+38	; 0x26
    102a:	9f a1       	ldd	r25, Y+39	; 0x27
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	4a ef       	ldi	r20, 0xFA	; 250
    1032:	54 e4       	ldi	r21, 0x44	; 68
    1034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	88 a3       	std	Y+32, r24	; 0x20
    103e:	99 a3       	std	Y+33, r25	; 0x21
    1040:	aa a3       	std	Y+34, r26	; 0x22
    1042:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1044:	68 a1       	ldd	r22, Y+32	; 0x20
    1046:	79 a1       	ldd	r23, Y+33	; 0x21
    1048:	8a a1       	ldd	r24, Y+34	; 0x22
    104a:	9b a1       	ldd	r25, Y+35	; 0x23
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e8       	ldi	r20, 0x80	; 128
    1052:	5f e3       	ldi	r21, 0x3F	; 63
    1054:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1058:	88 23       	and	r24, r24
    105a:	2c f4       	brge	.+10     	; 0x1066 <APP_MAIN+0x1bc>
		__ticks = 1;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	9f 8f       	std	Y+31, r25	; 0x1f
    1062:	8e 8f       	std	Y+30, r24	; 0x1e
    1064:	3f c0       	rjmp	.+126    	; 0x10e4 <APP_MAIN+0x23a>
	else if (__tmp > 65535)
    1066:	68 a1       	ldd	r22, Y+32	; 0x20
    1068:	79 a1       	ldd	r23, Y+33	; 0x21
    106a:	8a a1       	ldd	r24, Y+34	; 0x22
    106c:	9b a1       	ldd	r25, Y+35	; 0x23
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	3f ef       	ldi	r19, 0xFF	; 255
    1072:	4f e7       	ldi	r20, 0x7F	; 127
    1074:	57 e4       	ldi	r21, 0x47	; 71
    1076:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    107a:	18 16       	cp	r1, r24
    107c:	4c f5       	brge	.+82     	; 0x10d0 <APP_MAIN+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    107e:	6c a1       	ldd	r22, Y+36	; 0x24
    1080:	7d a1       	ldd	r23, Y+37	; 0x25
    1082:	8e a1       	ldd	r24, Y+38	; 0x26
    1084:	9f a1       	ldd	r25, Y+39	; 0x27
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e2       	ldi	r20, 0x20	; 32
    108c:	51 e4       	ldi	r21, 0x41	; 65
    108e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	bc 01       	movw	r22, r24
    1098:	cd 01       	movw	r24, r26
    109a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	9f 8f       	std	Y+31, r25	; 0x1f
    10a4:	8e 8f       	std	Y+30, r24	; 0x1e
    10a6:	0f c0       	rjmp	.+30     	; 0x10c6 <APP_MAIN+0x21c>
    10a8:	88 ec       	ldi	r24, 0xC8	; 200
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	9d 8f       	std	Y+29, r25	; 0x1d
    10ae:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <APP_MAIN+0x20a>
    10b8:	9d 8f       	std	Y+29, r25	; 0x1d
    10ba:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10be:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	9f 8f       	std	Y+31, r25	; 0x1f
    10c4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	69 f7       	brne	.-38     	; 0x10a8 <APP_MAIN+0x1fe>
    10ce:	24 c0       	rjmp	.+72     	; 0x1118 <APP_MAIN+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d0:	68 a1       	ldd	r22, Y+32	; 0x20
    10d2:	79 a1       	ldd	r23, Y+33	; 0x21
    10d4:	8a a1       	ldd	r24, Y+34	; 0x22
    10d6:	9b a1       	ldd	r25, Y+35	; 0x23
    10d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	9f 8f       	std	Y+31, r25	; 0x1f
    10e2:	8e 8f       	std	Y+30, r24	; 0x1e
    10e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    10e8:	9b 8f       	std	Y+27, r25	; 0x1b
    10ea:	8a 8f       	std	Y+26, r24	; 0x1a
    10ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <APP_MAIN+0x246>
    10f4:	9b 8f       	std	Y+27, r25	; 0x1b
    10f6:	8a 8f       	std	Y+26, r24	; 0x1a
    10f8:	0f c0       	rjmp	.+30     	; 0x1118 <APP_MAIN+0x26e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    10fa:	69 a5       	ldd	r22, Y+41	; 0x29
    10fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    10fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1100:	9c a5       	ldd	r25, Y+44	; 0x2c
    1102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	88 a7       	std	Y+40, r24	; 0x28
    110c:	88 a5       	ldd	r24, Y+40	; 0x28
    110e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1110:	89 8d       	ldd	r24, Y+25	; 0x19
    1112:	8a 95       	dec	r24
    1114:	f1 f7       	brne	.-4      	; 0x1112 <APP_MAIN+0x268>
    1116:	89 8f       	std	Y+25, r24	; 0x19

			  t++;
    1118:	8c ad       	ldd	r24, Y+60	; 0x3c
    111a:	8f 5f       	subi	r24, 0xFF	; 255
    111c:	8c af       	std	Y+60, r24	; 0x3c

	  while(word[i]!='\0')
	  {
		  row_index=word[i]-65;

		  for(u8 j=0;j<9;j++)
    111e:	8b a9       	ldd	r24, Y+51	; 0x33
    1120:	8f 5f       	subi	r24, 0xFF	; 255
    1122:	8b ab       	std	Y+51, r24	; 0x33
    1124:	8b a9       	ldd	r24, Y+51	; 0x33
    1126:	89 30       	cpi	r24, 0x09	; 9
    1128:	08 f4       	brcc	.+2      	; 0x112c <APP_MAIN+0x282>
    112a:	0f cf       	rjmp	.-482    	; 0xf4a <APP_MAIN+0xa0>
			 _delay_us((u32)10*time_delay);

			  t++;
		  }

		  i++;
    112c:	8d ad       	ldd	r24, Y+61	; 0x3d
    112e:	8f 5f       	subi	r24, 0xFF	; 255
    1130:	8d af       	std	Y+61, r24	; 0x3d
	  time_delay=(u32)(cycle_time/(u32)300);


	  /************************************************************************/

	  while(word[i]!='\0')
    1132:	20 91 cf 02 	lds	r18, 0x02CF
    1136:	30 91 d0 02 	lds	r19, 0x02D0
    113a:	8d ad       	ldd	r24, Y+61	; 0x3d
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	f9 01       	movw	r30, r18
    1142:	e8 0f       	add	r30, r24
    1144:	f9 1f       	adc	r31, r25
    1146:	80 81       	ld	r24, Z
    1148:	88 23       	and	r24, r24
    114a:	09 f0       	breq	.+2      	; 0x114e <APP_MAIN+0x2a4>
    114c:	ef ce       	rjmp	.-546    	; 0xf2c <APP_MAIN+0x82>

		  i++;
	  }


	  if(word[i]=='\0')
    114e:	20 91 cf 02 	lds	r18, 0x02CF
    1152:	30 91 d0 02 	lds	r19, 0x02D0
    1156:	8d ad       	ldd	r24, Y+61	; 0x3d
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	f9 01       	movw	r30, r18
    115e:	e8 0f       	add	r30, r24
    1160:	f9 1f       	adc	r31, r25
    1162:	80 81       	ld	r24, Z
    1164:	88 23       	and	r24, r24
    1166:	09 f0       	breq	.+2      	; 0x116a <APP_MAIN+0x2c0>
    1168:	b4 ce       	rjmp	.-664    	; 0xed2 <APP_MAIN+0x28>
	  {
		    DIO_VoidsetPortValue(LED_PORT,0);
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <DIO_VoidsetPortValue>
		    u8 rem;
		    if(t*10<300)
    1172:	8c ad       	ldd	r24, Y+60	; 0x3c
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	9c 01       	movw	r18, r24
    117a:	22 0f       	add	r18, r18
    117c:	33 1f       	adc	r19, r19
    117e:	c9 01       	movw	r24, r18
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	82 0f       	add	r24, r18
    118a:	93 1f       	adc	r25, r19
    118c:	21 e0       	ldi	r18, 0x01	; 1
    118e:	8c 32       	cpi	r24, 0x2C	; 44
    1190:	92 07       	cpc	r25, r18
    1192:	9c f4       	brge	.+38     	; 0x11ba <APP_MAIN+0x310>
		    {
             rem =300-t*10;
    1194:	8c ad       	ldd	r24, Y+60	; 0x3c
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	9c 01       	movw	r18, r24
    119c:	22 0f       	add	r18, r18
    119e:	33 1f       	adc	r19, r19
    11a0:	c9 01       	movw	r24, r18
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	82 0f       	add	r24, r18
    11ac:	93 1f       	adc	r25, r19
    11ae:	90 95       	com	r25
    11b0:	81 95       	neg	r24
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	84 5d       	subi	r24, 0xD4	; 212
    11b6:	8a ab       	std	Y+50, r24	; 0x32
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <APP_MAIN+0x314>
		    } else{
		    	rem=180;
    11ba:	84 eb       	ldi	r24, 0xB4	; 180
    11bc:	8a ab       	std	Y+50, r24	; 0x32
		    }
		  for(u8 j=0;j<rem;j++)
    11be:	19 aa       	std	Y+49, r1	; 0x31
    11c0:	c5 c0       	rjmp	.+394    	; 0x134c <APP_MAIN+0x4a2>
		  {

		    _delay_us(time_delay);
    11c2:	68 ad       	ldd	r22, Y+56	; 0x38
    11c4:	79 ad       	ldd	r23, Y+57	; 0x39
    11c6:	8a ad       	ldd	r24, Y+58	; 0x3a
    11c8:	9b ad       	ldd	r25, Y+59	; 0x3b
    11ca:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	8d 8b       	std	Y+21, r24	; 0x15
    11d4:	9e 8b       	std	Y+22, r25	; 0x16
    11d6:	af 8b       	std	Y+23, r26	; 0x17
    11d8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    11da:	6d 89       	ldd	r22, Y+21	; 0x15
    11dc:	7e 89       	ldd	r23, Y+22	; 0x16
    11de:	8f 89       	ldd	r24, Y+23	; 0x17
    11e0:	98 8d       	ldd	r25, Y+24	; 0x18
    11e2:	2b ea       	ldi	r18, 0xAB	; 171
    11e4:	3a ea       	ldi	r19, 0xAA	; 170
    11e6:	4a e2       	ldi	r20, 0x2A	; 42
    11e8:	50 e4       	ldi	r21, 0x40	; 64
    11ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	89 8b       	std	Y+17, r24	; 0x11
    11f4:	9a 8b       	std	Y+18, r25	; 0x12
    11f6:	ab 8b       	std	Y+19, r26	; 0x13
    11f8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    11fa:	69 89       	ldd	r22, Y+17	; 0x11
    11fc:	7a 89       	ldd	r23, Y+18	; 0x12
    11fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1200:	9c 89       	ldd	r25, Y+20	; 0x14
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	40 e8       	ldi	r20, 0x80	; 128
    1208:	5f e3       	ldi	r21, 0x3F	; 63
    120a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    120e:	88 23       	and	r24, r24
    1210:	1c f4       	brge	.+6      	; 0x1218 <APP_MAIN+0x36e>
		__ticks = 1;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	88 8b       	std	Y+16, r24	; 0x10
    1216:	91 c0       	rjmp	.+290    	; 0x133a <APP_MAIN+0x490>
	else if (__tmp > 255)
    1218:	69 89       	ldd	r22, Y+17	; 0x11
    121a:	7a 89       	ldd	r23, Y+18	; 0x12
    121c:	8b 89       	ldd	r24, Y+19	; 0x13
    121e:	9c 89       	ldd	r25, Y+20	; 0x14
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	4f e7       	ldi	r20, 0x7F	; 127
    1226:	53 e4       	ldi	r21, 0x43	; 67
    1228:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    122c:	18 16       	cp	r1, r24
    122e:	0c f0       	brlt	.+2      	; 0x1232 <APP_MAIN+0x388>
    1230:	7b c0       	rjmp	.+246    	; 0x1328 <APP_MAIN+0x47e>
	{
		_delay_ms(__us / 1000.0);
    1232:	6d 89       	ldd	r22, Y+21	; 0x15
    1234:	7e 89       	ldd	r23, Y+22	; 0x16
    1236:	8f 89       	ldd	r24, Y+23	; 0x17
    1238:	98 8d       	ldd	r25, Y+24	; 0x18
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	4a e7       	ldi	r20, 0x7A	; 122
    1240:	54 e4       	ldi	r21, 0x44	; 68
    1242:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	8c 87       	std	Y+12, r24	; 0x0c
    124c:	9d 87       	std	Y+13, r25	; 0x0d
    124e:	ae 87       	std	Y+14, r26	; 0x0e
    1250:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1252:	6c 85       	ldd	r22, Y+12	; 0x0c
    1254:	7d 85       	ldd	r23, Y+13	; 0x0d
    1256:	8e 85       	ldd	r24, Y+14	; 0x0e
    1258:	9f 85       	ldd	r25, Y+15	; 0x0f
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	4a ef       	ldi	r20, 0xFA	; 250
    1260:	54 e4       	ldi	r21, 0x44	; 68
    1262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	88 87       	std	Y+8, r24	; 0x08
    126c:	99 87       	std	Y+9, r25	; 0x09
    126e:	aa 87       	std	Y+10, r26	; 0x0a
    1270:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1272:	68 85       	ldd	r22, Y+8	; 0x08
    1274:	79 85       	ldd	r23, Y+9	; 0x09
    1276:	8a 85       	ldd	r24, Y+10	; 0x0a
    1278:	9b 85       	ldd	r25, Y+11	; 0x0b
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e8       	ldi	r20, 0x80	; 128
    1280:	5f e3       	ldi	r21, 0x3F	; 63
    1282:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1286:	88 23       	and	r24, r24
    1288:	2c f4       	brge	.+10     	; 0x1294 <APP_MAIN+0x3ea>
		__ticks = 1;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	9f 83       	std	Y+7, r25	; 0x07
    1290:	8e 83       	std	Y+6, r24	; 0x06
    1292:	3f c0       	rjmp	.+126    	; 0x1312 <APP_MAIN+0x468>
	else if (__tmp > 65535)
    1294:	68 85       	ldd	r22, Y+8	; 0x08
    1296:	79 85       	ldd	r23, Y+9	; 0x09
    1298:	8a 85       	ldd	r24, Y+10	; 0x0a
    129a:	9b 85       	ldd	r25, Y+11	; 0x0b
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	3f ef       	ldi	r19, 0xFF	; 255
    12a0:	4f e7       	ldi	r20, 0x7F	; 127
    12a2:	57 e4       	ldi	r21, 0x47	; 71
    12a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12a8:	18 16       	cp	r1, r24
    12aa:	4c f5       	brge	.+82     	; 0x12fe <APP_MAIN+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    12ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    12b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    12b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 e2       	ldi	r20, 0x20	; 32
    12ba:	51 e4       	ldi	r21, 0x41	; 65
    12bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	bc 01       	movw	r22, r24
    12c6:	cd 01       	movw	r24, r26
    12c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	9f 83       	std	Y+7, r25	; 0x07
    12d2:	8e 83       	std	Y+6, r24	; 0x06
    12d4:	0f c0       	rjmp	.+30     	; 0x12f4 <APP_MAIN+0x44a>
    12d6:	88 ec       	ldi	r24, 0xC8	; 200
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	9d 83       	std	Y+5, r25	; 0x05
    12dc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12de:	8c 81       	ldd	r24, Y+4	; 0x04
    12e0:	9d 81       	ldd	r25, Y+5	; 0x05
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <APP_MAIN+0x438>
    12e6:	9d 83       	std	Y+5, r25	; 0x05
    12e8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ea:	8e 81       	ldd	r24, Y+6	; 0x06
    12ec:	9f 81       	ldd	r25, Y+7	; 0x07
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	9f 83       	std	Y+7, r25	; 0x07
    12f2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f4:	8e 81       	ldd	r24, Y+6	; 0x06
    12f6:	9f 81       	ldd	r25, Y+7	; 0x07
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	69 f7       	brne	.-38     	; 0x12d6 <APP_MAIN+0x42c>
    12fc:	24 c0       	rjmp	.+72     	; 0x1346 <APP_MAIN+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12fe:	68 85       	ldd	r22, Y+8	; 0x08
    1300:	79 85       	ldd	r23, Y+9	; 0x09
    1302:	8a 85       	ldd	r24, Y+10	; 0x0a
    1304:	9b 85       	ldd	r25, Y+11	; 0x0b
    1306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	9f 83       	std	Y+7, r25	; 0x07
    1310:	8e 83       	std	Y+6, r24	; 0x06
    1312:	8e 81       	ldd	r24, Y+6	; 0x06
    1314:	9f 81       	ldd	r25, Y+7	; 0x07
    1316:	9b 83       	std	Y+3, r25	; 0x03
    1318:	8a 83       	std	Y+2, r24	; 0x02
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	9b 81       	ldd	r25, Y+3	; 0x03
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <APP_MAIN+0x474>
    1322:	9b 83       	std	Y+3, r25	; 0x03
    1324:	8a 83       	std	Y+2, r24	; 0x02
    1326:	0f c0       	rjmp	.+30     	; 0x1346 <APP_MAIN+0x49c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1328:	69 89       	ldd	r22, Y+17	; 0x11
    132a:	7a 89       	ldd	r23, Y+18	; 0x12
    132c:	8b 89       	ldd	r24, Y+19	; 0x13
    132e:	9c 89       	ldd	r25, Y+20	; 0x14
    1330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	88 8b       	std	Y+16, r24	; 0x10
    133a:	88 89       	ldd	r24, Y+16	; 0x10
    133c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	8a 95       	dec	r24
    1342:	f1 f7       	brne	.-4      	; 0x1340 <APP_MAIN+0x496>
    1344:	89 83       	std	Y+1, r24	; 0x01
		    {
             rem =300-t*10;
		    } else{
		    	rem=180;
		    }
		  for(u8 j=0;j<rem;j++)
    1346:	89 a9       	ldd	r24, Y+49	; 0x31
    1348:	8f 5f       	subi	r24, 0xFF	; 255
    134a:	89 ab       	std	Y+49, r24	; 0x31
    134c:	99 a9       	ldd	r25, Y+49	; 0x31
    134e:	8a a9       	ldd	r24, Y+50	; 0x32
    1350:	98 17       	cp	r25, r24
    1352:	08 f4       	brcc	.+2      	; 0x1356 <APP_MAIN+0x4ac>
    1354:	36 cf       	rjmp	.-404    	; 0x11c2 <APP_MAIN+0x318>
		  {

		    _delay_us(time_delay);
		  }

		  t=0;
    1356:	1c ae       	std	Y+60, r1	; 0x3c
		  i=0;
    1358:	1d ae       	std	Y+61, r1	; 0x3d
    135a:	bb cd       	rjmp	.-1162   	; 0xed2 <APP_MAIN+0x28>

0000135c <EXT_IR_Interrupt>:

   NO input OR OUTPUT argument */

/********************************************************************************************************************/
void EXT_IR_Interrupt(void)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62

	if(flag==0)
    1364:	80 91 d7 02 	lds	r24, 0x02D7
    1368:	88 23       	and	r24, r24
    136a:	c9 f4       	brne	.+50     	; 0x139e <EXT_IR_Interrupt+0x42>
	{
        TCNT0=0;
    136c:	e2 e5       	ldi	r30, 0x52	; 82
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	10 82       	st	Z, r1
        ov_count=0;
    1372:	10 92 d2 02 	sts	0x02D2, r1
    1376:	10 92 d3 02 	sts	0x02D3, r1
    137a:	10 92 d4 02 	sts	0x02D4, r1
    137e:	10 92 d5 02 	sts	0x02D5, r1
        flag=1;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	80 93 d7 02 	sts	0x02D7, r24
        DIO_VoidsetPinDirection(PORTB,2,1);
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	62 e0       	ldi	r22, 0x02	; 2
    138c:	41 e0       	ldi	r20, 0x01	; 1
    138e:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_VoidsetPinDirection>
        DIO_VoidsetPinValue(PORTB,2,1);
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	62 e0       	ldi	r22, 0x02	; 2
    1396:	41 e0       	ldi	r20, 0x01	; 1
    1398:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_VoidsetPinValue>
    139c:	1a c0       	rjmp	.+52     	; 0x13d2 <EXT_IR_Interrupt+0x76>
		/*TIM TIME={TIMER0,NORMAL,PRES_8,oc_disconnect,ON,OFF};  //tick time = 1 mcro_sec
		TIMER_INIT(TIME);
		flag=1;*/

	}
	else if(flag==1)
    139e:	80 91 d7 02 	lds	r24, 0x02D7
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	b1 f4       	brne	.+44     	; 0x13d2 <EXT_IR_Interrupt+0x76>
	{


		N_tcnt=TIM0_U8_ReadTCNTReg();
    13a6:	0e 94 d7 18 	call	0x31ae	; 0x31ae <TIM0_U8_ReadTCNTReg>
    13aa:	80 93 d6 02 	sts	0x02D6, r24
        N_ov=ov_count;
    13ae:	80 91 d2 02 	lds	r24, 0x02D2
    13b2:	90 91 d3 02 	lds	r25, 0x02D3
    13b6:	a0 91 d4 02 	lds	r26, 0x02D4
    13ba:	b0 91 d5 02 	lds	r27, 0x02D5
    13be:	80 93 d8 02 	sts	0x02D8, r24
    13c2:	90 93 d9 02 	sts	0x02D9, r25
    13c6:	a0 93 da 02 	sts	0x02DA, r26
    13ca:	b0 93 db 02 	sts	0x02DB, r27
        flag=0;
    13ce:	10 92 d7 02 	sts	0x02D7, r1

	}
}
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <TIM_OvInterrupt>:
   NO input OR OUTPUT argument */

/********************************************************************************************************************/

void TIM_OvInterrupt(void)
{
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
	ov_count++;
    13e0:	80 91 d2 02 	lds	r24, 0x02D2
    13e4:	90 91 d3 02 	lds	r25, 0x02D3
    13e8:	a0 91 d4 02 	lds	r26, 0x02D4
    13ec:	b0 91 d5 02 	lds	r27, 0x02D5
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	a1 1d       	adc	r26, r1
    13f4:	b1 1d       	adc	r27, r1
    13f6:	80 93 d2 02 	sts	0x02D2, r24
    13fa:	90 93 d3 02 	sts	0x02D3, r25
    13fe:	a0 93 d4 02 	sts	0x02D4, r26
    1402:	b0 93 d5 02 	sts	0x02D5, r27

}
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <DIO_VoidsetPinDirection>:
#include"BIT_MATH.h"
#include"DIO_interface.h"
#include"DIO_register.h"

/*    FUNCTION TO SELECT DIRTION Of A PIN IN THE  port (is it input or out)   */
void DIO_VoidsetPinDirection(u8 u8_port_copy ,u8 u8_pin_copy,u8 u8_direction_copy){
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	27 97       	sbiw	r28, 0x07	; 7
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	6a 83       	std	Y+2, r22	; 0x02
    1424:	4b 83       	std	Y+3, r20	; 0x03

	if((u8_port_copy<4) && (u8_pin_copy<=7)){
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	84 30       	cpi	r24, 0x04	; 4
    142a:	08 f0       	brcs	.+2      	; 0x142e <DIO_VoidsetPinDirection+0x22>
    142c:	ee c0       	rjmp	.+476    	; 0x160a <DIO_VoidsetPinDirection+0x1fe>
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	88 30       	cpi	r24, 0x08	; 8
    1432:	08 f0       	brcs	.+2      	; 0x1436 <DIO_VoidsetPinDirection+0x2a>
    1434:	ea c0       	rjmp	.+468    	; 0x160a <DIO_VoidsetPinDirection+0x1fe>
		if(u8_direction_copy == OUTPUT){
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	09 f0       	breq	.+2      	; 0x143e <DIO_VoidsetPinDirection+0x32>
    143c:	6f c0       	rjmp	.+222    	; 0x151c <DIO_VoidsetPinDirection+0x110>
			switch(u8_port_copy){
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	3f 83       	std	Y+7, r19	; 0x07
    1446:	2e 83       	std	Y+6, r18	; 0x06
    1448:	8e 81       	ldd	r24, Y+6	; 0x06
    144a:	9f 81       	ldd	r25, Y+7	; 0x07
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	91 05       	cpc	r25, r1
    1450:	49 f1       	breq	.+82     	; 0x14a4 <DIO_VoidsetPinDirection+0x98>
    1452:	2e 81       	ldd	r18, Y+6	; 0x06
    1454:	3f 81       	ldd	r19, Y+7	; 0x07
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	31 05       	cpc	r19, r1
    145a:	2c f4       	brge	.+10     	; 0x1466 <DIO_VoidsetPinDirection+0x5a>
    145c:	8e 81       	ldd	r24, Y+6	; 0x06
    145e:	9f 81       	ldd	r25, Y+7	; 0x07
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	61 f0       	breq	.+24     	; 0x147c <DIO_VoidsetPinDirection+0x70>
    1464:	d2 c0       	rjmp	.+420    	; 0x160a <DIO_VoidsetPinDirection+0x1fe>
    1466:	2e 81       	ldd	r18, Y+6	; 0x06
    1468:	3f 81       	ldd	r19, Y+7	; 0x07
    146a:	22 30       	cpi	r18, 0x02	; 2
    146c:	31 05       	cpc	r19, r1
    146e:	71 f1       	breq	.+92     	; 0x14cc <DIO_VoidsetPinDirection+0xc0>
    1470:	8e 81       	ldd	r24, Y+6	; 0x06
    1472:	9f 81       	ldd	r25, Y+7	; 0x07
    1474:	83 30       	cpi	r24, 0x03	; 3
    1476:	91 05       	cpc	r25, r1
    1478:	e9 f1       	breq	.+122    	; 0x14f4 <DIO_VoidsetPinDirection+0xe8>
    147a:	c7 c0       	rjmp	.+398    	; 0x160a <DIO_VoidsetPinDirection+0x1fe>

			case PORTA:SET(DDRA_REG,u8_pin_copy); break;
    147c:	aa e3       	ldi	r26, 0x3A	; 58
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	ea e3       	ldi	r30, 0x3A	; 58
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_VoidsetPinDirection+0x8e>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_VoidsetPinDirection+0x8a>
    149e:	84 2b       	or	r24, r20
    14a0:	8c 93       	st	X, r24
    14a2:	b3 c0       	rjmp	.+358    	; 0x160a <DIO_VoidsetPinDirection+0x1fe>
			case PORTB:SET(DDRB_REG,u8_pin_copy); break;
    14a4:	a7 e3       	ldi	r26, 0x37	; 55
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e7 e3       	ldi	r30, 0x37	; 55
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	48 2f       	mov	r20, r24
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 2e       	mov	r0, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <DIO_VoidsetPinDirection+0xb6>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	0a 94       	dec	r0
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <DIO_VoidsetPinDirection+0xb2>
    14c6:	84 2b       	or	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	9f c0       	rjmp	.+318    	; 0x160a <DIO_VoidsetPinDirection+0x1fe>
			case PORTC:SET(DDRC_REG,u8_pin_copy); break;
    14cc:	a4 e3       	ldi	r26, 0x34	; 52
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e4 e3       	ldi	r30, 0x34	; 52
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 2e       	mov	r0, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_VoidsetPinDirection+0xde>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <DIO_VoidsetPinDirection+0xda>
    14ee:	84 2b       	or	r24, r20
    14f0:	8c 93       	st	X, r24
    14f2:	8b c0       	rjmp	.+278    	; 0x160a <DIO_VoidsetPinDirection+0x1fe>
			case PORTD:SET(DDRD_REG,u8_pin_copy); break;
    14f4:	a1 e3       	ldi	r26, 0x31	; 49
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e1 e3       	ldi	r30, 0x31	; 49
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_VoidsetPinDirection+0x106>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <DIO_VoidsetPinDirection+0x102>
    1516:	84 2b       	or	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	77 c0       	rjmp	.+238    	; 0x160a <DIO_VoidsetPinDirection+0x1fe>

			}

		}

		else if(u8_direction_copy == INPUT){
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	88 23       	and	r24, r24
    1520:	09 f0       	breq	.+2      	; 0x1524 <DIO_VoidsetPinDirection+0x118>
    1522:	73 c0       	rjmp	.+230    	; 0x160a <DIO_VoidsetPinDirection+0x1fe>
			switch(u8_port_copy){
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	3d 83       	std	Y+5, r19	; 0x05
    152c:	2c 83       	std	Y+4, r18	; 0x04
    152e:	8c 81       	ldd	r24, Y+4	; 0x04
    1530:	9d 81       	ldd	r25, Y+5	; 0x05
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	91 05       	cpc	r25, r1
    1536:	59 f1       	breq	.+86     	; 0x158e <DIO_VoidsetPinDirection+0x182>
    1538:	2c 81       	ldd	r18, Y+4	; 0x04
    153a:	3d 81       	ldd	r19, Y+5	; 0x05
    153c:	22 30       	cpi	r18, 0x02	; 2
    153e:	31 05       	cpc	r19, r1
    1540:	2c f4       	brge	.+10     	; 0x154c <DIO_VoidsetPinDirection+0x140>
    1542:	8c 81       	ldd	r24, Y+4	; 0x04
    1544:	9d 81       	ldd	r25, Y+5	; 0x05
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	69 f0       	breq	.+26     	; 0x1564 <DIO_VoidsetPinDirection+0x158>
    154a:	5f c0       	rjmp	.+190    	; 0x160a <DIO_VoidsetPinDirection+0x1fe>
    154c:	2c 81       	ldd	r18, Y+4	; 0x04
    154e:	3d 81       	ldd	r19, Y+5	; 0x05
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	89 f1       	breq	.+98     	; 0x15b8 <DIO_VoidsetPinDirection+0x1ac>
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
    1558:	9d 81       	ldd	r25, Y+5	; 0x05
    155a:	83 30       	cpi	r24, 0x03	; 3
    155c:	91 05       	cpc	r25, r1
    155e:	09 f4       	brne	.+2      	; 0x1562 <DIO_VoidsetPinDirection+0x156>
    1560:	40 c0       	rjmp	.+128    	; 0x15e2 <DIO_VoidsetPinDirection+0x1d6>
    1562:	53 c0       	rjmp	.+166    	; 0x160a <DIO_VoidsetPinDirection+0x1fe>

			case PORTA:CLR(DDRA_REG,u8_pin_copy); break;
    1564:	aa e3       	ldi	r26, 0x3A	; 58
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	ea e3       	ldi	r30, 0x3A	; 58
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 2e       	mov	r0, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <DIO_VoidsetPinDirection+0x176>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	0a 94       	dec	r0
    1584:	e2 f7       	brpl	.-8      	; 0x157e <DIO_VoidsetPinDirection+0x172>
    1586:	80 95       	com	r24
    1588:	84 23       	and	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	3e c0       	rjmp	.+124    	; 0x160a <DIO_VoidsetPinDirection+0x1fe>
			case PORTB:CLR(DDRB_REG,u8_pin_copy); break;
    158e:	a7 e3       	ldi	r26, 0x37	; 55
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e7 e3       	ldi	r30, 0x37	; 55
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <DIO_VoidsetPinDirection+0x1a0>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <DIO_VoidsetPinDirection+0x19c>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	29 c0       	rjmp	.+82     	; 0x160a <DIO_VoidsetPinDirection+0x1fe>
			case PORTC:CLR(DDRC_REG,u8_pin_copy); break;
    15b8:	a4 e3       	ldi	r26, 0x34	; 52
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e4 e3       	ldi	r30, 0x34	; 52
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_VoidsetPinDirection+0x1ca>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_VoidsetPinDirection+0x1c6>
    15da:	80 95       	com	r24
    15dc:	84 23       	and	r24, r20
    15de:	8c 93       	st	X, r24
    15e0:	14 c0       	rjmp	.+40     	; 0x160a <DIO_VoidsetPinDirection+0x1fe>
			case PORTD:CLR(DDRD_REG,u8_pin_copy); break;
    15e2:	a1 e3       	ldi	r26, 0x31	; 49
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e1 e3       	ldi	r30, 0x31	; 49
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <DIO_VoidsetPinDirection+0x1f4>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <DIO_VoidsetPinDirection+0x1f0>
    1604:	80 95       	com	r24
    1606:	84 23       	and	r24, r20
    1608:	8c 93       	st	X, r24

	}
	else{
		/*//do nothing*/
	}
}
    160a:	27 96       	adiw	r28, 0x07	; 7
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <DIO_VoidsetPinValue>:
/*    FUNCTION TO SELECT value Of A PIN IN THE  port (is it high or low)   */
/** DIO_VoidsetPinValue(PORTC,PIN3,U8_DIO_OUT)*/
void DIO_VoidsetPinValue(u8 u8_port_copy,u8 u8_pin_copy,u8 u8_value_copy)
{
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	27 97       	sbiw	r28, 0x07	; 7
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	6a 83       	std	Y+2, r22	; 0x02
    1634:	4b 83       	std	Y+3, r20	; 0x03

	if((u8_port_copy<4) && (u8_pin_copy<=7))
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	84 30       	cpi	r24, 0x04	; 4
    163a:	08 f0       	brcs	.+2      	; 0x163e <DIO_VoidsetPinValue+0x22>
    163c:	ee c0       	rjmp	.+476    	; 0x181a <DIO_VoidsetPinValue+0x1fe>
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	88 30       	cpi	r24, 0x08	; 8
    1642:	08 f0       	brcs	.+2      	; 0x1646 <DIO_VoidsetPinValue+0x2a>
    1644:	ea c0       	rjmp	.+468    	; 0x181a <DIO_VoidsetPinValue+0x1fe>
	{
		if(u8_value_copy == HIGH)
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	09 f0       	breq	.+2      	; 0x164e <DIO_VoidsetPinValue+0x32>
    164c:	6f c0       	rjmp	.+222    	; 0x172c <DIO_VoidsetPinValue+0x110>
		{
			switch(u8_port_copy)
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	3f 83       	std	Y+7, r19	; 0x07
    1656:	2e 83       	std	Y+6, r18	; 0x06
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	9f 81       	ldd	r25, Y+7	; 0x07
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	91 05       	cpc	r25, r1
    1660:	49 f1       	breq	.+82     	; 0x16b4 <DIO_VoidsetPinValue+0x98>
    1662:	2e 81       	ldd	r18, Y+6	; 0x06
    1664:	3f 81       	ldd	r19, Y+7	; 0x07
    1666:	22 30       	cpi	r18, 0x02	; 2
    1668:	31 05       	cpc	r19, r1
    166a:	2c f4       	brge	.+10     	; 0x1676 <DIO_VoidsetPinValue+0x5a>
    166c:	8e 81       	ldd	r24, Y+6	; 0x06
    166e:	9f 81       	ldd	r25, Y+7	; 0x07
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	61 f0       	breq	.+24     	; 0x168c <DIO_VoidsetPinValue+0x70>
    1674:	d2 c0       	rjmp	.+420    	; 0x181a <DIO_VoidsetPinValue+0x1fe>
    1676:	2e 81       	ldd	r18, Y+6	; 0x06
    1678:	3f 81       	ldd	r19, Y+7	; 0x07
    167a:	22 30       	cpi	r18, 0x02	; 2
    167c:	31 05       	cpc	r19, r1
    167e:	71 f1       	breq	.+92     	; 0x16dc <DIO_VoidsetPinValue+0xc0>
    1680:	8e 81       	ldd	r24, Y+6	; 0x06
    1682:	9f 81       	ldd	r25, Y+7	; 0x07
    1684:	83 30       	cpi	r24, 0x03	; 3
    1686:	91 05       	cpc	r25, r1
    1688:	e9 f1       	breq	.+122    	; 0x1704 <DIO_VoidsetPinValue+0xe8>
    168a:	c7 c0       	rjmp	.+398    	; 0x181a <DIO_VoidsetPinValue+0x1fe>
			{
			case PORTA:SET(PORTA_REG,u8_pin_copy);break;
    168c:	ab e3       	ldi	r26, 0x3B	; 59
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	eb e3       	ldi	r30, 0x3B	; 59
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	48 2f       	mov	r20, r24
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	02 2e       	mov	r0, r18
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <DIO_VoidsetPinValue+0x8e>
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	0a 94       	dec	r0
    16ac:	e2 f7       	brpl	.-8      	; 0x16a6 <DIO_VoidsetPinValue+0x8a>
    16ae:	84 2b       	or	r24, r20
    16b0:	8c 93       	st	X, r24
    16b2:	b3 c0       	rjmp	.+358    	; 0x181a <DIO_VoidsetPinValue+0x1fe>
			case PORTB:SET(PORTB_REG,u8_pin_copy);break;
    16b4:	a8 e3       	ldi	r26, 0x38	; 56
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e8 e3       	ldi	r30, 0x38	; 56
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	48 2f       	mov	r20, r24
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	02 2e       	mov	r0, r18
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <DIO_VoidsetPinValue+0xb6>
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	0a 94       	dec	r0
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <DIO_VoidsetPinValue+0xb2>
    16d6:	84 2b       	or	r24, r20
    16d8:	8c 93       	st	X, r24
    16da:	9f c0       	rjmp	.+318    	; 0x181a <DIO_VoidsetPinValue+0x1fe>
			case PORTC:SET(PORTC_REG,u8_pin_copy);break;
    16dc:	a5 e3       	ldi	r26, 0x35	; 53
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e5 e3       	ldi	r30, 0x35	; 53
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	48 2f       	mov	r20, r24
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 2e       	mov	r0, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <DIO_VoidsetPinValue+0xde>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	0a 94       	dec	r0
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <DIO_VoidsetPinValue+0xda>
    16fe:	84 2b       	or	r24, r20
    1700:	8c 93       	st	X, r24
    1702:	8b c0       	rjmp	.+278    	; 0x181a <DIO_VoidsetPinValue+0x1fe>
			case PORTD:SET(PORTD_REG,u8_pin_copy);break;
    1704:	a2 e3       	ldi	r26, 0x32	; 50
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e2 e3       	ldi	r30, 0x32	; 50
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	48 2f       	mov	r20, r24
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 2e       	mov	r0, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <DIO_VoidsetPinValue+0x106>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <DIO_VoidsetPinValue+0x102>
    1726:	84 2b       	or	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	77 c0       	rjmp	.+238    	; 0x181a <DIO_VoidsetPinValue+0x1fe>

			}

		}

		else if(u8_value_copy==LOW){
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	88 23       	and	r24, r24
    1730:	09 f0       	breq	.+2      	; 0x1734 <DIO_VoidsetPinValue+0x118>
    1732:	73 c0       	rjmp	.+230    	; 0x181a <DIO_VoidsetPinValue+0x1fe>

			switch(u8_port_copy){
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	3d 83       	std	Y+5, r19	; 0x05
    173c:	2c 83       	std	Y+4, r18	; 0x04
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	9d 81       	ldd	r25, Y+5	; 0x05
    1742:	81 30       	cpi	r24, 0x01	; 1
    1744:	91 05       	cpc	r25, r1
    1746:	59 f1       	breq	.+86     	; 0x179e <DIO_VoidsetPinValue+0x182>
    1748:	2c 81       	ldd	r18, Y+4	; 0x04
    174a:	3d 81       	ldd	r19, Y+5	; 0x05
    174c:	22 30       	cpi	r18, 0x02	; 2
    174e:	31 05       	cpc	r19, r1
    1750:	2c f4       	brge	.+10     	; 0x175c <DIO_VoidsetPinValue+0x140>
    1752:	8c 81       	ldd	r24, Y+4	; 0x04
    1754:	9d 81       	ldd	r25, Y+5	; 0x05
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	69 f0       	breq	.+26     	; 0x1774 <DIO_VoidsetPinValue+0x158>
    175a:	5f c0       	rjmp	.+190    	; 0x181a <DIO_VoidsetPinValue+0x1fe>
    175c:	2c 81       	ldd	r18, Y+4	; 0x04
    175e:	3d 81       	ldd	r19, Y+5	; 0x05
    1760:	22 30       	cpi	r18, 0x02	; 2
    1762:	31 05       	cpc	r19, r1
    1764:	89 f1       	breq	.+98     	; 0x17c8 <DIO_VoidsetPinValue+0x1ac>
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	9d 81       	ldd	r25, Y+5	; 0x05
    176a:	83 30       	cpi	r24, 0x03	; 3
    176c:	91 05       	cpc	r25, r1
    176e:	09 f4       	brne	.+2      	; 0x1772 <DIO_VoidsetPinValue+0x156>
    1770:	40 c0       	rjmp	.+128    	; 0x17f2 <DIO_VoidsetPinValue+0x1d6>
    1772:	53 c0       	rjmp	.+166    	; 0x181a <DIO_VoidsetPinValue+0x1fe>
			case PORTA:CLR(PORTA_REG,u8_pin_copy);break;
    1774:	ab e3       	ldi	r26, 0x3B	; 59
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	eb e3       	ldi	r30, 0x3B	; 59
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	48 2f       	mov	r20, r24
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 2e       	mov	r0, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <DIO_VoidsetPinValue+0x176>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	0a 94       	dec	r0
    1794:	e2 f7       	brpl	.-8      	; 0x178e <DIO_VoidsetPinValue+0x172>
    1796:	80 95       	com	r24
    1798:	84 23       	and	r24, r20
    179a:	8c 93       	st	X, r24
    179c:	3e c0       	rjmp	.+124    	; 0x181a <DIO_VoidsetPinValue+0x1fe>
			case PORTB:CLR(PORTB_REG,u8_pin_copy);break;
    179e:	a8 e3       	ldi	r26, 0x38	; 56
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e8 e3       	ldi	r30, 0x38	; 56
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	48 2f       	mov	r20, r24
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	02 2e       	mov	r0, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <DIO_VoidsetPinValue+0x1a0>
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	0a 94       	dec	r0
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <DIO_VoidsetPinValue+0x19c>
    17c0:	80 95       	com	r24
    17c2:	84 23       	and	r24, r20
    17c4:	8c 93       	st	X, r24
    17c6:	29 c0       	rjmp	.+82     	; 0x181a <DIO_VoidsetPinValue+0x1fe>
			case PORTC:CLR(PORTC_REG,u8_pin_copy);break;
    17c8:	a5 e3       	ldi	r26, 0x35	; 53
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e5 e3       	ldi	r30, 0x35	; 53
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	48 2f       	mov	r20, r24
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 2e       	mov	r0, r18
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <DIO_VoidsetPinValue+0x1ca>
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	0a 94       	dec	r0
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <DIO_VoidsetPinValue+0x1c6>
    17ea:	80 95       	com	r24
    17ec:	84 23       	and	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	14 c0       	rjmp	.+40     	; 0x181a <DIO_VoidsetPinValue+0x1fe>
			case PORTD:CLR(PORTD_REG,u8_pin_copy);break;
    17f2:	a2 e3       	ldi	r26, 0x32	; 50
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e2 e3       	ldi	r30, 0x32	; 50
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	48 2f       	mov	r20, r24
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 2e       	mov	r0, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <DIO_VoidsetPinValue+0x1f4>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <DIO_VoidsetPinValue+0x1f0>
    1814:	80 95       	com	r24
    1816:	84 23       	and	r24, r20
    1818:	8c 93       	st	X, r24
	else{
		/*do nothing*/

	}

}
    181a:	27 96       	adiw	r28, 0x07	; 7
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <DIO_u8GetPinValue>:
/* function read value from input pin */
u8 DIO_u8GetPinValue(u8 u8_port_copy,u8 u8_pin_copy){
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <DIO_u8GetPinValue+0x6>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <DIO_u8GetPinValue+0x8>
    1834:	00 d0       	rcall	.+0      	; 0x1836 <DIO_u8GetPinValue+0xa>
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	8a 83       	std	Y+2, r24	; 0x02
    183c:	6b 83       	std	Y+3, r22	; 0x03

	u8 u8_LOC_Value;
	if((u8_port_copy<4) && (u8_pin_copy<=7)){
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	84 30       	cpi	r24, 0x04	; 4
    1842:	08 f0       	brcs	.+2      	; 0x1846 <DIO_u8GetPinValue+0x1a>
    1844:	6e c0       	rjmp	.+220    	; 0x1922 <DIO_u8GetPinValue+0xf6>
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	88 30       	cpi	r24, 0x08	; 8
    184a:	08 f0       	brcs	.+2      	; 0x184e <DIO_u8GetPinValue+0x22>
    184c:	6a c0       	rjmp	.+212    	; 0x1922 <DIO_u8GetPinValue+0xf6>


		switch (u8_port_copy) {
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	3e 83       	std	Y+6, r19	; 0x06
    1856:	2d 83       	std	Y+5, r18	; 0x05
    1858:	4d 81       	ldd	r20, Y+5	; 0x05
    185a:	5e 81       	ldd	r21, Y+6	; 0x06
    185c:	41 30       	cpi	r20, 0x01	; 1
    185e:	51 05       	cpc	r21, r1
    1860:	41 f1       	breq	.+80     	; 0x18b2 <DIO_u8GetPinValue+0x86>
    1862:	8d 81       	ldd	r24, Y+5	; 0x05
    1864:	9e 81       	ldd	r25, Y+6	; 0x06
    1866:	82 30       	cpi	r24, 0x02	; 2
    1868:	91 05       	cpc	r25, r1
    186a:	34 f4       	brge	.+12     	; 0x1878 <DIO_u8GetPinValue+0x4c>
    186c:	2d 81       	ldd	r18, Y+5	; 0x05
    186e:	3e 81       	ldd	r19, Y+6	; 0x06
    1870:	21 15       	cp	r18, r1
    1872:	31 05       	cpc	r19, r1
    1874:	61 f0       	breq	.+24     	; 0x188e <DIO_u8GetPinValue+0x62>
    1876:	52 c0       	rjmp	.+164    	; 0x191c <DIO_u8GetPinValue+0xf0>
    1878:	4d 81       	ldd	r20, Y+5	; 0x05
    187a:	5e 81       	ldd	r21, Y+6	; 0x06
    187c:	42 30       	cpi	r20, 0x02	; 2
    187e:	51 05       	cpc	r21, r1
    1880:	51 f1       	breq	.+84     	; 0x18d6 <DIO_u8GetPinValue+0xaa>
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	9e 81       	ldd	r25, Y+6	; 0x06
    1886:	83 30       	cpi	r24, 0x03	; 3
    1888:	91 05       	cpc	r25, r1
    188a:	b9 f1       	breq	.+110    	; 0x18fa <DIO_u8GetPinValue+0xce>
    188c:	47 c0       	rjmp	.+142    	; 0x191c <DIO_u8GetPinValue+0xf0>

		case PORTA: u8_LOC_Value=GET(PINA_REG,u8_pin_copy); break;
    188e:	e9 e3       	ldi	r30, 0x39	; 57
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	88 2f       	mov	r24, r24
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a9 01       	movw	r20, r18
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <DIO_u8GetPinValue+0x7a>
    18a2:	55 95       	asr	r21
    18a4:	47 95       	ror	r20
    18a6:	8a 95       	dec	r24
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <DIO_u8GetPinValue+0x76>
    18aa:	ca 01       	movw	r24, r20
    18ac:	81 70       	andi	r24, 0x01	; 1
    18ae:	89 83       	std	Y+1, r24	; 0x01
    18b0:	35 c0       	rjmp	.+106    	; 0x191c <DIO_u8GetPinValue+0xf0>
		case PORTB: u8_LOC_Value=GET(PINB_REG,u8_pin_copy); break;
    18b2:	e6 e3       	ldi	r30, 0x36	; 54
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	88 2f       	mov	r24, r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	a9 01       	movw	r20, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <DIO_u8GetPinValue+0x9e>
    18c6:	55 95       	asr	r21
    18c8:	47 95       	ror	r20
    18ca:	8a 95       	dec	r24
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <DIO_u8GetPinValue+0x9a>
    18ce:	ca 01       	movw	r24, r20
    18d0:	81 70       	andi	r24, 0x01	; 1
    18d2:	89 83       	std	Y+1, r24	; 0x01
    18d4:	23 c0       	rjmp	.+70     	; 0x191c <DIO_u8GetPinValue+0xf0>
		case PORTC: u8_LOC_Value=GET(PINC_REG,u8_pin_copy); break;
    18d6:	e3 e3       	ldi	r30, 0x33	; 51
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	a9 01       	movw	r20, r18
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <DIO_u8GetPinValue+0xc2>
    18ea:	55 95       	asr	r21
    18ec:	47 95       	ror	r20
    18ee:	8a 95       	dec	r24
    18f0:	e2 f7       	brpl	.-8      	; 0x18ea <DIO_u8GetPinValue+0xbe>
    18f2:	ca 01       	movw	r24, r20
    18f4:	81 70       	andi	r24, 0x01	; 1
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	11 c0       	rjmp	.+34     	; 0x191c <DIO_u8GetPinValue+0xf0>
		case PORTD: u8_LOC_Value=GET(PIND_REG,u8_pin_copy); break;
    18fa:	e0 e3       	ldi	r30, 0x30	; 48
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	88 2f       	mov	r24, r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	a9 01       	movw	r20, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <DIO_u8GetPinValue+0xe6>
    190e:	55 95       	asr	r21
    1910:	47 95       	ror	r20
    1912:	8a 95       	dec	r24
    1914:	e2 f7       	brpl	.-8      	; 0x190e <DIO_u8GetPinValue+0xe2>
    1916:	ca 01       	movw	r24, r20
    1918:	81 70       	andi	r24, 0x01	; 1
    191a:	89 83       	std	Y+1, r24	; 0x01
	else{
		return 0xFF;
	}


	return u8_LOC_Value;
    191c:	59 81       	ldd	r21, Y+1	; 0x01
    191e:	5c 83       	std	Y+4, r21	; 0x04
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <DIO_u8GetPinValue+0xfa>
		case PORTD: u8_LOC_Value=GET(PIND_REG,u8_pin_copy); break;
		}

	}
	else{
		return 0xFF;
    1922:	8f ef       	ldi	r24, 0xFF	; 255
    1924:	8c 83       	std	Y+4, r24	; 0x04
    1926:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return u8_LOC_Value;

}
    1928:	26 96       	adiw	r28, 0x06	; 6
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <DIO_VoidsetPortDirection>:

/*function set direction for all port in one step*/
void  DIO_VoidsetPortDirection(u8 u8_port_copy,u8 u8_direction_copy){
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	00 d0       	rcall	.+0      	; 0x1940 <DIO_VoidsetPortDirection+0x6>
    1940:	00 d0       	rcall	.+0      	; 0x1942 <DIO_VoidsetPortDirection+0x8>
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	6a 83       	std	Y+2, r22	; 0x02
	if(u8_port_copy <4 ){
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	84 30       	cpi	r24, 0x04	; 4
    194e:	90 f5       	brcc	.+100    	; 0x19b4 <DIO_VoidsetPortDirection+0x7a>

		switch(u8_port_copy)
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	3c 83       	std	Y+4, r19	; 0x04
    1958:	2b 83       	std	Y+3, r18	; 0x03
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	9c 81       	ldd	r25, Y+4	; 0x04
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	91 05       	cpc	r25, r1
    1962:	d1 f0       	breq	.+52     	; 0x1998 <DIO_VoidsetPortDirection+0x5e>
    1964:	2b 81       	ldd	r18, Y+3	; 0x03
    1966:	3c 81       	ldd	r19, Y+4	; 0x04
    1968:	22 30       	cpi	r18, 0x02	; 2
    196a:	31 05       	cpc	r19, r1
    196c:	2c f4       	brge	.+10     	; 0x1978 <DIO_VoidsetPortDirection+0x3e>
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	9c 81       	ldd	r25, Y+4	; 0x04
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	61 f0       	breq	.+24     	; 0x198e <DIO_VoidsetPortDirection+0x54>
    1976:	1e c0       	rjmp	.+60     	; 0x19b4 <DIO_VoidsetPortDirection+0x7a>
    1978:	2b 81       	ldd	r18, Y+3	; 0x03
    197a:	3c 81       	ldd	r19, Y+4	; 0x04
    197c:	22 30       	cpi	r18, 0x02	; 2
    197e:	31 05       	cpc	r19, r1
    1980:	81 f0       	breq	.+32     	; 0x19a2 <DIO_VoidsetPortDirection+0x68>
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	83 30       	cpi	r24, 0x03	; 3
    1988:	91 05       	cpc	r25, r1
    198a:	81 f0       	breq	.+32     	; 0x19ac <DIO_VoidsetPortDirection+0x72>
    198c:	13 c0       	rjmp	.+38     	; 0x19b4 <DIO_VoidsetPortDirection+0x7a>
		{
		case PORTA: WRITE_BYTE(DDRA_REG, u8_direction_copy) ;break;
    198e:	ea e3       	ldi	r30, 0x3A	; 58
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	80 83       	st	Z, r24
    1996:	0e c0       	rjmp	.+28     	; 0x19b4 <DIO_VoidsetPortDirection+0x7a>
		case PORTB: WRITE_BYTE(DDRB_REG, u8_direction_copy) ;break;
    1998:	e7 e3       	ldi	r30, 0x37	; 55
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	80 83       	st	Z, r24
    19a0:	09 c0       	rjmp	.+18     	; 0x19b4 <DIO_VoidsetPortDirection+0x7a>
		case PORTC: WRITE_BYTE(DDRC_REG, u8_direction_copy) ;break;
    19a2:	e4 e3       	ldi	r30, 0x34	; 52
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	80 83       	st	Z, r24
    19aa:	04 c0       	rjmp	.+8      	; 0x19b4 <DIO_VoidsetPortDirection+0x7a>
		case PORTD: WRITE_BYTE(DDRD_REG, u8_direction_copy) ;break;
    19ac:	e1 e3       	ldi	r30, 0x31	; 49
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	80 83       	st	Z, r24
	else{
		//do nothing
	}


}
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <DIO_VoidsetPortValue>:

void  DIO_VoidsetPortValue(u8 u8_port_copy,u8 u8_value_copy){
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <DIO_VoidsetPortValue+0x6>
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <DIO_VoidsetPortValue+0x8>
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	6a 83       	std	Y+2, r22	; 0x02
	if(u8_port_copy <4 ){
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	84 30       	cpi	r24, 0x04	; 4
    19d6:	90 f5       	brcc	.+100    	; 0x1a3c <DIO_VoidsetPortValue+0x7a>

		switch(u8_port_copy)
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	3c 83       	std	Y+4, r19	; 0x04
    19e0:	2b 83       	std	Y+3, r18	; 0x03
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	9c 81       	ldd	r25, Y+4	; 0x04
    19e6:	81 30       	cpi	r24, 0x01	; 1
    19e8:	91 05       	cpc	r25, r1
    19ea:	d1 f0       	breq	.+52     	; 0x1a20 <DIO_VoidsetPortValue+0x5e>
    19ec:	2b 81       	ldd	r18, Y+3	; 0x03
    19ee:	3c 81       	ldd	r19, Y+4	; 0x04
    19f0:	22 30       	cpi	r18, 0x02	; 2
    19f2:	31 05       	cpc	r19, r1
    19f4:	2c f4       	brge	.+10     	; 0x1a00 <DIO_VoidsetPortValue+0x3e>
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	9c 81       	ldd	r25, Y+4	; 0x04
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	61 f0       	breq	.+24     	; 0x1a16 <DIO_VoidsetPortValue+0x54>
    19fe:	1e c0       	rjmp	.+60     	; 0x1a3c <DIO_VoidsetPortValue+0x7a>
    1a00:	2b 81       	ldd	r18, Y+3	; 0x03
    1a02:	3c 81       	ldd	r19, Y+4	; 0x04
    1a04:	22 30       	cpi	r18, 0x02	; 2
    1a06:	31 05       	cpc	r19, r1
    1a08:	81 f0       	breq	.+32     	; 0x1a2a <DIO_VoidsetPortValue+0x68>
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	83 30       	cpi	r24, 0x03	; 3
    1a10:	91 05       	cpc	r25, r1
    1a12:	81 f0       	breq	.+32     	; 0x1a34 <DIO_VoidsetPortValue+0x72>
    1a14:	13 c0       	rjmp	.+38     	; 0x1a3c <DIO_VoidsetPortValue+0x7a>
		{
		case PORTA: WRITE_BYTE(PORTA_REG, u8_value_copy) ;break;
    1a16:	eb e3       	ldi	r30, 0x3B	; 59
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	80 83       	st	Z, r24
    1a1e:	0e c0       	rjmp	.+28     	; 0x1a3c <DIO_VoidsetPortValue+0x7a>
		case PORTB: WRITE_BYTE(PORTB_REG, u8_value_copy) ;break;
    1a20:	e8 e3       	ldi	r30, 0x38	; 56
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	80 83       	st	Z, r24
    1a28:	09 c0       	rjmp	.+18     	; 0x1a3c <DIO_VoidsetPortValue+0x7a>
		case PORTC: WRITE_BYTE(PORTC_REG, u8_value_copy) ;break;
    1a2a:	e5 e3       	ldi	r30, 0x35	; 53
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	80 83       	st	Z, r24
    1a32:	04 c0       	rjmp	.+8      	; 0x1a3c <DIO_VoidsetPortValue+0x7a>
		case PORTD: WRITE_BYTE(PORTD_REG, u8_value_copy) ;break;
    1a34:	e2 e3       	ldi	r30, 0x32	; 50
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	80 83       	st	Z, r24
	else{
		//do nothing
	}


}
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <__vector_1>:
void (*pf_EXT2) (void);



void __vector_1(void)__attribute__((signal,used));
void __vector_1(void){
    1a4a:	1f 92       	push	r1
    1a4c:	0f 92       	push	r0
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	0f 92       	push	r0
    1a52:	11 24       	eor	r1, r1
    1a54:	2f 93       	push	r18
    1a56:	3f 93       	push	r19
    1a58:	4f 93       	push	r20
    1a5a:	5f 93       	push	r21
    1a5c:	6f 93       	push	r22
    1a5e:	7f 93       	push	r23
    1a60:	8f 93       	push	r24
    1a62:	9f 93       	push	r25
    1a64:	af 93       	push	r26
    1a66:	bf 93       	push	r27
    1a68:	ef 93       	push	r30
    1a6a:	ff 93       	push	r31
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62

	pf_EXT0();
    1a74:	e0 91 e1 02 	lds	r30, 0x02E1
    1a78:	f0 91 e2 02 	lds	r31, 0x02E2
    1a7c:	09 95       	icall

}
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	ff 91       	pop	r31
    1a84:	ef 91       	pop	r30
    1a86:	bf 91       	pop	r27
    1a88:	af 91       	pop	r26
    1a8a:	9f 91       	pop	r25
    1a8c:	8f 91       	pop	r24
    1a8e:	7f 91       	pop	r23
    1a90:	6f 91       	pop	r22
    1a92:	5f 91       	pop	r21
    1a94:	4f 91       	pop	r20
    1a96:	3f 91       	pop	r19
    1a98:	2f 91       	pop	r18
    1a9a:	0f 90       	pop	r0
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	0f 90       	pop	r0
    1aa0:	1f 90       	pop	r1
    1aa2:	18 95       	reti

00001aa4 <__vector_2>:

void __vector_2(void)__attribute__((signal,used));
void __vector_2(void){
    1aa4:	1f 92       	push	r1
    1aa6:	0f 92       	push	r0
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	0f 92       	push	r0
    1aac:	11 24       	eor	r1, r1
    1aae:	2f 93       	push	r18
    1ab0:	3f 93       	push	r19
    1ab2:	4f 93       	push	r20
    1ab4:	5f 93       	push	r21
    1ab6:	6f 93       	push	r22
    1ab8:	7f 93       	push	r23
    1aba:	8f 93       	push	r24
    1abc:	9f 93       	push	r25
    1abe:	af 93       	push	r26
    1ac0:	bf 93       	push	r27
    1ac2:	ef 93       	push	r30
    1ac4:	ff 93       	push	r31
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62

	pf_EXT1();
    1ace:	e0 91 df 02 	lds	r30, 0x02DF
    1ad2:	f0 91 e0 02 	lds	r31, 0x02E0
    1ad6:	09 95       	icall

}
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	ff 91       	pop	r31
    1ade:	ef 91       	pop	r30
    1ae0:	bf 91       	pop	r27
    1ae2:	af 91       	pop	r26
    1ae4:	9f 91       	pop	r25
    1ae6:	8f 91       	pop	r24
    1ae8:	7f 91       	pop	r23
    1aea:	6f 91       	pop	r22
    1aec:	5f 91       	pop	r21
    1aee:	4f 91       	pop	r20
    1af0:	3f 91       	pop	r19
    1af2:	2f 91       	pop	r18
    1af4:	0f 90       	pop	r0
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	0f 90       	pop	r0
    1afa:	1f 90       	pop	r1
    1afc:	18 95       	reti

00001afe <__vector_3>:

void __vector_3(void)__attribute__((signal,used));
void __vector_3(void){
    1afe:	1f 92       	push	r1
    1b00:	0f 92       	push	r0
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	0f 92       	push	r0
    1b06:	11 24       	eor	r1, r1
    1b08:	2f 93       	push	r18
    1b0a:	3f 93       	push	r19
    1b0c:	4f 93       	push	r20
    1b0e:	5f 93       	push	r21
    1b10:	6f 93       	push	r22
    1b12:	7f 93       	push	r23
    1b14:	8f 93       	push	r24
    1b16:	9f 93       	push	r25
    1b18:	af 93       	push	r26
    1b1a:	bf 93       	push	r27
    1b1c:	ef 93       	push	r30
    1b1e:	ff 93       	push	r31
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62

	pf_EXT2();
    1b28:	e0 91 dd 02 	lds	r30, 0x02DD
    1b2c:	f0 91 de 02 	lds	r31, 0x02DE
    1b30:	09 95       	icall

}
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	ff 91       	pop	r31
    1b38:	ef 91       	pop	r30
    1b3a:	bf 91       	pop	r27
    1b3c:	af 91       	pop	r26
    1b3e:	9f 91       	pop	r25
    1b40:	8f 91       	pop	r24
    1b42:	7f 91       	pop	r23
    1b44:	6f 91       	pop	r22
    1b46:	5f 91       	pop	r21
    1b48:	4f 91       	pop	r20
    1b4a:	3f 91       	pop	r19
    1b4c:	2f 91       	pop	r18
    1b4e:	0f 90       	pop	r0
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	0f 90       	pop	r0
    1b54:	1f 90       	pop	r1
    1b56:	18 95       	reti

00001b58 <EXT_VidInit>:



void EXT_VidInit(u8 LOC_U8_EXTINUM,u8 LOC_u8Mode,u8 LOC_POLLING_Or_interrupt){
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	29 97       	sbiw	r28, 0x09	; 9
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	6a 83       	std	Y+2, r22	; 0x02
    1b70:	4b 83       	std	Y+3, r20	; 0x03

	/*                                     SENSING SETINGS                                            */
	if(LOC_U8_EXTINUM==EXIT0)
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	88 23       	and	r24, r24
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <EXT_VidInit+0x22>
    1b78:	5e c0       	rjmp	.+188    	; 0x1c36 <EXT_VidInit+0xde>
	{
		DIO_VoidsetPinDirection(PORTD,PIN2,INPUT); // PD2=INT0 PIN Peripheral
    1b7a:	83 e0       	ldi	r24, 0x03	; 3
    1b7c:	62 e0       	ldi	r22, 0x02	; 2
    1b7e:	40 e0       	ldi	r20, 0x00	; 0
    1b80:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_VoidsetPinDirection>
		//DIO_VoidsetPinValue(PORTD,PIN2,HIGH); //pull uP

		switch(LOC_u8Mode)
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	39 87       	std	Y+9, r19	; 0x09
    1b8c:	28 87       	std	Y+8, r18	; 0x08
    1b8e:	88 85       	ldd	r24, Y+8	; 0x08
    1b90:	99 85       	ldd	r25, Y+9	; 0x09
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	91 05       	cpc	r25, r1
    1b96:	91 f1       	breq	.+100    	; 0x1bfc <EXT_VidInit+0xa4>
    1b98:	28 85       	ldd	r18, Y+8	; 0x08
    1b9a:	39 85       	ldd	r19, Y+9	; 0x09
    1b9c:	22 30       	cpi	r18, 0x02	; 2
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	2c f4       	brge	.+10     	; 0x1bac <EXT_VidInit+0x54>
    1ba2:	88 85       	ldd	r24, Y+8	; 0x08
    1ba4:	99 85       	ldd	r25, Y+9	; 0x09
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	d1 f0       	breq	.+52     	; 0x1bde <EXT_VidInit+0x86>
    1baa:	45 c0       	rjmp	.+138    	; 0x1c36 <EXT_VidInit+0xde>
    1bac:	28 85       	ldd	r18, Y+8	; 0x08
    1bae:	39 85       	ldd	r19, Y+9	; 0x09
    1bb0:	22 30       	cpi	r18, 0x02	; 2
    1bb2:	31 05       	cpc	r19, r1
    1bb4:	91 f1       	breq	.+100    	; 0x1c1a <EXT_VidInit+0xc2>
    1bb6:	88 85       	ldd	r24, Y+8	; 0x08
    1bb8:	99 85       	ldd	r25, Y+9	; 0x09
    1bba:	83 30       	cpi	r24, 0x03	; 3
    1bbc:	91 05       	cpc	r25, r1
    1bbe:	d9 f5       	brne	.+118    	; 0x1c36 <EXT_VidInit+0xde>
		{
		case LOW_LEVEL_EDGE:
			CLR(MCUCR,0); CLR(MCUCR,1);
    1bc0:	a5 e5       	ldi	r26, 0x55	; 85
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e5 e5       	ldi	r30, 0x55	; 85
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	8e 7f       	andi	r24, 0xFE	; 254
    1bcc:	8c 93       	st	X, r24
    1bce:	a5 e5       	ldi	r26, 0x55	; 85
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e5 e5       	ldi	r30, 0x55	; 85
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	8d 7f       	andi	r24, 0xFD	; 253
    1bda:	8c 93       	st	X, r24
    1bdc:	2c c0       	rjmp	.+88     	; 0x1c36 <EXT_VidInit+0xde>
			break;
		case FALLIN_EDGE:
			CLR(MCUCR,0); SET(MCUCR,1);
    1bde:	a5 e5       	ldi	r26, 0x55	; 85
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e5 e5       	ldi	r30, 0x55	; 85
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	8e 7f       	andi	r24, 0xFE	; 254
    1bea:	8c 93       	st	X, r24
    1bec:	a5 e5       	ldi	r26, 0x55	; 85
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e5 e5       	ldi	r30, 0x55	; 85
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	82 60       	ori	r24, 0x02	; 2
    1bf8:	8c 93       	st	X, r24
    1bfa:	1d c0       	rjmp	.+58     	; 0x1c36 <EXT_VidInit+0xde>
			break;
		case RISING_EDGE:
			SET(MCUCR,0); SET(MCUCR,1);
    1bfc:	a5 e5       	ldi	r26, 0x55	; 85
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e5 e5       	ldi	r30, 0x55	; 85
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	81 60       	ori	r24, 0x01	; 1
    1c08:	8c 93       	st	X, r24
    1c0a:	a5 e5       	ldi	r26, 0x55	; 85
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e5 e5       	ldi	r30, 0x55	; 85
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	82 60       	ori	r24, 0x02	; 2
    1c16:	8c 93       	st	X, r24
    1c18:	0e c0       	rjmp	.+28     	; 0x1c36 <EXT_VidInit+0xde>
			break;
		case ONCHANG_EDGE:
			CLR(MCUCR,0); CLR(MCUCR,1);
    1c1a:	a5 e5       	ldi	r26, 0x55	; 85
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e5 e5       	ldi	r30, 0x55	; 85
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8e 7f       	andi	r24, 0xFE	; 254
    1c26:	8c 93       	st	X, r24
    1c28:	a5 e5       	ldi	r26, 0x55	; 85
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e5 e5       	ldi	r30, 0x55	; 85
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	8d 7f       	andi	r24, 0xFD	; 253
    1c34:	8c 93       	st	X, r24
		}

	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	if(LOC_U8_EXTINUM==EXIT1)
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <EXT_VidInit+0xe6>
    1c3c:	63 c0       	rjmp	.+198    	; 0x1d04 <EXT_VidInit+0x1ac>
	{
		DIO_VoidsetPinDirection(PORTD,PIN3,INPUT); // PD2=INT0 PIN Peripheral
    1c3e:	83 e0       	ldi	r24, 0x03	; 3
    1c40:	63 e0       	ldi	r22, 0x03	; 3
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_VoidsetPinDirection>
		DIO_VoidsetPinValue(PORTD,PIN3,HIGH); //pull up
    1c48:	83 e0       	ldi	r24, 0x03	; 3
    1c4a:	63 e0       	ldi	r22, 0x03	; 3
    1c4c:	41 e0       	ldi	r20, 0x01	; 1
    1c4e:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_VoidsetPinValue>
		switch(LOC_u8Mode)
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	3f 83       	std	Y+7, r19	; 0x07
    1c5a:	2e 83       	std	Y+6, r18	; 0x06
    1c5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	91 05       	cpc	r25, r1
    1c64:	91 f1       	breq	.+100    	; 0x1cca <EXT_VidInit+0x172>
    1c66:	2e 81       	ldd	r18, Y+6	; 0x06
    1c68:	3f 81       	ldd	r19, Y+7	; 0x07
    1c6a:	22 30       	cpi	r18, 0x02	; 2
    1c6c:	31 05       	cpc	r19, r1
    1c6e:	2c f4       	brge	.+10     	; 0x1c7a <EXT_VidInit+0x122>
    1c70:	8e 81       	ldd	r24, Y+6	; 0x06
    1c72:	9f 81       	ldd	r25, Y+7	; 0x07
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	d1 f0       	breq	.+52     	; 0x1cac <EXT_VidInit+0x154>
    1c78:	45 c0       	rjmp	.+138    	; 0x1d04 <EXT_VidInit+0x1ac>
    1c7a:	2e 81       	ldd	r18, Y+6	; 0x06
    1c7c:	3f 81       	ldd	r19, Y+7	; 0x07
    1c7e:	22 30       	cpi	r18, 0x02	; 2
    1c80:	31 05       	cpc	r19, r1
    1c82:	91 f1       	breq	.+100    	; 0x1ce8 <EXT_VidInit+0x190>
    1c84:	8e 81       	ldd	r24, Y+6	; 0x06
    1c86:	9f 81       	ldd	r25, Y+7	; 0x07
    1c88:	83 30       	cpi	r24, 0x03	; 3
    1c8a:	91 05       	cpc	r25, r1
    1c8c:	d9 f5       	brne	.+118    	; 0x1d04 <EXT_VidInit+0x1ac>
		{
		case LOW_LEVEL_EDGE:
			CLR(MCUCR,2); CLR(MCUCR,3);
    1c8e:	a5 e5       	ldi	r26, 0x55	; 85
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e5 e5       	ldi	r30, 0x55	; 85
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	8b 7f       	andi	r24, 0xFB	; 251
    1c9a:	8c 93       	st	X, r24
    1c9c:	a5 e5       	ldi	r26, 0x55	; 85
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e5 e5       	ldi	r30, 0x55	; 85
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	87 7f       	andi	r24, 0xF7	; 247
    1ca8:	8c 93       	st	X, r24
    1caa:	2c c0       	rjmp	.+88     	; 0x1d04 <EXT_VidInit+0x1ac>
			break;
		case FALLIN_EDGE:
			CLR(MCUCR,2); SET(MCUCR,3);
    1cac:	a5 e5       	ldi	r26, 0x55	; 85
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e5 e5       	ldi	r30, 0x55	; 85
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	8b 7f       	andi	r24, 0xFB	; 251
    1cb8:	8c 93       	st	X, r24
    1cba:	a5 e5       	ldi	r26, 0x55	; 85
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e5 e5       	ldi	r30, 0x55	; 85
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	88 60       	ori	r24, 0x08	; 8
    1cc6:	8c 93       	st	X, r24
    1cc8:	1d c0       	rjmp	.+58     	; 0x1d04 <EXT_VidInit+0x1ac>
			break;
		case RISING_EDGE:
			SET(MCUCR,2); SET(MCUCR,3);
    1cca:	a5 e5       	ldi	r26, 0x55	; 85
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e5 e5       	ldi	r30, 0x55	; 85
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	84 60       	ori	r24, 0x04	; 4
    1cd6:	8c 93       	st	X, r24
    1cd8:	a5 e5       	ldi	r26, 0x55	; 85
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e5 e5       	ldi	r30, 0x55	; 85
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	88 60       	ori	r24, 0x08	; 8
    1ce4:	8c 93       	st	X, r24
    1ce6:	0e c0       	rjmp	.+28     	; 0x1d04 <EXT_VidInit+0x1ac>
			break;
		case ONCHANG_EDGE:
			CLR(MCUCR,2); CLR(MCUCR,3);//8LTA
    1ce8:	a5 e5       	ldi	r26, 0x55	; 85
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e5 e5       	ldi	r30, 0x55	; 85
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	8b 7f       	andi	r24, 0xFB	; 251
    1cf4:	8c 93       	st	X, r24
    1cf6:	a5 e5       	ldi	r26, 0x55	; 85
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e5 e5       	ldi	r30, 0x55	; 85
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	87 7f       	andi	r24, 0xF7	; 247
    1d02:	8c 93       	st	X, r24


		}
	}
	///////////////////////////////////////////////////////////////////////////////////////////////////
	if(LOC_U8_EXTINUM==EXIT2)
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	82 30       	cpi	r24, 0x02	; 2
    1d08:	41 f5       	brne	.+80     	; 0x1d5a <EXT_VidInit+0x202>
	{
		DIO_VoidsetPinDirection(PORTB,PIN2,INPUT); // PD2=INT0 PIN Peripheral
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	62 e0       	ldi	r22, 0x02	; 2
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_VoidsetPinDirection>
		DIO_VoidsetPinValue(PORTB,PIN2,HIGH); //pull up
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	62 e0       	ldi	r22, 0x02	; 2
    1d18:	41 e0       	ldi	r20, 0x01	; 1
    1d1a:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_VoidsetPinValue>
		switch(LOC_u8Mode){
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	28 2f       	mov	r18, r24
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	3d 83       	std	Y+5, r19	; 0x05
    1d26:	2c 83       	std	Y+4, r18	; 0x04
    1d28:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	31 f0       	breq	.+12     	; 0x1d3c <EXT_VidInit+0x1e4>
    1d30:	2c 81       	ldd	r18, Y+4	; 0x04
    1d32:	3d 81       	ldd	r19, Y+5	; 0x05
    1d34:	21 30       	cpi	r18, 0x01	; 1
    1d36:	31 05       	cpc	r19, r1
    1d38:	49 f0       	breq	.+18     	; 0x1d4c <EXT_VidInit+0x1f4>
    1d3a:	0f c0       	rjmp	.+30     	; 0x1d5a <EXT_VidInit+0x202>

		case FALLIN_EDGE:
			CLR(MCUCSR,6);
    1d3c:	a4 e5       	ldi	r26, 0x54	; 84
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e4 e5       	ldi	r30, 0x54	; 84
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	8f 7b       	andi	r24, 0xBF	; 191
    1d48:	8c 93       	st	X, r24
    1d4a:	07 c0       	rjmp	.+14     	; 0x1d5a <EXT_VidInit+0x202>
			break;
		case RISING_EDGE:
			SET(MCUCSR,6);
    1d4c:	a4 e5       	ldi	r26, 0x54	; 84
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e4 e5       	ldi	r30, 0x54	; 84
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	80 64       	ori	r24, 0x40	; 64
    1d58:	8c 93       	st	X, r24

		}
	}

	/*                                 CHECK INTERRUPT OR polling                                     */
	if(LOC_POLLING_Or_interrupt==INTERRUPT)
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	41 f5       	brne	.+80     	; 0x1db0 <EXT_VidInit+0x258>
	{
		if(LOC_U8_EXTINUM==EXIT0)
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	88 23       	and	r24, r24
    1d64:	41 f4       	brne	.+16     	; 0x1d76 <EXT_VidInit+0x21e>
		{
			SET(GICR,6);
    1d66:	ab e5       	ldi	r26, 0x5B	; 91
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	eb e5       	ldi	r30, 0x5B	; 91
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	80 64       	ori	r24, 0x40	; 64
    1d72:	8c 93       	st	X, r24
    1d74:	15 c0       	rjmp	.+42     	; 0x1da0 <EXT_VidInit+0x248>
		}
		else if(LOC_U8_EXTINUM==EXIT1)
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	41 f4       	brne	.+16     	; 0x1d8c <EXT_VidInit+0x234>
		{
			SET(GICR,7);
    1d7c:	ab e5       	ldi	r26, 0x5B	; 91
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	eb e5       	ldi	r30, 0x5B	; 91
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	80 68       	ori	r24, 0x80	; 128
    1d88:	8c 93       	st	X, r24
    1d8a:	0a c0       	rjmp	.+20     	; 0x1da0 <EXT_VidInit+0x248>
		}
		else if(LOC_U8_EXTINUM==EXIT2)
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	82 30       	cpi	r24, 0x02	; 2
    1d90:	39 f4       	brne	.+14     	; 0x1da0 <EXT_VidInit+0x248>
		{
			SET(GICR,5);
    1d92:	ab e5       	ldi	r26, 0x5B	; 91
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	eb e5       	ldi	r30, 0x5B	; 91
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	80 62       	ori	r24, 0x20	; 32
    1d9e:	8c 93       	st	X, r24
		}

		SET(SREG,7);
    1da0:	af e5       	ldi	r26, 0x5F	; 95
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	ef e5       	ldi	r30, 0x5F	; 95
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	80 68       	ori	r24, 0x80	; 128
    1dac:	8c 93       	st	X, r24
    1dae:	20 c0       	rjmp	.+64     	; 0x1df0 <EXT_VidInit+0x298>

	}
	else
	{ // IF POLLing close GICR (close iNT0,1,2 Peripheral),and check flag ITF in main file
		if(LOC_U8_EXTINUM==EXIT0)
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	88 23       	and	r24, r24
    1db4:	41 f4       	brne	.+16     	; 0x1dc6 <EXT_VidInit+0x26e>
		{
			CLR(GICR,6);
    1db6:	ab e5       	ldi	r26, 0x5B	; 91
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	eb e5       	ldi	r30, 0x5B	; 91
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	8f 7b       	andi	r24, 0xBF	; 191
    1dc2:	8c 93       	st	X, r24
    1dc4:	15 c0       	rjmp	.+42     	; 0x1df0 <EXT_VidInit+0x298>
		}
		else if(LOC_U8_EXTINUM==EXIT1)
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	41 f4       	brne	.+16     	; 0x1ddc <EXT_VidInit+0x284>
		{
			CLR(GICR,7);
    1dcc:	ab e5       	ldi	r26, 0x5B	; 91
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	eb e5       	ldi	r30, 0x5B	; 91
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	8f 77       	andi	r24, 0x7F	; 127
    1dd8:	8c 93       	st	X, r24
    1dda:	0a c0       	rjmp	.+20     	; 0x1df0 <EXT_VidInit+0x298>
		}
		else if(LOC_U8_EXTINUM==EXIT2)
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	82 30       	cpi	r24, 0x02	; 2
    1de0:	39 f4       	brne	.+14     	; 0x1df0 <EXT_VidInit+0x298>
		{
			CLR (GICR,5);
    1de2:	ab e5       	ldi	r26, 0x5B	; 91
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	eb e5       	ldi	r30, 0x5B	; 91
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	8f 7d       	andi	r24, 0xDF	; 223
    1dee:	8c 93       	st	X, r24
		}
	}

}
    1df0:	29 96       	adiw	r28, 0x09	; 9
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <EXT_VidDisableInterrupt>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void EXT_VidDisableInterrupt(u8 LOC_U8_EXTINUM){
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <EXT_VidDisableInterrupt+0x6>
    1e08:	0f 92       	push	r0
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	89 83       	std	Y+1, r24	; 0x01
	/*  FOR DISABLE INTERRUPT DISABLE ONLY BIT OF PERI IN GICR  */
	switch( LOC_U8_EXTINUM){
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	3b 83       	std	Y+3, r19	; 0x03
    1e18:	2a 83       	std	Y+2, r18	; 0x02
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	91 05       	cpc	r25, r1
    1e22:	89 f0       	breq	.+34     	; 0x1e46 <EXT_VidDisableInterrupt+0x44>
    1e24:	2a 81       	ldd	r18, Y+2	; 0x02
    1e26:	3b 81       	ldd	r19, Y+3	; 0x03
    1e28:	22 30       	cpi	r18, 0x02	; 2
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	a1 f0       	breq	.+40     	; 0x1e56 <EXT_VidDisableInterrupt+0x54>
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	9b 81       	ldd	r25, Y+3	; 0x03
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	b9 f4       	brne	.+46     	; 0x1e64 <EXT_VidDisableInterrupt+0x62>
	case EXIT0:
		CLR(GICR,6);
    1e36:	ab e5       	ldi	r26, 0x5B	; 91
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	eb e5       	ldi	r30, 0x5B	; 91
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	8f 7b       	andi	r24, 0xBF	; 191
    1e42:	8c 93       	st	X, r24
    1e44:	0f c0       	rjmp	.+30     	; 0x1e64 <EXT_VidDisableInterrupt+0x62>
		break;
	case EXIT1:
		CLR(GICR,7);
    1e46:	ab e5       	ldi	r26, 0x5B	; 91
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	eb e5       	ldi	r30, 0x5B	; 91
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	8f 77       	andi	r24, 0x7F	; 127
    1e52:	8c 93       	st	X, r24
    1e54:	07 c0       	rjmp	.+14     	; 0x1e64 <EXT_VidDisableInterrupt+0x62>
		break;
	case EXIT2:
		CLR(GICR,5);
    1e56:	ab e5       	ldi	r26, 0x5B	; 91
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	eb e5       	ldi	r30, 0x5B	; 91
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	8f 7d       	andi	r24, 0xDF	; 223
    1e62:	8c 93       	st	X, r24
		break;
	}
}
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <EXT_U8ReadFLag>:
///////////////////////////////////////////////////////////////////////////////////////////////////////

/*                              read event flag (intf)                                        */

u8 EXT_U8ReadFLag(u8 LOC_U8_EXTINUM)
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <EXT_U8ReadFLag+0x6>
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <EXT_U8ReadFLag+0x8>
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Read;
	switch( LOC_U8_EXTINUM){
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	28 2f       	mov	r18, r24
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	3c 83       	std	Y+4, r19	; 0x04
    1e86:	2b 83       	std	Y+3, r18	; 0x03
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8c:	81 30       	cpi	r24, 0x01	; 1
    1e8e:	91 05       	cpc	r25, r1
    1e90:	99 f0       	breq	.+38     	; 0x1eb8 <EXT_U8ReadFLag+0x48>
    1e92:	2b 81       	ldd	r18, Y+3	; 0x03
    1e94:	3c 81       	ldd	r19, Y+4	; 0x04
    1e96:	22 30       	cpi	r18, 0x02	; 2
    1e98:	31 05       	cpc	r19, r1
    1e9a:	b1 f0       	breq	.+44     	; 0x1ec8 <EXT_U8ReadFLag+0x58>
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea0:	00 97       	sbiw	r24, 0x00	; 0
    1ea2:	d1 f4       	brne	.+52     	; 0x1ed8 <EXT_U8ReadFLag+0x68>
	case EXIT0:
		Read=GET(GIFR,6);
    1ea4:	ea e5       	ldi	r30, 0x5A	; 90
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	82 95       	swap	r24
    1eac:	86 95       	lsr	r24
    1eae:	86 95       	lsr	r24
    1eb0:	83 70       	andi	r24, 0x03	; 3
    1eb2:	81 70       	andi	r24, 0x01	; 1
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	10 c0       	rjmp	.+32     	; 0x1ed8 <EXT_U8ReadFLag+0x68>
		break;
	case EXIT1:
		Read=GET(GIFR,7);
    1eb8:	ea e5       	ldi	r30, 0x5A	; 90
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	88 1f       	adc	r24, r24
    1ec0:	88 27       	eor	r24, r24
    1ec2:	88 1f       	adc	r24, r24
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	08 c0       	rjmp	.+16     	; 0x1ed8 <EXT_U8ReadFLag+0x68>
		break;
	case EXIT2:
		Read=GET(GIFR,5);
    1ec8:	ea e5       	ldi	r30, 0x5A	; 90
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	82 95       	swap	r24
    1ed0:	86 95       	lsr	r24
    1ed2:	87 70       	andi	r24, 0x07	; 7
    1ed4:	81 70       	andi	r24, 0x01	; 1
    1ed6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Read;
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <EXT_VidClearFlag>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void EXT_VidClearFlag(u8 LOC_U8_EXTINUM)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <EXT_VidClearFlag+0x6>
    1eee:	0f 92       	push	r0
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	89 83       	std	Y+1, r24	; 0x01
	switch( LOC_U8_EXTINUM){
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	3b 83       	std	Y+3, r19	; 0x03
    1efe:	2a 83       	std	Y+2, r18	; 0x02
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	9b 81       	ldd	r25, Y+3	; 0x03
    1f04:	81 30       	cpi	r24, 0x01	; 1
    1f06:	91 05       	cpc	r25, r1
    1f08:	89 f0       	breq	.+34     	; 0x1f2c <EXT_VidClearFlag+0x44>
    1f0a:	2a 81       	ldd	r18, Y+2	; 0x02
    1f0c:	3b 81       	ldd	r19, Y+3	; 0x03
    1f0e:	22 30       	cpi	r18, 0x02	; 2
    1f10:	31 05       	cpc	r19, r1
    1f12:	a1 f0       	breq	.+40     	; 0x1f3c <EXT_VidClearFlag+0x54>
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	9b 81       	ldd	r25, Y+3	; 0x03
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	b9 f4       	brne	.+46     	; 0x1f4a <EXT_VidClearFlag+0x62>
	case EXIT0:
		SET(GIFR,6); // TO CLEAR WRITE 1
    1f1c:	aa e5       	ldi	r26, 0x5A	; 90
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	ea e5       	ldi	r30, 0x5A	; 90
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	80 64       	ori	r24, 0x40	; 64
    1f28:	8c 93       	st	X, r24
    1f2a:	0f c0       	rjmp	.+30     	; 0x1f4a <EXT_VidClearFlag+0x62>
		break;
	case EXIT1:
		SET(GIFR,7);
    1f2c:	aa e5       	ldi	r26, 0x5A	; 90
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	ea e5       	ldi	r30, 0x5A	; 90
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	80 68       	ori	r24, 0x80	; 128
    1f38:	8c 93       	st	X, r24
    1f3a:	07 c0       	rjmp	.+14     	; 0x1f4a <EXT_VidClearFlag+0x62>
		break;
	case EXIT2:
		SET(GIFR,5);
    1f3c:	aa e5       	ldi	r26, 0x5A	; 90
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	ea e5       	ldi	r30, 0x5A	; 90
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	80 62       	ori	r24, 0x20	; 32
    1f48:	8c 93       	st	X, r24
		break;
	}


}
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <set_callBack0>:
void set_callBack0(void (*ptr)(void))  // ptr will carry add of user function to excaute  in ISR
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	00 d0       	rcall	.+0      	; 0x1f5c <set_callBack0+0x6>
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	9a 83       	std	Y+2, r25	; 0x02
    1f62:	89 83       	std	Y+1, r24	; 0x01
	pf_EXT0=ptr;
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	9a 81       	ldd	r25, Y+2	; 0x02
    1f68:	90 93 e2 02 	sts	0x02E2, r25
    1f6c:	80 93 e1 02 	sts	0x02E1, r24

}
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <set_callBack1>:

void set_callBack1(void (*ptr)(void))
{
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <set_callBack1+0x6>
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	9a 83       	std	Y+2, r25	; 0x02
    1f86:	89 83       	std	Y+1, r24	; 0x01
	pf_EXT1=ptr;
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8c:	90 93 e0 02 	sts	0x02E0, r25
    1f90:	80 93 df 02 	sts	0x02DF, r24

}
    1f94:	0f 90       	pop	r0
    1f96:	0f 90       	pop	r0
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <set_callBack2>:

void set_callBack2(void (*ptr)(void))
{
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <set_callBack2+0x6>
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	9a 83       	std	Y+2, r25	; 0x02
    1faa:	89 83       	std	Y+1, r24	; 0x01
	pf_EXT2=ptr;
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb0:	90 93 de 02 	sts	0x02DE, r25
    1fb4:	80 93 dd 02 	sts	0x02DD, r24

}
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <IR_Void_INIT>:
#include "DIO_register.h"
#include "DIO_interface.h"
#include "IR_SENSOR.h"

void IR_Void_INIT(void)
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
	DIO_VoidsetPinDirection(IR_PORT,IR_PIN,INPUT);
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	61 e0       	ldi	r22, 0x01	; 1
    1fce:	40 e0       	ldi	r20, 0x00	; 0
    1fd0:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_VoidsetPinDirection>
}
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <IR_u8_ReadIrOut>:

u8 IR_u8_ReadIrOut(void)
{
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	0f 92       	push	r0
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
	u8 data;
	DIO_u8GetPinValue(IR_PORT,IR_PIN);
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	61 e0       	ldi	r22, 0x01	; 1
    1fe8:	0e 94 16 0c 	call	0x182c	; 0x182c <DIO_u8GetPinValue>
	return data;
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fee:	0f 90       	pop	r0
    1ff0:	cf 91       	pop	r28
    1ff2:	df 91       	pop	r29
    1ff4:	08 95       	ret

00001ff6 <LCD_voidInit>:
#include"BIT_MATH.h"
#include"DIO_interface.h"
#include"util/delay.h"
#include "LCD_interface.h"

void LCD_voidInit(void){
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	e8 97       	sbiw	r28, 0x38	; 56
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61

	DIO_VoidsetPortDirection(PORTC,0XFF);
    200a:	82 e0       	ldi	r24, 0x02	; 2
    200c:	6f ef       	ldi	r22, 0xFF	; 255
    200e:	0e 94 9d 0c 	call	0x193a	; 0x193a <DIO_VoidsetPortDirection>

	DIO_VoidsetPortDirection(PORTD,0XE0);
    2012:	83 e0       	ldi	r24, 0x03	; 3
    2014:	60 ee       	ldi	r22, 0xE0	; 224
    2016:	0e 94 9d 0c 	call	0x193a	; 0x193a <DIO_VoidsetPortDirection>
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	a0 e8       	ldi	r26, 0x80	; 128
    2020:	bf e3       	ldi	r27, 0x3F	; 63
    2022:	8d ab       	std	Y+53, r24	; 0x35
    2024:	9e ab       	std	Y+54, r25	; 0x36
    2026:	af ab       	std	Y+55, r26	; 0x37
    2028:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202a:	6d a9       	ldd	r22, Y+53	; 0x35
    202c:	7e a9       	ldd	r23, Y+54	; 0x36
    202e:	8f a9       	ldd	r24, Y+55	; 0x37
    2030:	98 ad       	ldd	r25, Y+56	; 0x38
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	4a ef       	ldi	r20, 0xFA	; 250
    2038:	54 e4       	ldi	r21, 0x44	; 68
    203a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	89 ab       	std	Y+49, r24	; 0x31
    2044:	9a ab       	std	Y+50, r25	; 0x32
    2046:	ab ab       	std	Y+51, r26	; 0x33
    2048:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    204a:	69 a9       	ldd	r22, Y+49	; 0x31
    204c:	7a a9       	ldd	r23, Y+50	; 0x32
    204e:	8b a9       	ldd	r24, Y+51	; 0x33
    2050:	9c a9       	ldd	r25, Y+52	; 0x34
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e8       	ldi	r20, 0x80	; 128
    2058:	5f e3       	ldi	r21, 0x3F	; 63
    205a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    205e:	88 23       	and	r24, r24
    2060:	2c f4       	brge	.+10     	; 0x206c <LCD_voidInit+0x76>
		__ticks = 1;
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	98 ab       	std	Y+48, r25	; 0x30
    2068:	8f a7       	std	Y+47, r24	; 0x2f
    206a:	3f c0       	rjmp	.+126    	; 0x20ea <LCD_voidInit+0xf4>
	else if (__tmp > 65535)
    206c:	69 a9       	ldd	r22, Y+49	; 0x31
    206e:	7a a9       	ldd	r23, Y+50	; 0x32
    2070:	8b a9       	ldd	r24, Y+51	; 0x33
    2072:	9c a9       	ldd	r25, Y+52	; 0x34
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	3f ef       	ldi	r19, 0xFF	; 255
    2078:	4f e7       	ldi	r20, 0x7F	; 127
    207a:	57 e4       	ldi	r21, 0x47	; 71
    207c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2080:	18 16       	cp	r1, r24
    2082:	4c f5       	brge	.+82     	; 0x20d6 <LCD_voidInit+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2084:	6d a9       	ldd	r22, Y+53	; 0x35
    2086:	7e a9       	ldd	r23, Y+54	; 0x36
    2088:	8f a9       	ldd	r24, Y+55	; 0x37
    208a:	98 ad       	ldd	r25, Y+56	; 0x38
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	40 e2       	ldi	r20, 0x20	; 32
    2092:	51 e4       	ldi	r21, 0x41	; 65
    2094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	bc 01       	movw	r22, r24
    209e:	cd 01       	movw	r24, r26
    20a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	98 ab       	std	Y+48, r25	; 0x30
    20aa:	8f a7       	std	Y+47, r24	; 0x2f
    20ac:	0f c0       	rjmp	.+30     	; 0x20cc <LCD_voidInit+0xd6>
    20ae:	88 ec       	ldi	r24, 0xC8	; 200
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	9e a7       	std	Y+46, r25	; 0x2e
    20b4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    20b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <LCD_voidInit+0xc4>
    20be:	9e a7       	std	Y+46, r25	; 0x2e
    20c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    20c4:	98 a9       	ldd	r25, Y+48	; 0x30
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	98 ab       	std	Y+48, r25	; 0x30
    20ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ce:	98 a9       	ldd	r25, Y+48	; 0x30
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	69 f7       	brne	.-38     	; 0x20ae <LCD_voidInit+0xb8>
    20d4:	14 c0       	rjmp	.+40     	; 0x20fe <LCD_voidInit+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d6:	69 a9       	ldd	r22, Y+49	; 0x31
    20d8:	7a a9       	ldd	r23, Y+50	; 0x32
    20da:	8b a9       	ldd	r24, Y+51	; 0x33
    20dc:	9c a9       	ldd	r25, Y+52	; 0x34
    20de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	98 ab       	std	Y+48, r25	; 0x30
    20e8:	8f a7       	std	Y+47, r24	; 0x2f
    20ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ec:	98 a9       	ldd	r25, Y+48	; 0x30
    20ee:	9c a7       	std	Y+44, r25	; 0x2c
    20f0:	8b a7       	std	Y+43, r24	; 0x2b
    20f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    20f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <LCD_voidInit+0x100>
    20fa:	9c a7       	std	Y+44, r25	; 0x2c
    20fc:	8b a7       	std	Y+43, r24	; 0x2b
	/*  wait for 35 ms after vDD raises to 4.5 v   */
	_delay_ms(1);

	/* function set  0 x38 */
	LCD_sendcmd(0b00111000);
    20fe:	88 e3       	ldi	r24, 0x38	; 56
    2100:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_sendcmd>
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	a0 e8       	ldi	r26, 0x80	; 128
    210a:	bf e3       	ldi	r27, 0x3F	; 63
    210c:	8f a3       	std	Y+39, r24	; 0x27
    210e:	98 a7       	std	Y+40, r25	; 0x28
    2110:	a9 a7       	std	Y+41, r26	; 0x29
    2112:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2114:	6f a1       	ldd	r22, Y+39	; 0x27
    2116:	78 a5       	ldd	r23, Y+40	; 0x28
    2118:	89 a5       	ldd	r24, Y+41	; 0x29
    211a:	9a a5       	ldd	r25, Y+42	; 0x2a
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	4a ef       	ldi	r20, 0xFA	; 250
    2122:	54 e4       	ldi	r21, 0x44	; 68
    2124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	8b a3       	std	Y+35, r24	; 0x23
    212e:	9c a3       	std	Y+36, r25	; 0x24
    2130:	ad a3       	std	Y+37, r26	; 0x25
    2132:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2134:	6b a1       	ldd	r22, Y+35	; 0x23
    2136:	7c a1       	ldd	r23, Y+36	; 0x24
    2138:	8d a1       	ldd	r24, Y+37	; 0x25
    213a:	9e a1       	ldd	r25, Y+38	; 0x26
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e8       	ldi	r20, 0x80	; 128
    2142:	5f e3       	ldi	r21, 0x3F	; 63
    2144:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2148:	88 23       	and	r24, r24
    214a:	2c f4       	brge	.+10     	; 0x2156 <LCD_voidInit+0x160>
		__ticks = 1;
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	9a a3       	std	Y+34, r25	; 0x22
    2152:	89 a3       	std	Y+33, r24	; 0x21
    2154:	3f c0       	rjmp	.+126    	; 0x21d4 <LCD_voidInit+0x1de>
	else if (__tmp > 65535)
    2156:	6b a1       	ldd	r22, Y+35	; 0x23
    2158:	7c a1       	ldd	r23, Y+36	; 0x24
    215a:	8d a1       	ldd	r24, Y+37	; 0x25
    215c:	9e a1       	ldd	r25, Y+38	; 0x26
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	3f ef       	ldi	r19, 0xFF	; 255
    2162:	4f e7       	ldi	r20, 0x7F	; 127
    2164:	57 e4       	ldi	r21, 0x47	; 71
    2166:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    216a:	18 16       	cp	r1, r24
    216c:	4c f5       	brge	.+82     	; 0x21c0 <LCD_voidInit+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216e:	6f a1       	ldd	r22, Y+39	; 0x27
    2170:	78 a5       	ldd	r23, Y+40	; 0x28
    2172:	89 a5       	ldd	r24, Y+41	; 0x29
    2174:	9a a5       	ldd	r25, Y+42	; 0x2a
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	40 e2       	ldi	r20, 0x20	; 32
    217c:	51 e4       	ldi	r21, 0x41	; 65
    217e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	bc 01       	movw	r22, r24
    2188:	cd 01       	movw	r24, r26
    218a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	9a a3       	std	Y+34, r25	; 0x22
    2194:	89 a3       	std	Y+33, r24	; 0x21
    2196:	0f c0       	rjmp	.+30     	; 0x21b6 <LCD_voidInit+0x1c0>
    2198:	88 ec       	ldi	r24, 0xC8	; 200
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	98 a3       	std	Y+32, r25	; 0x20
    219e:	8f 8f       	std	Y+31, r24	; 0x1f
    21a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21a2:	98 a1       	ldd	r25, Y+32	; 0x20
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	f1 f7       	brne	.-4      	; 0x21a4 <LCD_voidInit+0x1ae>
    21a8:	98 a3       	std	Y+32, r25	; 0x20
    21aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ac:	89 a1       	ldd	r24, Y+33	; 0x21
    21ae:	9a a1       	ldd	r25, Y+34	; 0x22
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	9a a3       	std	Y+34, r25	; 0x22
    21b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b6:	89 a1       	ldd	r24, Y+33	; 0x21
    21b8:	9a a1       	ldd	r25, Y+34	; 0x22
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	69 f7       	brne	.-38     	; 0x2198 <LCD_voidInit+0x1a2>
    21be:	14 c0       	rjmp	.+40     	; 0x21e8 <LCD_voidInit+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c0:	6b a1       	ldd	r22, Y+35	; 0x23
    21c2:	7c a1       	ldd	r23, Y+36	; 0x24
    21c4:	8d a1       	ldd	r24, Y+37	; 0x25
    21c6:	9e a1       	ldd	r25, Y+38	; 0x26
    21c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	9a a3       	std	Y+34, r25	; 0x22
    21d2:	89 a3       	std	Y+33, r24	; 0x21
    21d4:	89 a1       	ldd	r24, Y+33	; 0x21
    21d6:	9a a1       	ldd	r25, Y+34	; 0x22
    21d8:	9e 8f       	std	Y+30, r25	; 0x1e
    21da:	8d 8f       	std	Y+29, r24	; 0x1d
    21dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <LCD_voidInit+0x1ea>
    21e4:	9e 8f       	std	Y+30, r25	; 0x1e
    21e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* display on/off control */

	LCD_sendcmd(0b00001111);
    21e8:	8f e0       	ldi	r24, 0x0F	; 15
    21ea:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_sendcmd>
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	a0 e8       	ldi	r26, 0x80	; 128
    21f4:	bf e3       	ldi	r27, 0x3F	; 63
    21f6:	89 8f       	std	Y+25, r24	; 0x19
    21f8:	9a 8f       	std	Y+26, r25	; 0x1a
    21fa:	ab 8f       	std	Y+27, r26	; 0x1b
    21fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2200:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2202:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2204:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	4a ef       	ldi	r20, 0xFA	; 250
    220c:	54 e4       	ldi	r21, 0x44	; 68
    220e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	8d 8b       	std	Y+21, r24	; 0x15
    2218:	9e 8b       	std	Y+22, r25	; 0x16
    221a:	af 8b       	std	Y+23, r26	; 0x17
    221c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    221e:	6d 89       	ldd	r22, Y+21	; 0x15
    2220:	7e 89       	ldd	r23, Y+22	; 0x16
    2222:	8f 89       	ldd	r24, Y+23	; 0x17
    2224:	98 8d       	ldd	r25, Y+24	; 0x18
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e8       	ldi	r20, 0x80	; 128
    222c:	5f e3       	ldi	r21, 0x3F	; 63
    222e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2232:	88 23       	and	r24, r24
    2234:	2c f4       	brge	.+10     	; 0x2240 <LCD_voidInit+0x24a>
		__ticks = 1;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9c 8b       	std	Y+20, r25	; 0x14
    223c:	8b 8b       	std	Y+19, r24	; 0x13
    223e:	3f c0       	rjmp	.+126    	; 0x22be <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    2240:	6d 89       	ldd	r22, Y+21	; 0x15
    2242:	7e 89       	ldd	r23, Y+22	; 0x16
    2244:	8f 89       	ldd	r24, Y+23	; 0x17
    2246:	98 8d       	ldd	r25, Y+24	; 0x18
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	3f ef       	ldi	r19, 0xFF	; 255
    224c:	4f e7       	ldi	r20, 0x7F	; 127
    224e:	57 e4       	ldi	r21, 0x47	; 71
    2250:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2254:	18 16       	cp	r1, r24
    2256:	4c f5       	brge	.+82     	; 0x22aa <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2258:	69 8d       	ldd	r22, Y+25	; 0x19
    225a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    225c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    225e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e2       	ldi	r20, 0x20	; 32
    2266:	51 e4       	ldi	r21, 0x41	; 65
    2268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	bc 01       	movw	r22, r24
    2272:	cd 01       	movw	r24, r26
    2274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	9c 8b       	std	Y+20, r25	; 0x14
    227e:	8b 8b       	std	Y+19, r24	; 0x13
    2280:	0f c0       	rjmp	.+30     	; 0x22a0 <LCD_voidInit+0x2aa>
    2282:	88 ec       	ldi	r24, 0xC8	; 200
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9a 8b       	std	Y+18, r25	; 0x12
    2288:	89 8b       	std	Y+17, r24	; 0x11
    228a:	89 89       	ldd	r24, Y+17	; 0x11
    228c:	9a 89       	ldd	r25, Y+18	; 0x12
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <LCD_voidInit+0x298>
    2292:	9a 8b       	std	Y+18, r25	; 0x12
    2294:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2296:	8b 89       	ldd	r24, Y+19	; 0x13
    2298:	9c 89       	ldd	r25, Y+20	; 0x14
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	9c 8b       	std	Y+20, r25	; 0x14
    229e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a0:	8b 89       	ldd	r24, Y+19	; 0x13
    22a2:	9c 89       	ldd	r25, Y+20	; 0x14
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	69 f7       	brne	.-38     	; 0x2282 <LCD_voidInit+0x28c>
    22a8:	14 c0       	rjmp	.+40     	; 0x22d2 <LCD_voidInit+0x2dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22aa:	6d 89       	ldd	r22, Y+21	; 0x15
    22ac:	7e 89       	ldd	r23, Y+22	; 0x16
    22ae:	8f 89       	ldd	r24, Y+23	; 0x17
    22b0:	98 8d       	ldd	r25, Y+24	; 0x18
    22b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	9c 8b       	std	Y+20, r25	; 0x14
    22bc:	8b 8b       	std	Y+19, r24	; 0x13
    22be:	8b 89       	ldd	r24, Y+19	; 0x13
    22c0:	9c 89       	ldd	r25, Y+20	; 0x14
    22c2:	98 8b       	std	Y+16, r25	; 0x10
    22c4:	8f 87       	std	Y+15, r24	; 0x0f
    22c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c8:	98 89       	ldd	r25, Y+16	; 0x10
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <LCD_voidInit+0x2d4>
    22ce:	98 8b       	std	Y+16, r25	; 0x10
    22d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* display clear  */
	LCD_sendcmd(0b00000001);
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_sendcmd>
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	a0 e0       	ldi	r26, 0x00	; 0
    22de:	b0 e4       	ldi	r27, 0x40	; 64
    22e0:	8b 87       	std	Y+11, r24	; 0x0b
    22e2:	9c 87       	std	Y+12, r25	; 0x0c
    22e4:	ad 87       	std	Y+13, r26	; 0x0d
    22e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	4a ef       	ldi	r20, 0xFA	; 250
    22f6:	54 e4       	ldi	r21, 0x44	; 68
    22f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	8f 83       	std	Y+7, r24	; 0x07
    2302:	98 87       	std	Y+8, r25	; 0x08
    2304:	a9 87       	std	Y+9, r26	; 0x09
    2306:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2308:	6f 81       	ldd	r22, Y+7	; 0x07
    230a:	78 85       	ldd	r23, Y+8	; 0x08
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e8       	ldi	r20, 0x80	; 128
    2316:	5f e3       	ldi	r21, 0x3F	; 63
    2318:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    231c:	88 23       	and	r24, r24
    231e:	2c f4       	brge	.+10     	; 0x232a <LCD_voidInit+0x334>
		__ticks = 1;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9e 83       	std	Y+6, r25	; 0x06
    2326:	8d 83       	std	Y+5, r24	; 0x05
    2328:	3f c0       	rjmp	.+126    	; 0x23a8 <LCD_voidInit+0x3b2>
	else if (__tmp > 65535)
    232a:	6f 81       	ldd	r22, Y+7	; 0x07
    232c:	78 85       	ldd	r23, Y+8	; 0x08
    232e:	89 85       	ldd	r24, Y+9	; 0x09
    2330:	9a 85       	ldd	r25, Y+10	; 0x0a
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	3f ef       	ldi	r19, 0xFF	; 255
    2336:	4f e7       	ldi	r20, 0x7F	; 127
    2338:	57 e4       	ldi	r21, 0x47	; 71
    233a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    233e:	18 16       	cp	r1, r24
    2340:	4c f5       	brge	.+82     	; 0x2394 <LCD_voidInit+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2342:	6b 85       	ldd	r22, Y+11	; 0x0b
    2344:	7c 85       	ldd	r23, Y+12	; 0x0c
    2346:	8d 85       	ldd	r24, Y+13	; 0x0d
    2348:	9e 85       	ldd	r25, Y+14	; 0x0e
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e2       	ldi	r20, 0x20	; 32
    2350:	51 e4       	ldi	r21, 0x41	; 65
    2352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	9e 83       	std	Y+6, r25	; 0x06
    2368:	8d 83       	std	Y+5, r24	; 0x05
    236a:	0f c0       	rjmp	.+30     	; 0x238a <LCD_voidInit+0x394>
    236c:	88 ec       	ldi	r24, 0xC8	; 200
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <LCD_voidInit+0x382>
    237c:	9c 83       	std	Y+4, r25	; 0x04
    237e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	9e 81       	ldd	r25, Y+6	; 0x06
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	9e 83       	std	Y+6, r25	; 0x06
    2388:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238a:	8d 81       	ldd	r24, Y+5	; 0x05
    238c:	9e 81       	ldd	r25, Y+6	; 0x06
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	69 f7       	brne	.-38     	; 0x236c <LCD_voidInit+0x376>
    2392:	14 c0       	rjmp	.+40     	; 0x23bc <LCD_voidInit+0x3c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2394:	6f 81       	ldd	r22, Y+7	; 0x07
    2396:	78 85       	ldd	r23, Y+8	; 0x08
    2398:	89 85       	ldd	r24, Y+9	; 0x09
    239a:	9a 85       	ldd	r25, Y+10	; 0x0a
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <LCD_voidInit+0x3be>
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	/* ENTERY mode*/
	LCD_sendcmd(0b00000110);// increas
    23bc:	86 e0       	ldi	r24, 0x06	; 6
    23be:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_sendcmd>

}
    23c2:	e8 96       	adiw	r28, 0x38	; 56
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <LCD_sendcmd>:

void LCD_sendcmd(u8 u8cmd_copy)
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	2f 97       	sbiw	r28, 0x0f	; 15
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	8f 87       	std	Y+15, r24	; 0x0f
	/* RS PIN=LOW which mean send command   */
	DIO_VoidsetPinValue(PORT_CONTROL,RS_PIN,LOW);
    23ea:	83 e0       	ldi	r24, 0x03	; 3
    23ec:	65 e0       	ldi	r22, 0x05	; 5
    23ee:	40 e0       	ldi	r20, 0x00	; 0
    23f0:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_VoidsetPinValue>
	/* Rw PIN=LOW which mean write  command   */
	DIO_VoidsetPinValue(PORT_CONTROL,RW_PIN,LOW);
    23f4:	83 e0       	ldi	r24, 0x03	; 3
    23f6:	66 e0       	ldi	r22, 0x06	; 6
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_VoidsetPinValue>

	/* send CMD on the Bus */
	DIO_VoidsetPortValue(PORT_DATA,u8cmd_copy);
    23fe:	82 e0       	ldi	r24, 0x02	; 2
    2400:	6f 85       	ldd	r22, Y+15	; 0x0f
    2402:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <DIO_VoidsetPortValue>

	/* EN PIN=LOW which mean ENABLE  command   */
	DIO_VoidsetPinValue(PORT_CONTROL,EN_PIN,HIGH);
    2406:	83 e0       	ldi	r24, 0x03	; 3
    2408:	67 e0       	ldi	r22, 0x07	; 7
    240a:	41 e0       	ldi	r20, 0x01	; 1
    240c:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_VoidsetPinValue>
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	a0 e8       	ldi	r26, 0x80	; 128
    2416:	bf e3       	ldi	r27, 0x3F	; 63
    2418:	8b 87       	std	Y+11, r24	; 0x0b
    241a:	9c 87       	std	Y+12, r25	; 0x0c
    241c:	ad 87       	std	Y+13, r26	; 0x0d
    241e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2420:	6b 85       	ldd	r22, Y+11	; 0x0b
    2422:	7c 85       	ldd	r23, Y+12	; 0x0c
    2424:	8d 85       	ldd	r24, Y+13	; 0x0d
    2426:	9e 85       	ldd	r25, Y+14	; 0x0e
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	4a ef       	ldi	r20, 0xFA	; 250
    242e:	54 e4       	ldi	r21, 0x44	; 68
    2430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	8f 83       	std	Y+7, r24	; 0x07
    243a:	98 87       	std	Y+8, r25	; 0x08
    243c:	a9 87       	std	Y+9, r26	; 0x09
    243e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2440:	6f 81       	ldd	r22, Y+7	; 0x07
    2442:	78 85       	ldd	r23, Y+8	; 0x08
    2444:	89 85       	ldd	r24, Y+9	; 0x09
    2446:	9a 85       	ldd	r25, Y+10	; 0x0a
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e8       	ldi	r20, 0x80	; 128
    244e:	5f e3       	ldi	r21, 0x3F	; 63
    2450:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2454:	88 23       	and	r24, r24
    2456:	2c f4       	brge	.+10     	; 0x2462 <LCD_sendcmd+0x8e>
		__ticks = 1;
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	9e 83       	std	Y+6, r25	; 0x06
    245e:	8d 83       	std	Y+5, r24	; 0x05
    2460:	3f c0       	rjmp	.+126    	; 0x24e0 <LCD_sendcmd+0x10c>
	else if (__tmp > 65535)
    2462:	6f 81       	ldd	r22, Y+7	; 0x07
    2464:	78 85       	ldd	r23, Y+8	; 0x08
    2466:	89 85       	ldd	r24, Y+9	; 0x09
    2468:	9a 85       	ldd	r25, Y+10	; 0x0a
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	3f ef       	ldi	r19, 0xFF	; 255
    246e:	4f e7       	ldi	r20, 0x7F	; 127
    2470:	57 e4       	ldi	r21, 0x47	; 71
    2472:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2476:	18 16       	cp	r1, r24
    2478:	4c f5       	brge	.+82     	; 0x24cc <LCD_sendcmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247a:	6b 85       	ldd	r22, Y+11	; 0x0b
    247c:	7c 85       	ldd	r23, Y+12	; 0x0c
    247e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2480:	9e 85       	ldd	r25, Y+14	; 0x0e
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e2       	ldi	r20, 0x20	; 32
    2488:	51 e4       	ldi	r21, 0x41	; 65
    248a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	bc 01       	movw	r22, r24
    2494:	cd 01       	movw	r24, r26
    2496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	9e 83       	std	Y+6, r25	; 0x06
    24a0:	8d 83       	std	Y+5, r24	; 0x05
    24a2:	0f c0       	rjmp	.+30     	; 0x24c2 <LCD_sendcmd+0xee>
    24a4:	88 ec       	ldi	r24, 0xC8	; 200
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	9c 83       	std	Y+4, r25	; 0x04
    24aa:	8b 83       	std	Y+3, r24	; 0x03
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	9c 81       	ldd	r25, Y+4	; 0x04
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	f1 f7       	brne	.-4      	; 0x24b0 <LCD_sendcmd+0xdc>
    24b4:	9c 83       	std	Y+4, r25	; 0x04
    24b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ba:	9e 81       	ldd	r25, Y+6	; 0x06
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	9e 83       	std	Y+6, r25	; 0x06
    24c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c2:	8d 81       	ldd	r24, Y+5	; 0x05
    24c4:	9e 81       	ldd	r25, Y+6	; 0x06
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	69 f7       	brne	.-38     	; 0x24a4 <LCD_sendcmd+0xd0>
    24ca:	14 c0       	rjmp	.+40     	; 0x24f4 <LCD_sendcmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24cc:	6f 81       	ldd	r22, Y+7	; 0x07
    24ce:	78 85       	ldd	r23, Y+8	; 0x08
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	8d 83       	std	Y+5, r24	; 0x05
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	9e 81       	ldd	r25, Y+6	; 0x06
    24e4:	9a 83       	std	Y+2, r25	; 0x02
    24e6:	89 83       	std	Y+1, r24	; 0x01
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	9a 81       	ldd	r25, Y+2	; 0x02
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	f1 f7       	brne	.-4      	; 0x24ec <LCD_sendcmd+0x118>
    24f0:	9a 83       	std	Y+2, r25	; 0x02
    24f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_VoidsetPinValue(PORT_CONTROL,EN_PIN,LOW);
    24f4:	83 e0       	ldi	r24, 0x03	; 3
    24f6:	67 e0       	ldi	r22, 0x07	; 7
    24f8:	40 e0       	ldi	r20, 0x00	; 0
    24fa:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_VoidsetPinValue>


}
    24fe:	2f 96       	adiw	r28, 0x0f	; 15
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	de bf       	out	0x3e, r29	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cd bf       	out	0x3d, r28	; 61
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	08 95       	ret

00002510 <LCD_WRITEdata>:

void LCD_WRITEdata(u8 u8Data_copy){
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	2f 97       	sbiw	r28, 0x0f	; 15
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	cd bf       	out	0x3d, r28	; 61
    2524:	8f 87       	std	Y+15, r24	; 0x0f

	/* RS PIN=LOW which mean send   DATA */
	DIO_VoidsetPinValue(PORT_CONTROL,RS_PIN,HIGH);
    2526:	83 e0       	ldi	r24, 0x03	; 3
    2528:	65 e0       	ldi	r22, 0x05	; 5
    252a:	41 e0       	ldi	r20, 0x01	; 1
    252c:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_VoidsetPinValue>
	/* Rw PIN=LOW which mean write  command   */
	DIO_VoidsetPinValue(PORT_CONTROL,RW_PIN,LOW);
    2530:	83 e0       	ldi	r24, 0x03	; 3
    2532:	66 e0       	ldi	r22, 0x06	; 6
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_VoidsetPinValue>

	/* send DATA on the Bus */
	DIO_VoidsetPortValue(PORT_DATA,u8Data_copy);
    253a:	82 e0       	ldi	r24, 0x02	; 2
    253c:	6f 85       	ldd	r22, Y+15	; 0x0f
    253e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <DIO_VoidsetPortValue>

	/* EN PIN=LOW which mean ENABLE  DATA   */
	DIO_VoidsetPinValue(PORT_CONTROL,EN_PIN,HIGH);
    2542:	83 e0       	ldi	r24, 0x03	; 3
    2544:	67 e0       	ldi	r22, 0x07	; 7
    2546:	41 e0       	ldi	r20, 0x01	; 1
    2548:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_VoidsetPinValue>
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	a0 e8       	ldi	r26, 0x80	; 128
    2552:	bf e3       	ldi	r27, 0x3F	; 63
    2554:	8b 87       	std	Y+11, r24	; 0x0b
    2556:	9c 87       	std	Y+12, r25	; 0x0c
    2558:	ad 87       	std	Y+13, r26	; 0x0d
    255a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255c:	6b 85       	ldd	r22, Y+11	; 0x0b
    255e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2560:	8d 85       	ldd	r24, Y+13	; 0x0d
    2562:	9e 85       	ldd	r25, Y+14	; 0x0e
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	4a ef       	ldi	r20, 0xFA	; 250
    256a:	54 e4       	ldi	r21, 0x44	; 68
    256c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	8f 83       	std	Y+7, r24	; 0x07
    2576:	98 87       	std	Y+8, r25	; 0x08
    2578:	a9 87       	std	Y+9, r26	; 0x09
    257a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    257c:	6f 81       	ldd	r22, Y+7	; 0x07
    257e:	78 85       	ldd	r23, Y+8	; 0x08
    2580:	89 85       	ldd	r24, Y+9	; 0x09
    2582:	9a 85       	ldd	r25, Y+10	; 0x0a
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e8       	ldi	r20, 0x80	; 128
    258a:	5f e3       	ldi	r21, 0x3F	; 63
    258c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2590:	88 23       	and	r24, r24
    2592:	2c f4       	brge	.+10     	; 0x259e <LCD_WRITEdata+0x8e>
		__ticks = 1;
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	9e 83       	std	Y+6, r25	; 0x06
    259a:	8d 83       	std	Y+5, r24	; 0x05
    259c:	3f c0       	rjmp	.+126    	; 0x261c <LCD_WRITEdata+0x10c>
	else if (__tmp > 65535)
    259e:	6f 81       	ldd	r22, Y+7	; 0x07
    25a0:	78 85       	ldd	r23, Y+8	; 0x08
    25a2:	89 85       	ldd	r24, Y+9	; 0x09
    25a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	3f ef       	ldi	r19, 0xFF	; 255
    25aa:	4f e7       	ldi	r20, 0x7F	; 127
    25ac:	57 e4       	ldi	r21, 0x47	; 71
    25ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b2:	18 16       	cp	r1, r24
    25b4:	4c f5       	brge	.+82     	; 0x2608 <LCD_WRITEdata+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    25bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e2       	ldi	r20, 0x20	; 32
    25c4:	51 e4       	ldi	r21, 0x41	; 65
    25c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	bc 01       	movw	r22, r24
    25d0:	cd 01       	movw	r24, r26
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	9e 83       	std	Y+6, r25	; 0x06
    25dc:	8d 83       	std	Y+5, r24	; 0x05
    25de:	0f c0       	rjmp	.+30     	; 0x25fe <LCD_WRITEdata+0xee>
    25e0:	88 ec       	ldi	r24, 0xC8	; 200
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	9c 83       	std	Y+4, r25	; 0x04
    25e6:	8b 83       	std	Y+3, r24	; 0x03
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	9c 81       	ldd	r25, Y+4	; 0x04
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <LCD_WRITEdata+0xdc>
    25f0:	9c 83       	std	Y+4, r25	; 0x04
    25f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f4:	8d 81       	ldd	r24, Y+5	; 0x05
    25f6:	9e 81       	ldd	r25, Y+6	; 0x06
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	9e 83       	std	Y+6, r25	; 0x06
    25fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2600:	9e 81       	ldd	r25, Y+6	; 0x06
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	69 f7       	brne	.-38     	; 0x25e0 <LCD_WRITEdata+0xd0>
    2606:	14 c0       	rjmp	.+40     	; 0x2630 <LCD_WRITEdata+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2608:	6f 81       	ldd	r22, Y+7	; 0x07
    260a:	78 85       	ldd	r23, Y+8	; 0x08
    260c:	89 85       	ldd	r24, Y+9	; 0x09
    260e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	9e 83       	std	Y+6, r25	; 0x06
    261a:	8d 83       	std	Y+5, r24	; 0x05
    261c:	8d 81       	ldd	r24, Y+5	; 0x05
    261e:	9e 81       	ldd	r25, Y+6	; 0x06
    2620:	9a 83       	std	Y+2, r25	; 0x02
    2622:	89 83       	std	Y+1, r24	; 0x01
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	9a 81       	ldd	r25, Y+2	; 0x02
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <LCD_WRITEdata+0x118>
    262c:	9a 83       	std	Y+2, r25	; 0x02
    262e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_VoidsetPinValue(PORT_CONTROL,EN_PIN,LOW);
    2630:	83 e0       	ldi	r24, 0x03	; 3
    2632:	67 e0       	ldi	r22, 0x07	; 7
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_VoidsetPinValue>
}
    263a:	2f 96       	adiw	r28, 0x0f	; 15
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	f8 94       	cli
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	cd bf       	out	0x3d, r28	; 61
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <LCD_WRITEstring>:

void LCD_WRITEstring(u8 *ptr){
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	00 d0       	rcall	.+0      	; 0x2652 <LCD_WRITEstring+0x6>
    2652:	0f 92       	push	r0
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	9b 83       	std	Y+3, r25	; 0x03
    265a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    265c:	19 82       	std	Y+1, r1	; 0x01
    265e:	0e c0       	rjmp	.+28     	; 0x267c <LCD_WRITEstring+0x30>

	while(ptr[i]!='\0'){

		LCD_WRITEdata(ptr[i]);
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	28 2f       	mov	r18, r24
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
    2668:	9b 81       	ldd	r25, Y+3	; 0x03
    266a:	fc 01       	movw	r30, r24
    266c:	e2 0f       	add	r30, r18
    266e:	f3 1f       	adc	r31, r19
    2670:	80 81       	ld	r24, Z
    2672:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_WRITEdata>
		i++;
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	8f 5f       	subi	r24, 0xFF	; 255
    267a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_WRITEstring(u8 *ptr){
	u8 i=0;

	while(ptr[i]!='\0'){
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	28 2f       	mov	r18, r24
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	9b 81       	ldd	r25, Y+3	; 0x03
    2686:	fc 01       	movw	r30, r24
    2688:	e2 0f       	add	r30, r18
    268a:	f3 1f       	adc	r31, r19
    268c:	80 81       	ld	r24, Z
    268e:	88 23       	and	r24, r24
    2690:	39 f7       	brne	.-50     	; 0x2660 <LCD_WRITEstring+0x14>
		i++;


	}

}
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <LCD_goto>:





void LCD_goto(u8 row,u8 colom){
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <LCD_goto+0x6>
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	6a 83       	std	Y+2, r22	; 0x02
	if(row<=2&&colom<=16){
    26ac:	89 81       	ldd	r24, Y+1	; 0x01
    26ae:	83 30       	cpi	r24, 0x03	; 3
    26b0:	98 f4       	brcc	.+38     	; 0x26d8 <LCD_goto+0x3a>
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	81 31       	cpi	r24, 0x11	; 17
    26b6:	80 f4       	brcc	.+32     	; 0x26d8 <LCD_goto+0x3a>

		if(row==1){
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	81 30       	cpi	r24, 0x01	; 1
    26bc:	29 f4       	brne	.+10     	; 0x26c8 <LCD_goto+0x2a>
			LCD_sendcmd((0x80+colom));
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	80 58       	subi	r24, 0x80	; 128
    26c2:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_sendcmd>
    26c6:	0c c0       	rjmp	.+24     	; 0x26e0 <LCD_goto+0x42>
		}
		else if(row==2){
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	82 30       	cpi	r24, 0x02	; 2
    26cc:	49 f4       	brne	.+18     	; 0x26e0 <LCD_goto+0x42>
			LCD_sendcmd((0xC0+colom));
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	80 54       	subi	r24, 0x40	; 64
    26d2:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_sendcmd>
    26d6:	04 c0       	rjmp	.+8      	; 0x26e0 <LCD_goto+0x42>
		}
	}

	else{
		LCD_WRITEstring((u8 *)"error");
    26d8:	84 e6       	ldi	r24, 0x64	; 100
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_WRITEstring>
	}
}
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <LCD_Void_control_LCD>:



/*                  5 buttons LCD control (shift right button on portc pin0, right shift on C1,UP ON C2,DOWN ON C3                */

void LCD_Void_control_LCD(u8 copy_u8_control_button_value){
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <LCD_Void_control_LCD+0x6>
    26f0:	0f 92       	push	r0
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	89 83       	std	Y+1, r24	; 0x01

	static u8 COPY_DDRAM_INIT_AC=0x80;
	switch(copy_u8_control_button_value){
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	28 2f       	mov	r18, r24
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	3b 83       	std	Y+3, r19	; 0x03
    2700:	2a 83       	std	Y+2, r18	; 0x02
    2702:	8a 81       	ldd	r24, Y+2	; 0x02
    2704:	9b 81       	ldd	r25, Y+3	; 0x03
    2706:	82 30       	cpi	r24, 0x02	; 2
    2708:	91 05       	cpc	r25, r1
    270a:	49 f1       	breq	.+82     	; 0x275e <LCD_Void_control_LCD+0x74>
    270c:	2a 81       	ldd	r18, Y+2	; 0x02
    270e:	3b 81       	ldd	r19, Y+3	; 0x03
    2710:	23 30       	cpi	r18, 0x03	; 3
    2712:	31 05       	cpc	r19, r1
    2714:	34 f4       	brge	.+12     	; 0x2722 <LCD_Void_control_LCD+0x38>
    2716:	8a 81       	ldd	r24, Y+2	; 0x02
    2718:	9b 81       	ldd	r25, Y+3	; 0x03
    271a:	81 30       	cpi	r24, 0x01	; 1
    271c:	91 05       	cpc	r25, r1
    271e:	69 f0       	breq	.+26     	; 0x273a <LCD_Void_control_LCD+0x50>
    2720:	81 c0       	rjmp	.+258    	; 0x2824 <LCD_Void_control_LCD+0x13a>
    2722:	2a 81       	ldd	r18, Y+2	; 0x02
    2724:	3b 81       	ldd	r19, Y+3	; 0x03
    2726:	24 30       	cpi	r18, 0x04	; 4
    2728:	31 05       	cpc	r19, r1
    272a:	59 f1       	breq	.+86     	; 0x2782 <LCD_Void_control_LCD+0x98>
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	9b 81       	ldd	r25, Y+3	; 0x03
    2730:	88 30       	cpi	r24, 0x08	; 8
    2732:	91 05       	cpc	r25, r1
    2734:	09 f4       	brne	.+2      	; 0x2738 <LCD_Void_control_LCD+0x4e>
    2736:	4e c0       	rjmp	.+156    	; 0x27d4 <LCD_Void_control_LCD+0xea>
    2738:	75 c0       	rjmp	.+234    	; 0x2824 <LCD_Void_control_LCD+0x13a>

	case LCD_SHIFT_RIGHT:

		LCD_sendcmd(0x01); //clear DDRAM? and (display)
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_sendcmd>
		LCD_sendcmd(COPY_DDRAM_INIT_AC+1);
    2740:	80 91 d1 02 	lds	r24, 0x02D1
    2744:	8f 5f       	subi	r24, 0xFF	; 255
    2746:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_sendcmd>

		COPY_DDRAM_INIT_AC++;
    274a:	80 91 d1 02 	lds	r24, 0x02D1
    274e:	8f 5f       	subi	r24, 0xFF	; 255
    2750:	80 93 d1 02 	sts	0x02D1, r24
		LCD_WRITEstring((u8 * )LCD_WORD);
    2754:	8a e6       	ldi	r24, 0x6A	; 106
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_WRITEstring>
    275c:	63 c0       	rjmp	.+198    	; 0x2824 <LCD_Void_control_LCD+0x13a>
		//LCD_sendcmd(0X1C);
		break;

	case LCD_SHIFT_LEFT:

		LCD_sendcmd(0x01); //clear DDRAM? and (display)
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_sendcmd>
		LCD_sendcmd(COPY_DDRAM_INIT_AC-1);
    2764:	80 91 d1 02 	lds	r24, 0x02D1
    2768:	81 50       	subi	r24, 0x01	; 1
    276a:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_sendcmd>
		//LCD_sendcmd(0X18);
		COPY_DDRAM_INIT_AC--;
    276e:	80 91 d1 02 	lds	r24, 0x02D1
    2772:	81 50       	subi	r24, 0x01	; 1
    2774:	80 93 d1 02 	sts	0x02D1, r24
		LCD_WRITEstring((u8 * )LCD_WORD);
    2778:	8a e6       	ldi	r24, 0x6A	; 106
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_WRITEstring>
    2780:	51 c0       	rjmp	.+162    	; 0x2824 <LCD_Void_control_LCD+0x13a>
		break;

	case LCD_GOTO_UP:
		LCD_sendcmd(0x01); //clear DDRAM? and (display)
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_sendcmd>
		if(COPY_DDRAM_INIT_AC>0XC0){ //Check if word in line two
    2788:	80 91 d1 02 	lds	r24, 0x02D1
    278c:	81 3c       	cpi	r24, 0xC1	; 193
    278e:	90 f0       	brcs	.+36     	; 0x27b4 <LCD_Void_control_LCD+0xca>
			LCD_goto(1,COPY_DDRAM_INIT_AC-0xC0);
    2790:	80 91 d1 02 	lds	r24, 0x02D1
    2794:	98 2f       	mov	r25, r24
    2796:	90 5c       	subi	r25, 0xC0	; 192
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	69 2f       	mov	r22, r25
    279c:	0e 94 4f 13 	call	0x269e	; 0x269e <LCD_goto>
			LCD_WRITEstring((u8 * )LCD_WORD);
    27a0:	8a e6       	ldi	r24, 0x6A	; 106
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_WRITEstring>
			COPY_DDRAM_INIT_AC=0x80+(COPY_DDRAM_INIT_AC-0xC0);
    27a8:	80 91 d1 02 	lds	r24, 0x02D1
    27ac:	80 54       	subi	r24, 0x40	; 64
    27ae:	80 93 d1 02 	sts	0x02D1, r24
    27b2:	38 c0       	rjmp	.+112    	; 0x2824 <LCD_Void_control_LCD+0x13a>
		}
		else{
			LCD_sendcmd(0X01);
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_sendcmd>
			LCD_goto(1,COPY_DDRAM_INIT_AC-0x80);
    27ba:	80 91 d1 02 	lds	r24, 0x02D1
    27be:	98 2f       	mov	r25, r24
    27c0:	90 58       	subi	r25, 0x80	; 128
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	69 2f       	mov	r22, r25
    27c6:	0e 94 4f 13 	call	0x269e	; 0x269e <LCD_goto>
			LCD_WRITEstring((u8 * )LCD_WORD);
    27ca:	8a e6       	ldi	r24, 0x6A	; 106
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_WRITEstring>
    27d2:	28 c0       	rjmp	.+80     	; 0x2824 <LCD_Void_control_LCD+0x13a>
		}
		break;

	case LCD_GOTO_DOWN:
		LCD_sendcmd(0x01); //clear DDRAM? and (display)
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_sendcmd>
		if(COPY_DDRAM_INIT_AC<(0X80+16)){ //Check if word in line two
    27da:	80 91 d1 02 	lds	r24, 0x02D1
    27de:	80 39       	cpi	r24, 0x90	; 144
    27e0:	90 f4       	brcc	.+36     	; 0x2806 <LCD_Void_control_LCD+0x11c>
			LCD_goto(2,COPY_DDRAM_INIT_AC-0x80);
    27e2:	80 91 d1 02 	lds	r24, 0x02D1
    27e6:	98 2f       	mov	r25, r24
    27e8:	90 58       	subi	r25, 0x80	; 128
    27ea:	82 e0       	ldi	r24, 0x02	; 2
    27ec:	69 2f       	mov	r22, r25
    27ee:	0e 94 4f 13 	call	0x269e	; 0x269e <LCD_goto>
			LCD_WRITEstring((u8 * )LCD_WORD);
    27f2:	8a e6       	ldi	r24, 0x6A	; 106
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_WRITEstring>
			COPY_DDRAM_INIT_AC=0xC0+(COPY_DDRAM_INIT_AC-0x80);
    27fa:	80 91 d1 02 	lds	r24, 0x02D1
    27fe:	80 5c       	subi	r24, 0xC0	; 192
    2800:	80 93 d1 02 	sts	0x02D1, r24
    2804:	0f c0       	rjmp	.+30     	; 0x2824 <LCD_Void_control_LCD+0x13a>
		}
		else{
			LCD_sendcmd(0X01);
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <LCD_sendcmd>
			LCD_goto(2,COPY_DDRAM_INIT_AC-0xC0);
    280c:	80 91 d1 02 	lds	r24, 0x02D1
    2810:	98 2f       	mov	r25, r24
    2812:	90 5c       	subi	r25, 0xC0	; 192
    2814:	82 e0       	ldi	r24, 0x02	; 2
    2816:	69 2f       	mov	r22, r25
    2818:	0e 94 4f 13 	call	0x269e	; 0x269e <LCD_goto>
			LCD_WRITEstring((u8 * )LCD_WORD);
    281c:	8a e6       	ldi	r24, 0x6A	; 106
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_WRITEstring>
	default:

		break;
	}

}
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <LCD_WRITE_NUM>:


///////////////////////////////////////////////////////////////////////////////////////////////////////

void LCD_WRITE_NUM(s32 loc_num){
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	00 d0       	rcall	.+0      	; 0x2836 <LCD_WRITE_NUM+0x6>
    2836:	00 d0       	rcall	.+0      	; 0x2838 <LCD_WRITE_NUM+0x8>
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	69 83       	std	Y+1, r22	; 0x01
    283e:	7a 83       	std	Y+2, r23	; 0x02
    2840:	8b 83       	std	Y+3, r24	; 0x03
    2842:	9c 83       	std	Y+4, r25	; 0x04

	loc_num=REVERSE_NUM(loc_num);
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	9a 81       	ldd	r25, Y+2	; 0x02
    2848:	ab 81       	ldd	r26, Y+3	; 0x03
    284a:	bc 81       	ldd	r27, Y+4	; 0x04
    284c:	bc 01       	movw	r22, r24
    284e:	cd 01       	movw	r24, r26
    2850:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <REVERSE_NUM>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	89 83       	std	Y+1, r24	; 0x01
    285a:	9a 83       	std	Y+2, r25	; 0x02
    285c:	ab 83       	std	Y+3, r26	; 0x03
    285e:	bc 83       	std	Y+4, r27	; 0x04
	if(loc_num!=0){
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	9a 81       	ldd	r25, Y+2	; 0x02
    2864:	ab 81       	ldd	r26, Y+3	; 0x03
    2866:	bc 81       	ldd	r27, Y+4	; 0x04
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	a1 05       	cpc	r26, r1
    286c:	b1 05       	cpc	r27, r1
    286e:	69 f1       	breq	.+90     	; 0x28ca <LCD_WRITE_NUM+0x9a>
    2870:	23 c0       	rjmp	.+70     	; 0x28b8 <LCD_WRITE_NUM+0x88>
		while(loc_num!=1){

			LCD_WRITEdata(48+(loc_num%10));
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	9a 81       	ldd	r25, Y+2	; 0x02
    2876:	ab 81       	ldd	r26, Y+3	; 0x03
    2878:	bc 81       	ldd	r27, Y+4	; 0x04
    287a:	2a e0       	ldi	r18, 0x0A	; 10
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	40 e0       	ldi	r20, 0x00	; 0
    2880:	50 e0       	ldi	r21, 0x00	; 0
    2882:	bc 01       	movw	r22, r24
    2884:	cd 01       	movw	r24, r26
    2886:	0e 94 47 1b 	call	0x368e	; 0x368e <__divmodsi4>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	80 5d       	subi	r24, 0xD0	; 208
    2890:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_WRITEdata>
			loc_num=loc_num/10;
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	ab 81       	ldd	r26, Y+3	; 0x03
    289a:	bc 81       	ldd	r27, Y+4	; 0x04
    289c:	2a e0       	ldi	r18, 0x0A	; 10
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	0e 94 47 1b 	call	0x368e	; 0x368e <__divmodsi4>
    28ac:	da 01       	movw	r26, r20
    28ae:	c9 01       	movw	r24, r18
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	9a 83       	std	Y+2, r25	; 0x02
    28b4:	ab 83       	std	Y+3, r26	; 0x03
    28b6:	bc 83       	std	Y+4, r27	; 0x04

void LCD_WRITE_NUM(s32 loc_num){

	loc_num=REVERSE_NUM(loc_num);
	if(loc_num!=0){
		while(loc_num!=1){
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	9a 81       	ldd	r25, Y+2	; 0x02
    28bc:	ab 81       	ldd	r26, Y+3	; 0x03
    28be:	bc 81       	ldd	r27, Y+4	; 0x04
    28c0:	81 30       	cpi	r24, 0x01	; 1
    28c2:	91 05       	cpc	r25, r1
    28c4:	a1 05       	cpc	r26, r1
    28c6:	b1 05       	cpc	r27, r1
    28c8:	a1 f6       	brne	.-88     	; 0x2872 <LCD_WRITE_NUM+0x42>

		}

	}

}
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	08 95       	ret

000028d8 <LCD_DIGIT>:


////////////////////////////////////////////////////////////////////////////////////////////////////////
void LCD_DIGIT(u8 num){
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	0f 92       	push	r0
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	89 83       	std	Y+1, r24	; 0x01

	LCD_WRITEdata(48+(num));
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	80 5d       	subi	r24, 0xD0	; 208
    28e8:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_WRITEdata>
}
    28ec:	0f 90       	pop	r0
    28ee:	cf 91       	pop	r28
    28f0:	df 91       	pop	r29
    28f2:	08 95       	ret

000028f4 <REVERSE_NUM>:


/////////////////////////////////////////////////////////////////////////////////////////////////

s32 REVERSE_NUM(s32 num){
    28f4:	ef 92       	push	r14
    28f6:	ff 92       	push	r15
    28f8:	0f 93       	push	r16
    28fa:	1f 93       	push	r17
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	2c 97       	sbiw	r28, 0x0c	; 12
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	f8 94       	cli
    290a:	de bf       	out	0x3e, r29	; 62
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	cd bf       	out	0x3d, r28	; 61
    2910:	6d 83       	std	Y+5, r22	; 0x05
    2912:	7e 83       	std	Y+6, r23	; 0x06
    2914:	8f 83       	std	Y+7, r24	; 0x07
    2916:	98 87       	std	Y+8, r25	; 0x08
	s32 sum=1;
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	a0 e0       	ldi	r26, 0x00	; 0
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	89 83       	std	Y+1, r24	; 0x01
    2922:	9a 83       	std	Y+2, r25	; 0x02
    2924:	ab 83       	std	Y+3, r26	; 0x03
    2926:	bc 83       	std	Y+4, r27	; 0x04
	if(num<0){
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	af 81       	ldd	r26, Y+7	; 0x07
    292e:	b8 85       	ldd	r27, Y+8	; 0x08
    2930:	bb 23       	and	r27, r27
    2932:	94 f4       	brge	.+36     	; 0x2958 <REVERSE_NUM+0x64>
		num=-1*num;
    2934:	8d 81       	ldd	r24, Y+5	; 0x05
    2936:	9e 81       	ldd	r25, Y+6	; 0x06
    2938:	af 81       	ldd	r26, Y+7	; 0x07
    293a:	b8 85       	ldd	r27, Y+8	; 0x08
    293c:	b0 95       	com	r27
    293e:	a0 95       	com	r26
    2940:	90 95       	com	r25
    2942:	81 95       	neg	r24
    2944:	9f 4f       	sbci	r25, 0xFF	; 255
    2946:	af 4f       	sbci	r26, 0xFF	; 255
    2948:	bf 4f       	sbci	r27, 0xFF	; 255
    294a:	8d 83       	std	Y+5, r24	; 0x05
    294c:	9e 83       	std	Y+6, r25	; 0x06
    294e:	af 83       	std	Y+7, r26	; 0x07
    2950:	b8 87       	std	Y+8, r27	; 0x08
		LCD_WRITEdata('-');
    2952:	8d e2       	ldi	r24, 0x2D	; 45
    2954:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_WRITEdata>
	}
	if(num==0){
    2958:	8d 81       	ldd	r24, Y+5	; 0x05
    295a:	9e 81       	ldd	r25, Y+6	; 0x06
    295c:	af 81       	ldd	r26, Y+7	; 0x07
    295e:	b8 85       	ldd	r27, Y+8	; 0x08
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	a1 05       	cpc	r26, r1
    2964:	b1 05       	cpc	r27, r1
    2966:	f1 f5       	brne	.+124    	; 0x29e4 <REVERSE_NUM+0xf0>
		LCD_WRITEdata(48);
    2968:	80 e3       	ldi	r24, 0x30	; 48
    296a:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_WRITEdata>
		return 0;
    296e:	19 86       	std	Y+9, r1	; 0x09
    2970:	1a 86       	std	Y+10, r1	; 0x0a
    2972:	1b 86       	std	Y+11, r1	; 0x0b
    2974:	1c 86       	std	Y+12, r1	; 0x0c
    2976:	46 c0       	rjmp	.+140    	; 0x2a04 <REVERSE_NUM+0x110>
	}

	while(num!=0){
		sum=sum*10+num%10;
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	9a 81       	ldd	r25, Y+2	; 0x02
    297c:	ab 81       	ldd	r26, Y+3	; 0x03
    297e:	bc 81       	ldd	r27, Y+4	; 0x04
    2980:	2a e0       	ldi	r18, 0x0A	; 10
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	50 e0       	ldi	r21, 0x00	; 0
    2988:	bc 01       	movw	r22, r24
    298a:	cd 01       	movw	r24, r26
    298c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <__mulsi3>
    2990:	7b 01       	movw	r14, r22
    2992:	8c 01       	movw	r16, r24
    2994:	8d 81       	ldd	r24, Y+5	; 0x05
    2996:	9e 81       	ldd	r25, Y+6	; 0x06
    2998:	af 81       	ldd	r26, Y+7	; 0x07
    299a:	b8 85       	ldd	r27, Y+8	; 0x08
    299c:	2a e0       	ldi	r18, 0x0A	; 10
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e0       	ldi	r20, 0x00	; 0
    29a2:	50 e0       	ldi	r21, 0x00	; 0
    29a4:	bc 01       	movw	r22, r24
    29a6:	cd 01       	movw	r24, r26
    29a8:	0e 94 47 1b 	call	0x368e	; 0x368e <__divmodsi4>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	8e 0d       	add	r24, r14
    29b2:	9f 1d       	adc	r25, r15
    29b4:	a0 1f       	adc	r26, r16
    29b6:	b1 1f       	adc	r27, r17
    29b8:	89 83       	std	Y+1, r24	; 0x01
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	ab 83       	std	Y+3, r26	; 0x03
    29be:	bc 83       	std	Y+4, r27	; 0x04
		num=num/10;
    29c0:	8d 81       	ldd	r24, Y+5	; 0x05
    29c2:	9e 81       	ldd	r25, Y+6	; 0x06
    29c4:	af 81       	ldd	r26, Y+7	; 0x07
    29c6:	b8 85       	ldd	r27, Y+8	; 0x08
    29c8:	2a e0       	ldi	r18, 0x0A	; 10
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e0       	ldi	r20, 0x00	; 0
    29ce:	50 e0       	ldi	r21, 0x00	; 0
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	0e 94 47 1b 	call	0x368e	; 0x368e <__divmodsi4>
    29d8:	da 01       	movw	r26, r20
    29da:	c9 01       	movw	r24, r18
    29dc:	8d 83       	std	Y+5, r24	; 0x05
    29de:	9e 83       	std	Y+6, r25	; 0x06
    29e0:	af 83       	std	Y+7, r26	; 0x07
    29e2:	b8 87       	std	Y+8, r27	; 0x08
	if(num==0){
		LCD_WRITEdata(48);
		return 0;
	}

	while(num!=0){
    29e4:	8d 81       	ldd	r24, Y+5	; 0x05
    29e6:	9e 81       	ldd	r25, Y+6	; 0x06
    29e8:	af 81       	ldd	r26, Y+7	; 0x07
    29ea:	b8 85       	ldd	r27, Y+8	; 0x08
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	a1 05       	cpc	r26, r1
    29f0:	b1 05       	cpc	r27, r1
    29f2:	11 f6       	brne	.-124    	; 0x2978 <REVERSE_NUM+0x84>
		j=j*10;
		sum=sum/10;
	}*/


	return sum;
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	9a 81       	ldd	r25, Y+2	; 0x02
    29f8:	ab 81       	ldd	r26, Y+3	; 0x03
    29fa:	bc 81       	ldd	r27, Y+4	; 0x04
    29fc:	89 87       	std	Y+9, r24	; 0x09
    29fe:	9a 87       	std	Y+10, r25	; 0x0a
    2a00:	ab 87       	std	Y+11, r26	; 0x0b
    2a02:	bc 87       	std	Y+12, r27	; 0x0c
    2a04:	89 85       	ldd	r24, Y+9	; 0x09
    2a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a08:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a0a:	bc 85       	ldd	r27, Y+12	; 0x0c

}
    2a0c:	bc 01       	movw	r22, r24
    2a0e:	cd 01       	movw	r24, r26
    2a10:	2c 96       	adiw	r28, 0x0c	; 12
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	1f 91       	pop	r17
    2a22:	0f 91       	pop	r16
    2a24:	ff 90       	pop	r15
    2a26:	ef 90       	pop	r14
    2a28:	08 95       	ret

00002a2a <__vector_11>:
void (*pf2_OV)(void);
void (*pf2_OCR)(void);

/*************************************************************************************************************/
void __vector_11(void)__attribute__((signal,used));
void __vector_11(void){
    2a2a:	1f 92       	push	r1
    2a2c:	0f 92       	push	r0
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	0f 92       	push	r0
    2a32:	11 24       	eor	r1, r1
    2a34:	2f 93       	push	r18
    2a36:	3f 93       	push	r19
    2a38:	4f 93       	push	r20
    2a3a:	5f 93       	push	r21
    2a3c:	6f 93       	push	r22
    2a3e:	7f 93       	push	r23
    2a40:	8f 93       	push	r24
    2a42:	9f 93       	push	r25
    2a44:	af 93       	push	r26
    2a46:	bf 93       	push	r27
    2a48:	ef 93       	push	r30
    2a4a:	ff 93       	push	r31
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
	pf0_OV();
    2a54:	e0 91 f1 02 	lds	r30, 0x02F1
    2a58:	f0 91 f2 02 	lds	r31, 0x02F2
    2a5c:	09 95       	icall
}
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	ff 91       	pop	r31
    2a64:	ef 91       	pop	r30
    2a66:	bf 91       	pop	r27
    2a68:	af 91       	pop	r26
    2a6a:	9f 91       	pop	r25
    2a6c:	8f 91       	pop	r24
    2a6e:	7f 91       	pop	r23
    2a70:	6f 91       	pop	r22
    2a72:	5f 91       	pop	r21
    2a74:	4f 91       	pop	r20
    2a76:	3f 91       	pop	r19
    2a78:	2f 91       	pop	r18
    2a7a:	0f 90       	pop	r0
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	0f 90       	pop	r0
    2a80:	1f 90       	pop	r1
    2a82:	18 95       	reti

00002a84 <__vector_10>:

/*************************************************************************************************************/
void __vector_10(void)__attribute__((signal,used));
void __vector_10(void){
    2a84:	1f 92       	push	r1
    2a86:	0f 92       	push	r0
    2a88:	0f b6       	in	r0, 0x3f	; 63
    2a8a:	0f 92       	push	r0
    2a8c:	11 24       	eor	r1, r1
    2a8e:	2f 93       	push	r18
    2a90:	3f 93       	push	r19
    2a92:	4f 93       	push	r20
    2a94:	5f 93       	push	r21
    2a96:	6f 93       	push	r22
    2a98:	7f 93       	push	r23
    2a9a:	8f 93       	push	r24
    2a9c:	9f 93       	push	r25
    2a9e:	af 93       	push	r26
    2aa0:	bf 93       	push	r27
    2aa2:	ef 93       	push	r30
    2aa4:	ff 93       	push	r31
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
	pf0_OCR();
    2aae:	e0 91 ed 02 	lds	r30, 0x02ED
    2ab2:	f0 91 ee 02 	lds	r31, 0x02EE
    2ab6:	09 95       	icall
}
    2ab8:	cf 91       	pop	r28
    2aba:	df 91       	pop	r29
    2abc:	ff 91       	pop	r31
    2abe:	ef 91       	pop	r30
    2ac0:	bf 91       	pop	r27
    2ac2:	af 91       	pop	r26
    2ac4:	9f 91       	pop	r25
    2ac6:	8f 91       	pop	r24
    2ac8:	7f 91       	pop	r23
    2aca:	6f 91       	pop	r22
    2acc:	5f 91       	pop	r21
    2ace:	4f 91       	pop	r20
    2ad0:	3f 91       	pop	r19
    2ad2:	2f 91       	pop	r18
    2ad4:	0f 90       	pop	r0
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	0f 90       	pop	r0
    2ada:	1f 90       	pop	r1
    2adc:	18 95       	reti

00002ade <__vector_9>:

/*************************************************************************************************************/
void __vector_9(void)__attribute__((signal,used));
void __vector_9(void){
    2ade:	1f 92       	push	r1
    2ae0:	0f 92       	push	r0
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	0f 92       	push	r0
    2ae6:	11 24       	eor	r1, r1
    2ae8:	2f 93       	push	r18
    2aea:	3f 93       	push	r19
    2aec:	4f 93       	push	r20
    2aee:	5f 93       	push	r21
    2af0:	6f 93       	push	r22
    2af2:	7f 93       	push	r23
    2af4:	8f 93       	push	r24
    2af6:	9f 93       	push	r25
    2af8:	af 93       	push	r26
    2afa:	bf 93       	push	r27
    2afc:	ef 93       	push	r30
    2afe:	ff 93       	push	r31
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
	pf1_OV();
    2b08:	e0 91 e5 02 	lds	r30, 0x02E5
    2b0c:	f0 91 e6 02 	lds	r31, 0x02E6
    2b10:	09 95       	icall
}
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	ff 91       	pop	r31
    2b18:	ef 91       	pop	r30
    2b1a:	bf 91       	pop	r27
    2b1c:	af 91       	pop	r26
    2b1e:	9f 91       	pop	r25
    2b20:	8f 91       	pop	r24
    2b22:	7f 91       	pop	r23
    2b24:	6f 91       	pop	r22
    2b26:	5f 91       	pop	r21
    2b28:	4f 91       	pop	r20
    2b2a:	3f 91       	pop	r19
    2b2c:	2f 91       	pop	r18
    2b2e:	0f 90       	pop	r0
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	0f 90       	pop	r0
    2b34:	1f 90       	pop	r1
    2b36:	18 95       	reti

00002b38 <__vector_8>:

/*************************************************************************************************************/
void __vector_8(void)__attribute__((signal,used));
void __vector_8(void){
    2b38:	1f 92       	push	r1
    2b3a:	0f 92       	push	r0
    2b3c:	0f b6       	in	r0, 0x3f	; 63
    2b3e:	0f 92       	push	r0
    2b40:	11 24       	eor	r1, r1
    2b42:	2f 93       	push	r18
    2b44:	3f 93       	push	r19
    2b46:	4f 93       	push	r20
    2b48:	5f 93       	push	r21
    2b4a:	6f 93       	push	r22
    2b4c:	7f 93       	push	r23
    2b4e:	8f 93       	push	r24
    2b50:	9f 93       	push	r25
    2b52:	af 93       	push	r26
    2b54:	bf 93       	push	r27
    2b56:	ef 93       	push	r30
    2b58:	ff 93       	push	r31
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
	pf1_OCRB();
    2b62:	e0 91 e7 02 	lds	r30, 0x02E7
    2b66:	f0 91 e8 02 	lds	r31, 0x02E8
    2b6a:	09 95       	icall
}
    2b6c:	cf 91       	pop	r28
    2b6e:	df 91       	pop	r29
    2b70:	ff 91       	pop	r31
    2b72:	ef 91       	pop	r30
    2b74:	bf 91       	pop	r27
    2b76:	af 91       	pop	r26
    2b78:	9f 91       	pop	r25
    2b7a:	8f 91       	pop	r24
    2b7c:	7f 91       	pop	r23
    2b7e:	6f 91       	pop	r22
    2b80:	5f 91       	pop	r21
    2b82:	4f 91       	pop	r20
    2b84:	3f 91       	pop	r19
    2b86:	2f 91       	pop	r18
    2b88:	0f 90       	pop	r0
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	0f 90       	pop	r0
    2b8e:	1f 90       	pop	r1
    2b90:	18 95       	reti

00002b92 <__vector_7>:

/*************************************************************************************************************/
void __vector_7(void)__attribute__((signal,used));
void __vector_7(void){
    2b92:	1f 92       	push	r1
    2b94:	0f 92       	push	r0
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	0f 92       	push	r0
    2b9a:	11 24       	eor	r1, r1
    2b9c:	2f 93       	push	r18
    2b9e:	3f 93       	push	r19
    2ba0:	4f 93       	push	r20
    2ba2:	5f 93       	push	r21
    2ba4:	6f 93       	push	r22
    2ba6:	7f 93       	push	r23
    2ba8:	8f 93       	push	r24
    2baa:	9f 93       	push	r25
    2bac:	af 93       	push	r26
    2bae:	bf 93       	push	r27
    2bb0:	ef 93       	push	r30
    2bb2:	ff 93       	push	r31
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
	pf1_OCRA();
    2bbc:	e0 91 e9 02 	lds	r30, 0x02E9
    2bc0:	f0 91 ea 02 	lds	r31, 0x02EA
    2bc4:	09 95       	icall
}
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	ff 91       	pop	r31
    2bcc:	ef 91       	pop	r30
    2bce:	bf 91       	pop	r27
    2bd0:	af 91       	pop	r26
    2bd2:	9f 91       	pop	r25
    2bd4:	8f 91       	pop	r24
    2bd6:	7f 91       	pop	r23
    2bd8:	6f 91       	pop	r22
    2bda:	5f 91       	pop	r21
    2bdc:	4f 91       	pop	r20
    2bde:	3f 91       	pop	r19
    2be0:	2f 91       	pop	r18
    2be2:	0f 90       	pop	r0
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	0f 90       	pop	r0
    2be8:	1f 90       	pop	r1
    2bea:	18 95       	reti

00002bec <__vector_6>:

/*************************************************************************************************************/
void __vector_6(void)__attribute__((signal,used));
void __vector_6(void){
    2bec:	1f 92       	push	r1
    2bee:	0f 92       	push	r0
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	0f 92       	push	r0
    2bf4:	11 24       	eor	r1, r1
    2bf6:	2f 93       	push	r18
    2bf8:	3f 93       	push	r19
    2bfa:	4f 93       	push	r20
    2bfc:	5f 93       	push	r21
    2bfe:	6f 93       	push	r22
    2c00:	7f 93       	push	r23
    2c02:	8f 93       	push	r24
    2c04:	9f 93       	push	r25
    2c06:	af 93       	push	r26
    2c08:	bf 93       	push	r27
    2c0a:	ef 93       	push	r30
    2c0c:	ff 93       	push	r31
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
	pf1_ICU();
    2c16:	e0 91 ef 02 	lds	r30, 0x02EF
    2c1a:	f0 91 f0 02 	lds	r31, 0x02F0
    2c1e:	09 95       	icall
}
    2c20:	cf 91       	pop	r28
    2c22:	df 91       	pop	r29
    2c24:	ff 91       	pop	r31
    2c26:	ef 91       	pop	r30
    2c28:	bf 91       	pop	r27
    2c2a:	af 91       	pop	r26
    2c2c:	9f 91       	pop	r25
    2c2e:	8f 91       	pop	r24
    2c30:	7f 91       	pop	r23
    2c32:	6f 91       	pop	r22
    2c34:	5f 91       	pop	r21
    2c36:	4f 91       	pop	r20
    2c38:	3f 91       	pop	r19
    2c3a:	2f 91       	pop	r18
    2c3c:	0f 90       	pop	r0
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	0f 90       	pop	r0
    2c42:	1f 90       	pop	r1
    2c44:	18 95       	reti

00002c46 <__vector_5>:

/*************************************************************************************************************/
void __vector_5(void)__attribute__((signal,used));
void __vector_5(void){
    2c46:	1f 92       	push	r1
    2c48:	0f 92       	push	r0
    2c4a:	0f b6       	in	r0, 0x3f	; 63
    2c4c:	0f 92       	push	r0
    2c4e:	11 24       	eor	r1, r1
    2c50:	2f 93       	push	r18
    2c52:	3f 93       	push	r19
    2c54:	4f 93       	push	r20
    2c56:	5f 93       	push	r21
    2c58:	6f 93       	push	r22
    2c5a:	7f 93       	push	r23
    2c5c:	8f 93       	push	r24
    2c5e:	9f 93       	push	r25
    2c60:	af 93       	push	r26
    2c62:	bf 93       	push	r27
    2c64:	ef 93       	push	r30
    2c66:	ff 93       	push	r31
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
	pf2_OV();
    2c70:	e0 91 eb 02 	lds	r30, 0x02EB
    2c74:	f0 91 ec 02 	lds	r31, 0x02EC
    2c78:	09 95       	icall
}
    2c7a:	cf 91       	pop	r28
    2c7c:	df 91       	pop	r29
    2c7e:	ff 91       	pop	r31
    2c80:	ef 91       	pop	r30
    2c82:	bf 91       	pop	r27
    2c84:	af 91       	pop	r26
    2c86:	9f 91       	pop	r25
    2c88:	8f 91       	pop	r24
    2c8a:	7f 91       	pop	r23
    2c8c:	6f 91       	pop	r22
    2c8e:	5f 91       	pop	r21
    2c90:	4f 91       	pop	r20
    2c92:	3f 91       	pop	r19
    2c94:	2f 91       	pop	r18
    2c96:	0f 90       	pop	r0
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	0f 90       	pop	r0
    2c9c:	1f 90       	pop	r1
    2c9e:	18 95       	reti

00002ca0 <__vector_4>:
/*************************************************************************************************************/
void __vector_4(void)__attribute__((signal,used));
void __vector_4(void){
    2ca0:	1f 92       	push	r1
    2ca2:	0f 92       	push	r0
    2ca4:	0f b6       	in	r0, 0x3f	; 63
    2ca6:	0f 92       	push	r0
    2ca8:	11 24       	eor	r1, r1
    2caa:	2f 93       	push	r18
    2cac:	3f 93       	push	r19
    2cae:	4f 93       	push	r20
    2cb0:	5f 93       	push	r21
    2cb2:	6f 93       	push	r22
    2cb4:	7f 93       	push	r23
    2cb6:	8f 93       	push	r24
    2cb8:	9f 93       	push	r25
    2cba:	af 93       	push	r26
    2cbc:	bf 93       	push	r27
    2cbe:	ef 93       	push	r30
    2cc0:	ff 93       	push	r31
    2cc2:	df 93       	push	r29
    2cc4:	cf 93       	push	r28
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
	pf2_OCR();
    2cca:	e0 91 e3 02 	lds	r30, 0x02E3
    2cce:	f0 91 e4 02 	lds	r31, 0x02E4
    2cd2:	09 95       	icall
}
    2cd4:	cf 91       	pop	r28
    2cd6:	df 91       	pop	r29
    2cd8:	ff 91       	pop	r31
    2cda:	ef 91       	pop	r30
    2cdc:	bf 91       	pop	r27
    2cde:	af 91       	pop	r26
    2ce0:	9f 91       	pop	r25
    2ce2:	8f 91       	pop	r24
    2ce4:	7f 91       	pop	r23
    2ce6:	6f 91       	pop	r22
    2ce8:	5f 91       	pop	r21
    2cea:	4f 91       	pop	r20
    2cec:	3f 91       	pop	r19
    2cee:	2f 91       	pop	r18
    2cf0:	0f 90       	pop	r0
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	0f 90       	pop	r0
    2cf6:	1f 90       	pop	r1
    2cf8:	18 95       	reti

00002cfa <TIMER_INIT>:
/*************************************************************************************************************/

void TIMER_INIT(TIM TIMER){
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	2c 97       	sbiw	r28, 0x0c	; 12
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	f8 94       	cli
    2d08:	de bf       	out	0x3e, r29	; 62
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	cd bf       	out	0x3d, r28	; 61
    2d0e:	9a 83       	std	Y+2, r25	; 0x02
    2d10:	89 83       	std	Y+1, r24	; 0x01
	switch(TIMER.TIMER_NUM)
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	83 70       	andi	r24, 0x03	; 3
    2d16:	88 2f       	mov	r24, r24
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	00 97       	sbiw	r24, 0x00	; 0
    2d1c:	09 f0       	breq	.+2      	; 0x2d20 <TIMER_INIT+0x26>
    2d1e:	ec c1       	rjmp	.+984    	; 0x30f8 <TIMER_INIT+0x3fe>
	{
	/*TCCR0=0X00;
	TCCR0|=(TIMER.mode<<3);*/
	case TIMER0:
		switch(TIMER.mode)
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	86 95       	lsr	r24
    2d24:	86 95       	lsr	r24
    2d26:	8f 70       	andi	r24, 0x0F	; 15
    2d28:	28 2f       	mov	r18, r24
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	3c 87       	std	Y+12, r19	; 0x0c
    2d2e:	2b 87       	std	Y+11, r18	; 0x0b
    2d30:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d32:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d34:	81 30       	cpi	r24, 0x01	; 1
    2d36:	91 05       	cpc	r25, r1
    2d38:	99 f1       	breq	.+102    	; 0x2da0 <TIMER_INIT+0xa6>
    2d3a:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d3c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d3e:	22 30       	cpi	r18, 0x02	; 2
    2d40:	31 05       	cpc	r19, r1
    2d42:	2c f4       	brge	.+10     	; 0x2d4e <TIMER_INIT+0x54>
    2d44:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d46:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	61 f0       	breq	.+24     	; 0x2d64 <TIMER_INIT+0x6a>
    2d4c:	46 c0       	rjmp	.+140    	; 0x2dda <TIMER_INIT+0xe0>
    2d4e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d50:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d52:	22 30       	cpi	r18, 0x02	; 2
    2d54:	31 05       	cpc	r19, r1
    2d56:	a9 f0       	breq	.+42     	; 0x2d82 <TIMER_INIT+0x88>
    2d58:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d5c:	83 30       	cpi	r24, 0x03	; 3
    2d5e:	91 05       	cpc	r25, r1
    2d60:	71 f1       	breq	.+92     	; 0x2dbe <TIMER_INIT+0xc4>
    2d62:	3b c0       	rjmp	.+118    	; 0x2dda <TIMER_INIT+0xe0>
		{
		case NORMAL:
			CLR(TCCR0,6); CLR(TCCR0,3);
    2d64:	a3 e5       	ldi	r26, 0x53	; 83
    2d66:	b0 e0       	ldi	r27, 0x00	; 0
    2d68:	e3 e5       	ldi	r30, 0x53	; 83
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	80 81       	ld	r24, Z
    2d6e:	8f 7b       	andi	r24, 0xBF	; 191
    2d70:	8c 93       	st	X, r24
    2d72:	a3 e5       	ldi	r26, 0x53	; 83
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
    2d76:	e3 e5       	ldi	r30, 0x53	; 83
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 81       	ld	r24, Z
    2d7c:	87 7f       	andi	r24, 0xF7	; 247
    2d7e:	8c 93       	st	X, r24
    2d80:	2c c0       	rjmp	.+88     	; 0x2dda <TIMER_INIT+0xe0>
			break;
		case CTC:
			CLR(TCCR0,6); SET(TCCR0,3);
    2d82:	a3 e5       	ldi	r26, 0x53	; 83
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	e3 e5       	ldi	r30, 0x53	; 83
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	8f 7b       	andi	r24, 0xBF	; 191
    2d8e:	8c 93       	st	X, r24
    2d90:	a3 e5       	ldi	r26, 0x53	; 83
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	e3 e5       	ldi	r30, 0x53	; 83
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	88 60       	ori	r24, 0x08	; 8
    2d9c:	8c 93       	st	X, r24
    2d9e:	1d c0       	rjmp	.+58     	; 0x2dda <TIMER_INIT+0xe0>
			break;
		case PWM_PHASE_CORRECT:
			SET(TCCR0,6); CLR(TCCR0,3);
    2da0:	a3 e5       	ldi	r26, 0x53	; 83
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	e3 e5       	ldi	r30, 0x53	; 83
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	80 64       	ori	r24, 0x40	; 64
    2dac:	8c 93       	st	X, r24
    2dae:	a3 e5       	ldi	r26, 0x53	; 83
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	e3 e5       	ldi	r30, 0x53	; 83
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	80 81       	ld	r24, Z
    2db8:	87 7f       	andi	r24, 0xF7	; 247
    2dba:	8c 93       	st	X, r24
    2dbc:	0e c0       	rjmp	.+28     	; 0x2dda <TIMER_INIT+0xe0>
			break;
		case FAST_PWM:
			SET(TCCR0,6); SET(TCCR0,3);
    2dbe:	a3 e5       	ldi	r26, 0x53	; 83
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	e3 e5       	ldi	r30, 0x53	; 83
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	80 81       	ld	r24, Z
    2dc8:	80 64       	ori	r24, 0x40	; 64
    2dca:	8c 93       	st	X, r24
    2dcc:	a3 e5       	ldi	r26, 0x53	; 83
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	e3 e5       	ldi	r30, 0x53	; 83
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	88 60       	ori	r24, 0x08	; 8
    2dd8:	8c 93       	st	X, r24
			break;
		}
		////////////////////////////////////////
		switch(TIMER.oc_inverted_or_nonInverted)
    2dda:	8a 81       	ldd	r24, Y+2	; 0x02
    2ddc:	86 95       	lsr	r24
    2dde:	83 70       	andi	r24, 0x03	; 3
    2de0:	28 2f       	mov	r18, r24
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	3a 87       	std	Y+10, r19	; 0x0a
    2de6:	29 87       	std	Y+9, r18	; 0x09
    2de8:	89 85       	ldd	r24, Y+9	; 0x09
    2dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dec:	81 30       	cpi	r24, 0x01	; 1
    2dee:	91 05       	cpc	r25, r1
    2df0:	21 f1       	breq	.+72     	; 0x2e3a <TIMER_INIT+0x140>
    2df2:	29 85       	ldd	r18, Y+9	; 0x09
    2df4:	3a 85       	ldd	r19, Y+10	; 0x0a
    2df6:	22 30       	cpi	r18, 0x02	; 2
    2df8:	31 05       	cpc	r19, r1
    2dfa:	2c f4       	brge	.+10     	; 0x2e06 <TIMER_INIT+0x10c>
    2dfc:	89 85       	ldd	r24, Y+9	; 0x09
    2dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	61 f0       	breq	.+24     	; 0x2e1c <TIMER_INIT+0x122>
    2e04:	46 c0       	rjmp	.+140    	; 0x2e92 <TIMER_INIT+0x198>
    2e06:	29 85       	ldd	r18, Y+9	; 0x09
    2e08:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e0a:	22 30       	cpi	r18, 0x02	; 2
    2e0c:	31 05       	cpc	r19, r1
    2e0e:	21 f1       	breq	.+72     	; 0x2e58 <TIMER_INIT+0x15e>
    2e10:	89 85       	ldd	r24, Y+9	; 0x09
    2e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e14:	83 30       	cpi	r24, 0x03	; 3
    2e16:	91 05       	cpc	r25, r1
    2e18:	71 f1       	breq	.+92     	; 0x2e76 <TIMER_INIT+0x17c>
    2e1a:	3b c0       	rjmp	.+118    	; 0x2e92 <TIMER_INIT+0x198>
		{
		case oc_disconnect:
			CLR(TCCR0,5); CLR(TCCR0,4); break;
    2e1c:	a3 e5       	ldi	r26, 0x53	; 83
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e3 e5       	ldi	r30, 0x53	; 83
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	8f 7d       	andi	r24, 0xDF	; 223
    2e28:	8c 93       	st	X, r24
    2e2a:	a3 e5       	ldi	r26, 0x53	; 83
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	e3 e5       	ldi	r30, 0x53	; 83
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	8f 7e       	andi	r24, 0xEF	; 239
    2e36:	8c 93       	st	X, r24
    2e38:	2c c0       	rjmp	.+88     	; 0x2e92 <TIMER_INIT+0x198>
		case oc_NinIverted:
			SET(TCCR0,5); CLR(TCCR0,4); break;
    2e3a:	a3 e5       	ldi	r26, 0x53	; 83
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	e3 e5       	ldi	r30, 0x53	; 83
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	80 81       	ld	r24, Z
    2e44:	80 62       	ori	r24, 0x20	; 32
    2e46:	8c 93       	st	X, r24
    2e48:	a3 e5       	ldi	r26, 0x53	; 83
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	e3 e5       	ldi	r30, 0x53	; 83
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 81       	ld	r24, Z
    2e52:	8f 7e       	andi	r24, 0xEF	; 239
    2e54:	8c 93       	st	X, r24
    2e56:	1d c0       	rjmp	.+58     	; 0x2e92 <TIMER_INIT+0x198>
		case oc_inverted:
			SET(TCCR0,5); SET(TCCR0,4);  break;
    2e58:	a3 e5       	ldi	r26, 0x53	; 83
    2e5a:	b0 e0       	ldi	r27, 0x00	; 0
    2e5c:	e3 e5       	ldi	r30, 0x53	; 83
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	80 62       	ori	r24, 0x20	; 32
    2e64:	8c 93       	st	X, r24
    2e66:	a3 e5       	ldi	r26, 0x53	; 83
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e3 e5       	ldi	r30, 0x53	; 83
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	80 61       	ori	r24, 0x10	; 16
    2e72:	8c 93       	st	X, r24
    2e74:	0e c0       	rjmp	.+28     	; 0x2e92 <TIMER_INIT+0x198>
		case oc_toggle:
			CLR(TCCR0,5); SET(TCCR0,4);  break;
    2e76:	a3 e5       	ldi	r26, 0x53	; 83
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	e3 e5       	ldi	r30, 0x53	; 83
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	80 81       	ld	r24, Z
    2e80:	8f 7d       	andi	r24, 0xDF	; 223
    2e82:	8c 93       	st	X, r24
    2e84:	a3 e5       	ldi	r26, 0x53	; 83
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	e3 e5       	ldi	r30, 0x53	; 83
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	80 61       	ori	r24, 0x10	; 16
    2e90:	8c 93       	st	X, r24
		}
		/////////////////////////////////////////
		switch(TIMER.prescaler)
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	98 2f       	mov	r25, r24
    2e96:	92 95       	swap	r25
    2e98:	96 95       	lsr	r25
    2e9a:	96 95       	lsr	r25
    2e9c:	93 70       	andi	r25, 0x03	; 3
    2e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea0:	81 70       	andi	r24, 0x01	; 1
    2ea2:	88 0f       	add	r24, r24
    2ea4:	88 0f       	add	r24, r24
    2ea6:	89 2b       	or	r24, r25
    2ea8:	28 2f       	mov	r18, r24
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	38 87       	std	Y+8, r19	; 0x08
    2eae:	2f 83       	std	Y+7, r18	; 0x07
    2eb0:	8f 81       	ldd	r24, Y+7	; 0x07
    2eb2:	98 85       	ldd	r25, Y+8	; 0x08
    2eb4:	83 30       	cpi	r24, 0x03	; 3
    2eb6:	91 05       	cpc	r25, r1
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <TIMER_INIT+0x1c2>
    2eba:	70 c0       	rjmp	.+224    	; 0x2f9c <TIMER_INIT+0x2a2>
    2ebc:	2f 81       	ldd	r18, Y+7	; 0x07
    2ebe:	38 85       	ldd	r19, Y+8	; 0x08
    2ec0:	24 30       	cpi	r18, 0x04	; 4
    2ec2:	31 05       	cpc	r19, r1
    2ec4:	84 f4       	brge	.+32     	; 0x2ee6 <TIMER_INIT+0x1ec>
    2ec6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ec8:	98 85       	ldd	r25, Y+8	; 0x08
    2eca:	81 30       	cpi	r24, 0x01	; 1
    2ecc:	91 05       	cpc	r25, r1
    2ece:	d1 f1       	breq	.+116    	; 0x2f44 <TIMER_INIT+0x24a>
    2ed0:	2f 81       	ldd	r18, Y+7	; 0x07
    2ed2:	38 85       	ldd	r19, Y+8	; 0x08
    2ed4:	22 30       	cpi	r18, 0x02	; 2
    2ed6:	31 05       	cpc	r19, r1
    2ed8:	0c f0       	brlt	.+2      	; 0x2edc <TIMER_INIT+0x1e2>
    2eda:	4a c0       	rjmp	.+148    	; 0x2f70 <TIMER_INIT+0x276>
    2edc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ede:	98 85       	ldd	r25, Y+8	; 0x08
    2ee0:	00 97       	sbiw	r24, 0x00	; 0
    2ee2:	d1 f0       	breq	.+52     	; 0x2f18 <TIMER_INIT+0x21e>
    2ee4:	c8 c0       	rjmp	.+400    	; 0x3076 <TIMER_INIT+0x37c>
    2ee6:	2f 81       	ldd	r18, Y+7	; 0x07
    2ee8:	38 85       	ldd	r19, Y+8	; 0x08
    2eea:	25 30       	cpi	r18, 0x05	; 5
    2eec:	31 05       	cpc	r19, r1
    2eee:	09 f4       	brne	.+2      	; 0x2ef2 <TIMER_INIT+0x1f8>
    2ef0:	81 c0       	rjmp	.+258    	; 0x2ff4 <TIMER_INIT+0x2fa>
    2ef2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ef4:	98 85       	ldd	r25, Y+8	; 0x08
    2ef6:	85 30       	cpi	r24, 0x05	; 5
    2ef8:	91 05       	cpc	r25, r1
    2efa:	0c f4       	brge	.+2      	; 0x2efe <TIMER_INIT+0x204>
    2efc:	65 c0       	rjmp	.+202    	; 0x2fc8 <TIMER_INIT+0x2ce>
    2efe:	2f 81       	ldd	r18, Y+7	; 0x07
    2f00:	38 85       	ldd	r19, Y+8	; 0x08
    2f02:	26 30       	cpi	r18, 0x06	; 6
    2f04:	31 05       	cpc	r19, r1
    2f06:	09 f4       	brne	.+2      	; 0x2f0a <TIMER_INIT+0x210>
    2f08:	8b c0       	rjmp	.+278    	; 0x3020 <TIMER_INIT+0x326>
    2f0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f0c:	98 85       	ldd	r25, Y+8	; 0x08
    2f0e:	87 30       	cpi	r24, 0x07	; 7
    2f10:	91 05       	cpc	r25, r1
    2f12:	09 f4       	brne	.+2      	; 0x2f16 <TIMER_INIT+0x21c>
    2f14:	9b c0       	rjmp	.+310    	; 0x304c <TIMER_INIT+0x352>
    2f16:	af c0       	rjmp	.+350    	; 0x3076 <TIMER_INIT+0x37c>
		{
		case NO_CLOCK_SOURCE :
			CLR(TCCR0,0); CLR(TCCR0,1); CLR(TCCR0,2);  break;
    2f18:	a3 e5       	ldi	r26, 0x53	; 83
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	e3 e5       	ldi	r30, 0x53	; 83
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	8e 7f       	andi	r24, 0xFE	; 254
    2f24:	8c 93       	st	X, r24
    2f26:	a3 e5       	ldi	r26, 0x53	; 83
    2f28:	b0 e0       	ldi	r27, 0x00	; 0
    2f2a:	e3 e5       	ldi	r30, 0x53	; 83
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	8d 7f       	andi	r24, 0xFD	; 253
    2f32:	8c 93       	st	X, r24
    2f34:	a3 e5       	ldi	r26, 0x53	; 83
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	e3 e5       	ldi	r30, 0x53	; 83
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	8b 7f       	andi	r24, 0xFB	; 251
    2f40:	8c 93       	st	X, r24
    2f42:	99 c0       	rjmp	.+306    	; 0x3076 <TIMER_INIT+0x37c>
		case PRES_1:
			SET(TCCR0,0); CLR(TCCR0,1); CLR(TCCR0,2);break;
    2f44:	a3 e5       	ldi	r26, 0x53	; 83
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	e3 e5       	ldi	r30, 0x53	; 83
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	80 81       	ld	r24, Z
    2f4e:	81 60       	ori	r24, 0x01	; 1
    2f50:	8c 93       	st	X, r24
    2f52:	a3 e5       	ldi	r26, 0x53	; 83
    2f54:	b0 e0       	ldi	r27, 0x00	; 0
    2f56:	e3 e5       	ldi	r30, 0x53	; 83
    2f58:	f0 e0       	ldi	r31, 0x00	; 0
    2f5a:	80 81       	ld	r24, Z
    2f5c:	8d 7f       	andi	r24, 0xFD	; 253
    2f5e:	8c 93       	st	X, r24
    2f60:	a3 e5       	ldi	r26, 0x53	; 83
    2f62:	b0 e0       	ldi	r27, 0x00	; 0
    2f64:	e3 e5       	ldi	r30, 0x53	; 83
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	80 81       	ld	r24, Z
    2f6a:	8b 7f       	andi	r24, 0xFB	; 251
    2f6c:	8c 93       	st	X, r24
    2f6e:	83 c0       	rjmp	.+262    	; 0x3076 <TIMER_INIT+0x37c>
		case PRES_8 :
			CLR(TCCR0,0); SET(TCCR0,1); CLR(TCCR0,2);break;
    2f70:	a3 e5       	ldi	r26, 0x53	; 83
    2f72:	b0 e0       	ldi	r27, 0x00	; 0
    2f74:	e3 e5       	ldi	r30, 0x53	; 83
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	80 81       	ld	r24, Z
    2f7a:	8e 7f       	andi	r24, 0xFE	; 254
    2f7c:	8c 93       	st	X, r24
    2f7e:	a3 e5       	ldi	r26, 0x53	; 83
    2f80:	b0 e0       	ldi	r27, 0x00	; 0
    2f82:	e3 e5       	ldi	r30, 0x53	; 83
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	80 81       	ld	r24, Z
    2f88:	82 60       	ori	r24, 0x02	; 2
    2f8a:	8c 93       	st	X, r24
    2f8c:	a3 e5       	ldi	r26, 0x53	; 83
    2f8e:	b0 e0       	ldi	r27, 0x00	; 0
    2f90:	e3 e5       	ldi	r30, 0x53	; 83
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	80 81       	ld	r24, Z
    2f96:	8b 7f       	andi	r24, 0xFB	; 251
    2f98:	8c 93       	st	X, r24
    2f9a:	6d c0       	rjmp	.+218    	; 0x3076 <TIMER_INIT+0x37c>
		case PRES_64 :
			SET(TCCR0,0); SET(TCCR0,1); CLR(TCCR0,2);break;
    2f9c:	a3 e5       	ldi	r26, 0x53	; 83
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e3 e5       	ldi	r30, 0x53	; 83
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	81 60       	ori	r24, 0x01	; 1
    2fa8:	8c 93       	st	X, r24
    2faa:	a3 e5       	ldi	r26, 0x53	; 83
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	e3 e5       	ldi	r30, 0x53	; 83
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	82 60       	ori	r24, 0x02	; 2
    2fb6:	8c 93       	st	X, r24
    2fb8:	a3 e5       	ldi	r26, 0x53	; 83
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	e3 e5       	ldi	r30, 0x53	; 83
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	80 81       	ld	r24, Z
    2fc2:	8b 7f       	andi	r24, 0xFB	; 251
    2fc4:	8c 93       	st	X, r24
    2fc6:	57 c0       	rjmp	.+174    	; 0x3076 <TIMER_INIT+0x37c>
		case PRES_256 :
			CLR(TCCR0,0); CLR(TCCR0,1); SET(TCCR0,2);break;
    2fc8:	a3 e5       	ldi	r26, 0x53	; 83
    2fca:	b0 e0       	ldi	r27, 0x00	; 0
    2fcc:	e3 e5       	ldi	r30, 0x53	; 83
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	80 81       	ld	r24, Z
    2fd2:	8e 7f       	andi	r24, 0xFE	; 254
    2fd4:	8c 93       	st	X, r24
    2fd6:	a3 e5       	ldi	r26, 0x53	; 83
    2fd8:	b0 e0       	ldi	r27, 0x00	; 0
    2fda:	e3 e5       	ldi	r30, 0x53	; 83
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	80 81       	ld	r24, Z
    2fe0:	8d 7f       	andi	r24, 0xFD	; 253
    2fe2:	8c 93       	st	X, r24
    2fe4:	a3 e5       	ldi	r26, 0x53	; 83
    2fe6:	b0 e0       	ldi	r27, 0x00	; 0
    2fe8:	e3 e5       	ldi	r30, 0x53	; 83
    2fea:	f0 e0       	ldi	r31, 0x00	; 0
    2fec:	80 81       	ld	r24, Z
    2fee:	84 60       	ori	r24, 0x04	; 4
    2ff0:	8c 93       	st	X, r24
    2ff2:	41 c0       	rjmp	.+130    	; 0x3076 <TIMER_INIT+0x37c>
		case PRES_1024 :
			SET(TCCR0,0); CLR(TCCR0,1); SET(TCCR0,2);break;
    2ff4:	a3 e5       	ldi	r26, 0x53	; 83
    2ff6:	b0 e0       	ldi	r27, 0x00	; 0
    2ff8:	e3 e5       	ldi	r30, 0x53	; 83
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	80 81       	ld	r24, Z
    2ffe:	81 60       	ori	r24, 0x01	; 1
    3000:	8c 93       	st	X, r24
    3002:	a3 e5       	ldi	r26, 0x53	; 83
    3004:	b0 e0       	ldi	r27, 0x00	; 0
    3006:	e3 e5       	ldi	r30, 0x53	; 83
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	80 81       	ld	r24, Z
    300c:	8d 7f       	andi	r24, 0xFD	; 253
    300e:	8c 93       	st	X, r24
    3010:	a3 e5       	ldi	r26, 0x53	; 83
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	e3 e5       	ldi	r30, 0x53	; 83
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	84 60       	ori	r24, 0x04	; 4
    301c:	8c 93       	st	X, r24
    301e:	2b c0       	rjmp	.+86     	; 0x3076 <TIMER_INIT+0x37c>
		case EXTPRES_FALLING :
			CLR(TCCR0,0); SET(TCCR0,1); SET(TCCR0,2);break;
    3020:	a3 e5       	ldi	r26, 0x53	; 83
    3022:	b0 e0       	ldi	r27, 0x00	; 0
    3024:	e3 e5       	ldi	r30, 0x53	; 83
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	80 81       	ld	r24, Z
    302a:	8e 7f       	andi	r24, 0xFE	; 254
    302c:	8c 93       	st	X, r24
    302e:	a3 e5       	ldi	r26, 0x53	; 83
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	e3 e5       	ldi	r30, 0x53	; 83
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 81       	ld	r24, Z
    3038:	82 60       	ori	r24, 0x02	; 2
    303a:	8c 93       	st	X, r24
    303c:	a3 e5       	ldi	r26, 0x53	; 83
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	e3 e5       	ldi	r30, 0x53	; 83
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 81       	ld	r24, Z
    3046:	84 60       	ori	r24, 0x04	; 4
    3048:	8c 93       	st	X, r24
    304a:	15 c0       	rjmp	.+42     	; 0x3076 <TIMER_INIT+0x37c>
		case EXTPRES_RISING:
			SET(TCCR0,0); SET(TCCR0,1); SET(TCCR0,2);break;
    304c:	a3 e5       	ldi	r26, 0x53	; 83
    304e:	b0 e0       	ldi	r27, 0x00	; 0
    3050:	e3 e5       	ldi	r30, 0x53	; 83
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	80 81       	ld	r24, Z
    3056:	81 60       	ori	r24, 0x01	; 1
    3058:	8c 93       	st	X, r24
    305a:	a3 e5       	ldi	r26, 0x53	; 83
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	e3 e5       	ldi	r30, 0x53	; 83
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	80 81       	ld	r24, Z
    3064:	82 60       	ori	r24, 0x02	; 2
    3066:	8c 93       	st	X, r24
    3068:	a3 e5       	ldi	r26, 0x53	; 83
    306a:	b0 e0       	ldi	r27, 0x00	; 0
    306c:	e3 e5       	ldi	r30, 0x53	; 83
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	84 60       	ori	r24, 0x04	; 4
    3074:	8c 93       	st	X, r24
		}
		/////////////////////////////////////////////////////////
		switch(TIMER.OV_INTERRUPT)
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	86 95       	lsr	r24
    307a:	86 95       	lsr	r24
    307c:	86 95       	lsr	r24
    307e:	81 70       	andi	r24, 0x01	; 1
    3080:	28 2f       	mov	r18, r24
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	3e 83       	std	Y+6, r19	; 0x06
    3086:	2d 83       	std	Y+5, r18	; 0x05
    3088:	8d 81       	ldd	r24, Y+5	; 0x05
    308a:	9e 81       	ldd	r25, Y+6	; 0x06
    308c:	00 97       	sbiw	r24, 0x00	; 0
    308e:	69 f0       	breq	.+26     	; 0x30aa <TIMER_INIT+0x3b0>
    3090:	2d 81       	ldd	r18, Y+5	; 0x05
    3092:	3e 81       	ldd	r19, Y+6	; 0x06
    3094:	21 30       	cpi	r18, 0x01	; 1
    3096:	31 05       	cpc	r19, r1
    3098:	79 f4       	brne	.+30     	; 0x30b8 <TIMER_INIT+0x3be>
		{
		case ON:
			SET(TIMSK,0); break;
    309a:	a9 e5       	ldi	r26, 0x59	; 89
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e9 e5       	ldi	r30, 0x59	; 89
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	81 60       	ori	r24, 0x01	; 1
    30a6:	8c 93       	st	X, r24
    30a8:	07 c0       	rjmp	.+14     	; 0x30b8 <TIMER_INIT+0x3be>
		case OFF:
			CLR(TIMSK,0); break;
    30aa:	a9 e5       	ldi	r26, 0x59	; 89
    30ac:	b0 e0       	ldi	r27, 0x00	; 0
    30ae:	e9 e5       	ldi	r30, 0x59	; 89
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
    30b4:	8e 7f       	andi	r24, 0xFE	; 254
    30b6:	8c 93       	st	X, r24
		}

		switch(TIMER.OCR_INTERRUPT)
    30b8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ba:	82 95       	swap	r24
    30bc:	8f 70       	andi	r24, 0x0F	; 15
    30be:	81 70       	andi	r24, 0x01	; 1
    30c0:	28 2f       	mov	r18, r24
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	3c 83       	std	Y+4, r19	; 0x04
    30c6:	2b 83       	std	Y+3, r18	; 0x03
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	9c 81       	ldd	r25, Y+4	; 0x04
    30cc:	00 97       	sbiw	r24, 0x00	; 0
    30ce:	69 f0       	breq	.+26     	; 0x30ea <TIMER_INIT+0x3f0>
    30d0:	2b 81       	ldd	r18, Y+3	; 0x03
    30d2:	3c 81       	ldd	r19, Y+4	; 0x04
    30d4:	21 30       	cpi	r18, 0x01	; 1
    30d6:	31 05       	cpc	r19, r1
    30d8:	79 f4       	brne	.+30     	; 0x30f8 <TIMER_INIT+0x3fe>
		{
		case ON:
			SET(TIMSK,1); break;
    30da:	a9 e5       	ldi	r26, 0x59	; 89
    30dc:	b0 e0       	ldi	r27, 0x00	; 0
    30de:	e9 e5       	ldi	r30, 0x59	; 89
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	80 81       	ld	r24, Z
    30e4:	82 60       	ori	r24, 0x02	; 2
    30e6:	8c 93       	st	X, r24
    30e8:	07 c0       	rjmp	.+14     	; 0x30f8 <TIMER_INIT+0x3fe>
		case OFF:
			CLR(TIMSK,1); break;
    30ea:	a9 e5       	ldi	r26, 0x59	; 89
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	e9 e5       	ldi	r30, 0x59	; 89
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 81       	ld	r24, Z
    30f4:	8d 7f       	andi	r24, 0xFD	; 253
    30f6:	8c 93       	st	X, r24
		break;

	}


}
    30f8:	2c 96       	adiw	r28, 0x0c	; 12
    30fa:	0f b6       	in	r0, 0x3f	; 63
    30fc:	f8 94       	cli
    30fe:	de bf       	out	0x3e, r29	; 62
    3100:	0f be       	out	0x3f, r0	; 63
    3102:	cd bf       	out	0x3d, r28	; 61
    3104:	cf 91       	pop	r28
    3106:	df 91       	pop	r29
    3108:	08 95       	ret

0000310a <TIMER_Void_DutyCycle>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void TIMER_Void_DutyCycle(u8 LOC_U8_Duty,TIM timer)
{
    310a:	df 93       	push	r29
    310c:	cf 93       	push	r28
    310e:	00 d0       	rcall	.+0      	; 0x3110 <TIMER_Void_DutyCycle+0x6>
    3110:	00 d0       	rcall	.+0      	; 0x3112 <TIMER_Void_DutyCycle+0x8>
    3112:	0f 92       	push	r0
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62
    3118:	89 83       	std	Y+1, r24	; 0x01
    311a:	7b 83       	std	Y+3, r23	; 0x03
    311c:	6a 83       	std	Y+2, r22	; 0x02
	switch(timer.TIMER_NUM){
    311e:	8a 81       	ldd	r24, Y+2	; 0x02
    3120:	83 70       	andi	r24, 0x03	; 3
    3122:	88 2f       	mov	r24, r24
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	00 97       	sbiw	r24, 0x00	; 0
    3128:	d1 f5       	brne	.+116    	; 0x319e <TIMER_Void_DutyCycle+0x94>
	case TIMER0:
		switch(timer.mode)
    312a:	8a 81       	ldd	r24, Y+2	; 0x02
    312c:	86 95       	lsr	r24
    312e:	86 95       	lsr	r24
    3130:	8f 70       	andi	r24, 0x0F	; 15
    3132:	88 2f       	mov	r24, r24
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	83 30       	cpi	r24, 0x03	; 3
    3138:	91 05       	cpc	r25, r1
    313a:	89 f5       	brne	.+98     	; 0x319e <TIMER_Void_DutyCycle+0x94>
		{
		case FAST_PWM:
			switch(timer.oc_inverted_or_nonInverted)
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	86 95       	lsr	r24
    3140:	83 70       	andi	r24, 0x03	; 3
    3142:	28 2f       	mov	r18, r24
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	3d 83       	std	Y+5, r19	; 0x05
    3148:	2c 83       	std	Y+4, r18	; 0x04
    314a:	8c 81       	ldd	r24, Y+4	; 0x04
    314c:	9d 81       	ldd	r25, Y+5	; 0x05
    314e:	81 30       	cpi	r24, 0x01	; 1
    3150:	91 05       	cpc	r25, r1
    3152:	31 f0       	breq	.+12     	; 0x3160 <TIMER_Void_DutyCycle+0x56>
    3154:	2c 81       	ldd	r18, Y+4	; 0x04
    3156:	3d 81       	ldd	r19, Y+5	; 0x05
    3158:	22 30       	cpi	r18, 0x02	; 2
    315a:	31 05       	cpc	r19, r1
    315c:	89 f0       	breq	.+34     	; 0x3180 <TIMER_Void_DutyCycle+0x76>
    315e:	1f c0       	rjmp	.+62     	; 0x319e <TIMER_Void_DutyCycle+0x94>
			{
			case oc_NinIverted:
			OCR0=((LOC_U8_Duty*256)/100)-1; break;
    3160:	ec e5       	ldi	r30, 0x5C	; 92
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	88 2f       	mov	r24, r24
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	98 2f       	mov	r25, r24
    316c:	88 27       	eor	r24, r24
    316e:	24 e6       	ldi	r18, 0x64	; 100
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	b9 01       	movw	r22, r18
    3174:	0e 94 12 1b 	call	0x3624	; 0x3624 <__divmodhi4>
    3178:	cb 01       	movw	r24, r22
    317a:	81 50       	subi	r24, 0x01	; 1
    317c:	80 83       	st	Z, r24
    317e:	0f c0       	rjmp	.+30     	; 0x319e <TIMER_Void_DutyCycle+0x94>
			case oc_inverted:
				OCR0=255-((LOC_U8_Duty*256)/100);break;
    3180:	ec e5       	ldi	r30, 0x5C	; 92
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	89 81       	ldd	r24, Y+1	; 0x01
    3186:	88 2f       	mov	r24, r24
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	98 2f       	mov	r25, r24
    318c:	88 27       	eor	r24, r24
    318e:	24 e6       	ldi	r18, 0x64	; 100
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	b9 01       	movw	r22, r18
    3194:	0e 94 12 1b 	call	0x3624	; 0x3624 <__divmodhi4>
    3198:	cb 01       	movw	r24, r22
    319a:	80 95       	com	r24
    319c:	80 83       	st	Z, r24
		}

	}


}
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	cf 91       	pop	r28
    31aa:	df 91       	pop	r29
    31ac:	08 95       	ret

000031ae <TIM0_U8_ReadTCNTReg>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

u8 TIM0_U8_ReadTCNTReg(void)
{
    31ae:	df 93       	push	r29
    31b0:	cf 93       	push	r28
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    31b6:	e2 e5       	ldi	r30, 0x52	; 82
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
}
    31bc:	cf 91       	pop	r28
    31be:	df 91       	pop	r29
    31c0:	08 95       	ret

000031c2 <TIM_COUNTER_Void_OFF>:
/*******************************************************************************************************************/
void TIM_COUNTER_Void_OFF(u8 TIM_NUM)
{
    31c2:	df 93       	push	r29
    31c4:	cf 93       	push	r28
    31c6:	0f 92       	push	r0
    31c8:	cd b7       	in	r28, 0x3d	; 61
    31ca:	de b7       	in	r29, 0x3e	; 62
    31cc:	89 83       	std	Y+1, r24	; 0x01
	switch(TIM_NUM)
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	88 2f       	mov	r24, r24
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	00 97       	sbiw	r24, 0x00	; 0
    31d6:	39 f4       	brne	.+14     	; 0x31e6 <TIM_COUNTER_Void_OFF+0x24>
	{

	   case TIMER0:   TCCR0&=~(7<<0); break;
    31d8:	a3 e5       	ldi	r26, 0x53	; 83
    31da:	b0 e0       	ldi	r27, 0x00	; 0
    31dc:	e3 e5       	ldi	r30, 0x53	; 83
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	80 81       	ld	r24, Z
    31e2:	88 7f       	andi	r24, 0xF8	; 248
    31e4:	8c 93       	st	X, r24
	}
}
    31e6:	0f 90       	pop	r0
    31e8:	cf 91       	pop	r28
    31ea:	df 91       	pop	r29
    31ec:	08 95       	ret

000031ee <TIM0_OV_callBack>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void TIM0_OV_callBack(void (*ptr)(void))
{
    31ee:	df 93       	push	r29
    31f0:	cf 93       	push	r28
    31f2:	00 d0       	rcall	.+0      	; 0x31f4 <TIM0_OV_callBack+0x6>
    31f4:	cd b7       	in	r28, 0x3d	; 61
    31f6:	de b7       	in	r29, 0x3e	; 62
    31f8:	9a 83       	std	Y+2, r25	; 0x02
    31fa:	89 83       	std	Y+1, r24	; 0x01
    pf0_OV=ptr;
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3200:	90 93 f2 02 	sts	0x02F2, r25
    3204:	80 93 f1 02 	sts	0x02F1, r24
}
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	cf 91       	pop	r28
    320e:	df 91       	pop	r29
    3210:	08 95       	ret

00003212 <TIM0_OCR_callBack>:
/*******************************************************************************************************************/
void TIM0_OCR_callBack(void (*ptr)(void))
{
    3212:	df 93       	push	r29
    3214:	cf 93       	push	r28
    3216:	00 d0       	rcall	.+0      	; 0x3218 <TIM0_OCR_callBack+0x6>
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
    321c:	9a 83       	std	Y+2, r25	; 0x02
    321e:	89 83       	std	Y+1, r24	; 0x01
    pf0_OCR=ptr;
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	9a 81       	ldd	r25, Y+2	; 0x02
    3224:	90 93 ee 02 	sts	0x02EE, r25
    3228:	80 93 ed 02 	sts	0x02ED, r24
}
    322c:	0f 90       	pop	r0
    322e:	0f 90       	pop	r0
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	08 95       	ret

00003236 <TIM1_OV_callBack>:
/*******************************************************************************************************************/
void TIM1_OV_callBack(void (*ptr)(void))
{
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	00 d0       	rcall	.+0      	; 0x323c <TIM1_OV_callBack+0x6>
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	9a 83       	std	Y+2, r25	; 0x02
    3242:	89 83       	std	Y+1, r24	; 0x01
    pf1_OV=ptr;
    3244:	89 81       	ldd	r24, Y+1	; 0x01
    3246:	9a 81       	ldd	r25, Y+2	; 0x02
    3248:	90 93 e6 02 	sts	0x02E6, r25
    324c:	80 93 e5 02 	sts	0x02E5, r24
}
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	cf 91       	pop	r28
    3256:	df 91       	pop	r29
    3258:	08 95       	ret

0000325a <TIM1_OCRA_callBack>:
/*******************************************************************************************************************/
void TIM1_OCRA_callBack(void (*ptr)(void))
{
    325a:	df 93       	push	r29
    325c:	cf 93       	push	r28
    325e:	00 d0       	rcall	.+0      	; 0x3260 <TIM1_OCRA_callBack+0x6>
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
    3264:	9a 83       	std	Y+2, r25	; 0x02
    3266:	89 83       	std	Y+1, r24	; 0x01
    pf1_OCRA=ptr;
    3268:	89 81       	ldd	r24, Y+1	; 0x01
    326a:	9a 81       	ldd	r25, Y+2	; 0x02
    326c:	90 93 ea 02 	sts	0x02EA, r25
    3270:	80 93 e9 02 	sts	0x02E9, r24
}
    3274:	0f 90       	pop	r0
    3276:	0f 90       	pop	r0
    3278:	cf 91       	pop	r28
    327a:	df 91       	pop	r29
    327c:	08 95       	ret

0000327e <TIM1_OCRB_callBack>:
/*******************************************************************************************************************/
void TIM1_OCRB_callBack(void (*ptr)(void))
{
    327e:	df 93       	push	r29
    3280:	cf 93       	push	r28
    3282:	00 d0       	rcall	.+0      	; 0x3284 <TIM1_OCRB_callBack+0x6>
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
    3288:	9a 83       	std	Y+2, r25	; 0x02
    328a:	89 83       	std	Y+1, r24	; 0x01
    pf1_OCRB=ptr;
    328c:	89 81       	ldd	r24, Y+1	; 0x01
    328e:	9a 81       	ldd	r25, Y+2	; 0x02
    3290:	90 93 e8 02 	sts	0x02E8, r25
    3294:	80 93 e7 02 	sts	0x02E7, r24
}
    3298:	0f 90       	pop	r0
    329a:	0f 90       	pop	r0
    329c:	cf 91       	pop	r28
    329e:	df 91       	pop	r29
    32a0:	08 95       	ret

000032a2 <TIM1_ICU_callBack>:
/*******************************************************************************************************************/
void TIM1_ICU_callBack(void (*ptr)(void))
{
    32a2:	df 93       	push	r29
    32a4:	cf 93       	push	r28
    32a6:	00 d0       	rcall	.+0      	; 0x32a8 <TIM1_ICU_callBack+0x6>
    32a8:	cd b7       	in	r28, 0x3d	; 61
    32aa:	de b7       	in	r29, 0x3e	; 62
    32ac:	9a 83       	std	Y+2, r25	; 0x02
    32ae:	89 83       	std	Y+1, r24	; 0x01
    pf1_ICU=ptr;
    32b0:	89 81       	ldd	r24, Y+1	; 0x01
    32b2:	9a 81       	ldd	r25, Y+2	; 0x02
    32b4:	90 93 f0 02 	sts	0x02F0, r25
    32b8:	80 93 ef 02 	sts	0x02EF, r24
}
    32bc:	0f 90       	pop	r0
    32be:	0f 90       	pop	r0
    32c0:	cf 91       	pop	r28
    32c2:	df 91       	pop	r29
    32c4:	08 95       	ret

000032c6 <TIM2_OV_callBack>:
/*******************************************************************************************************************/
void TIM2_OV_callBack(void (*ptr)(void))
{
    32c6:	df 93       	push	r29
    32c8:	cf 93       	push	r28
    32ca:	00 d0       	rcall	.+0      	; 0x32cc <TIM2_OV_callBack+0x6>
    32cc:	cd b7       	in	r28, 0x3d	; 61
    32ce:	de b7       	in	r29, 0x3e	; 62
    32d0:	9a 83       	std	Y+2, r25	; 0x02
    32d2:	89 83       	std	Y+1, r24	; 0x01
    pf2_OV=ptr;
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	9a 81       	ldd	r25, Y+2	; 0x02
    32d8:	90 93 ec 02 	sts	0x02EC, r25
    32dc:	80 93 eb 02 	sts	0x02EB, r24
}
    32e0:	0f 90       	pop	r0
    32e2:	0f 90       	pop	r0
    32e4:	cf 91       	pop	r28
    32e6:	df 91       	pop	r29
    32e8:	08 95       	ret

000032ea <TIM2_OCR_callBack>:
/*******************************************************************************************************************/
void TIM2_OCR_callBack(void (*ptr)(void))
{
    32ea:	df 93       	push	r29
    32ec:	cf 93       	push	r28
    32ee:	00 d0       	rcall	.+0      	; 0x32f0 <TIM2_OCR_callBack+0x6>
    32f0:	cd b7       	in	r28, 0x3d	; 61
    32f2:	de b7       	in	r29, 0x3e	; 62
    32f4:	9a 83       	std	Y+2, r25	; 0x02
    32f6:	89 83       	std	Y+1, r24	; 0x01
    pf2_OCR=ptr;
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	9a 81       	ldd	r25, Y+2	; 0x02
    32fc:	90 93 e4 02 	sts	0x02E4, r25
    3300:	80 93 e3 02 	sts	0x02E3, r24
}
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	cf 91       	pop	r28
    330a:	df 91       	pop	r29
    330c:	08 95       	ret

0000330e <LEDS_void_PortINIT>:
#include "util/delay.h"



void LEDS_void_PortINIT(u8 copy_u8_port)
{
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	0f 92       	push	r0
    3314:	cd b7       	in	r28, 0x3d	; 61
    3316:	de b7       	in	r29, 0x3e	; 62
    3318:	89 83       	std	Y+1, r24	; 0x01
	DIO_VoidsetPortDirection(copy_u8_port,0xFF);
    331a:	89 81       	ldd	r24, Y+1	; 0x01
    331c:	6f ef       	ldi	r22, 0xFF	; 255
    331e:	0e 94 9d 0c 	call	0x193a	; 0x193a <DIO_VoidsetPortDirection>
}
    3322:	0f 90       	pop	r0
    3324:	cf 91       	pop	r28
    3326:	df 91       	pop	r29
    3328:	08 95       	ret

0000332a <LEDS_VOID_PortValue>:

/*******************************************************************************************************************/
void LEDS_VOID_PortValue(u8 copy_u8_port,u8 value)
{
    332a:	df 93       	push	r29
    332c:	cf 93       	push	r28
    332e:	00 d0       	rcall	.+0      	; 0x3330 <LEDS_VOID_PortValue+0x6>
    3330:	cd b7       	in	r28, 0x3d	; 61
    3332:	de b7       	in	r29, 0x3e	; 62
    3334:	89 83       	std	Y+1, r24	; 0x01
    3336:	6a 83       	std	Y+2, r22	; 0x02
	DIO_VoidsetPortValue(copy_u8_port,value);
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	6a 81       	ldd	r22, Y+2	; 0x02
    333c:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <DIO_VoidsetPortValue>
}
    3340:	0f 90       	pop	r0
    3342:	0f 90       	pop	r0
    3344:	cf 91       	pop	r28
    3346:	df 91       	pop	r29
    3348:	08 95       	ret

0000334a <LED_VID_PinInit>:
/*******************************************************************************************************************/
void LED_VID_PinInit(u8 copy_u8_port,u8 copy_u8_pin)
{
    334a:	df 93       	push	r29
    334c:	cf 93       	push	r28
    334e:	00 d0       	rcall	.+0      	; 0x3350 <LED_VID_PinInit+0x6>
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	89 83       	std	Y+1, r24	; 0x01
    3356:	6a 83       	std	Y+2, r22	; 0x02
	DIO_VoidsetPinDirection( copy_u8_port,copy_u8_pin,OUTPUT);
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	6a 81       	ldd	r22, Y+2	; 0x02
    335c:	41 e0       	ldi	r20, 0x01	; 1
    335e:	0e 94 06 0a 	call	0x140c	; 0x140c <DIO_VoidsetPinDirection>
}
    3362:	0f 90       	pop	r0
    3364:	0f 90       	pop	r0
    3366:	cf 91       	pop	r28
    3368:	df 91       	pop	r29
    336a:	08 95       	ret

0000336c <LED_ON>:
/******************************************************************************************************************/
void LED_ON(u8 u8_port_copy ,u8 u8_pin_copy){
    336c:	df 93       	push	r29
    336e:	cf 93       	push	r28
    3370:	00 d0       	rcall	.+0      	; 0x3372 <LED_ON+0x6>
    3372:	cd b7       	in	r28, 0x3d	; 61
    3374:	de b7       	in	r29, 0x3e	; 62
    3376:	89 83       	std	Y+1, r24	; 0x01
    3378:	6a 83       	std	Y+2, r22	; 0x02

	DIO_VoidsetPinValue( u8_port_copy,u8_pin_copy,HIGH);
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	6a 81       	ldd	r22, Y+2	; 0x02
    337e:	41 e0       	ldi	r20, 0x01	; 1
    3380:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_VoidsetPinValue>

}
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	cf 91       	pop	r28
    338a:	df 91       	pop	r29
    338c:	08 95       	ret

0000338e <LED_OFF>:
/******************************************************************************************************************/
void LED_OFF(u8 u8_port_copy ,u8 u8_pin_copy){
    338e:	df 93       	push	r29
    3390:	cf 93       	push	r28
    3392:	00 d0       	rcall	.+0      	; 0x3394 <LED_OFF+0x6>
    3394:	cd b7       	in	r28, 0x3d	; 61
    3396:	de b7       	in	r29, 0x3e	; 62
    3398:	89 83       	std	Y+1, r24	; 0x01
    339a:	6a 83       	std	Y+2, r22	; 0x02

	DIO_VoidsetPinValue( u8_port_copy,u8_pin_copy,LOW);
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	6a 81       	ldd	r22, Y+2	; 0x02
    33a0:	40 e0       	ldi	r20, 0x00	; 0
    33a2:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_VoidsetPinValue>

}
    33a6:	0f 90       	pop	r0
    33a8:	0f 90       	pop	r0
    33aa:	cf 91       	pop	r28
    33ac:	df 91       	pop	r29
    33ae:	08 95       	ret

000033b0 <LED_TOGGLE>:
/******************************************************************************************************************/

void LED_TOGGLE(u8 u8_port_copy ,u8 u8_pin_copy){
    33b0:	df 93       	push	r29
    33b2:	cf 93       	push	r28
    33b4:	00 d0       	rcall	.+0      	; 0x33b6 <LED_TOGGLE+0x6>
    33b6:	00 d0       	rcall	.+0      	; 0x33b8 <LED_TOGGLE+0x8>
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
    33bc:	89 83       	std	Y+1, r24	; 0x01
    33be:	6a 83       	std	Y+2, r22	; 0x02


	switch(u8_port_copy){
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
    33c2:	28 2f       	mov	r18, r24
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	3c 83       	std	Y+4, r19	; 0x04
    33c8:	2b 83       	std	Y+3, r18	; 0x03
    33ca:	8b 81       	ldd	r24, Y+3	; 0x03
    33cc:	9c 81       	ldd	r25, Y+4	; 0x04
    33ce:	81 30       	cpi	r24, 0x01	; 1
    33d0:	91 05       	cpc	r25, r1
    33d2:	49 f1       	breq	.+82     	; 0x3426 <LED_TOGGLE+0x76>
    33d4:	2b 81       	ldd	r18, Y+3	; 0x03
    33d6:	3c 81       	ldd	r19, Y+4	; 0x04
    33d8:	22 30       	cpi	r18, 0x02	; 2
    33da:	31 05       	cpc	r19, r1
    33dc:	2c f4       	brge	.+10     	; 0x33e8 <LED_TOGGLE+0x38>
    33de:	8b 81       	ldd	r24, Y+3	; 0x03
    33e0:	9c 81       	ldd	r25, Y+4	; 0x04
    33e2:	00 97       	sbiw	r24, 0x00	; 0
    33e4:	61 f0       	breq	.+24     	; 0x33fe <LED_TOGGLE+0x4e>
    33e6:	5a c0       	rjmp	.+180    	; 0x349c <LED_TOGGLE+0xec>
    33e8:	2b 81       	ldd	r18, Y+3	; 0x03
    33ea:	3c 81       	ldd	r19, Y+4	; 0x04
    33ec:	22 30       	cpi	r18, 0x02	; 2
    33ee:	31 05       	cpc	r19, r1
    33f0:	71 f1       	breq	.+92     	; 0x344e <LED_TOGGLE+0x9e>
    33f2:	8b 81       	ldd	r24, Y+3	; 0x03
    33f4:	9c 81       	ldd	r25, Y+4	; 0x04
    33f6:	83 30       	cpi	r24, 0x03	; 3
    33f8:	91 05       	cpc	r25, r1
    33fa:	e9 f1       	breq	.+122    	; 0x3476 <LED_TOGGLE+0xc6>
    33fc:	4f c0       	rjmp	.+158    	; 0x349c <LED_TOGGLE+0xec>

	    case PORTA: TGL(PORTA_REG,u8_pin_copy);
    33fe:	ab e3       	ldi	r26, 0x3B	; 59
    3400:	b0 e0       	ldi	r27, 0x00	; 0
    3402:	eb e3       	ldi	r30, 0x3B	; 59
    3404:	f0 e0       	ldi	r31, 0x00	; 0
    3406:	80 81       	ld	r24, Z
    3408:	48 2f       	mov	r20, r24
    340a:	8a 81       	ldd	r24, Y+2	; 0x02
    340c:	28 2f       	mov	r18, r24
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	81 e0       	ldi	r24, 0x01	; 1
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	02 2e       	mov	r0, r18
    3416:	02 c0       	rjmp	.+4      	; 0x341c <LED_TOGGLE+0x6c>
    3418:	88 0f       	add	r24, r24
    341a:	99 1f       	adc	r25, r25
    341c:	0a 94       	dec	r0
    341e:	e2 f7       	brpl	.-8      	; 0x3418 <LED_TOGGLE+0x68>
    3420:	84 27       	eor	r24, r20
    3422:	8c 93       	st	X, r24
    3424:	3b c0       	rjmp	.+118    	; 0x349c <LED_TOGGLE+0xec>
	    //_delay_ms(delay);
	    break;

	    case PORTB: TGL(PORTB_REG,u8_pin_copy);
    3426:	a8 e3       	ldi	r26, 0x38	; 56
    3428:	b0 e0       	ldi	r27, 0x00	; 0
    342a:	e8 e3       	ldi	r30, 0x38	; 56
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	80 81       	ld	r24, Z
    3430:	48 2f       	mov	r20, r24
    3432:	8a 81       	ldd	r24, Y+2	; 0x02
    3434:	28 2f       	mov	r18, r24
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	02 2e       	mov	r0, r18
    343e:	02 c0       	rjmp	.+4      	; 0x3444 <LED_TOGGLE+0x94>
    3440:	88 0f       	add	r24, r24
    3442:	99 1f       	adc	r25, r25
    3444:	0a 94       	dec	r0
    3446:	e2 f7       	brpl	.-8      	; 0x3440 <LED_TOGGLE+0x90>
    3448:	84 27       	eor	r24, r20
    344a:	8c 93       	st	X, r24
    344c:	27 c0       	rjmp	.+78     	; 0x349c <LED_TOGGLE+0xec>
	    	   // _delay_ms(delay);
	    	    break;

	    case PORTC: TGL(PORTC_REG,u8_pin_copy);
    344e:	a5 e3       	ldi	r26, 0x35	; 53
    3450:	b0 e0       	ldi	r27, 0x00	; 0
    3452:	e5 e3       	ldi	r30, 0x35	; 53
    3454:	f0 e0       	ldi	r31, 0x00	; 0
    3456:	80 81       	ld	r24, Z
    3458:	48 2f       	mov	r20, r24
    345a:	8a 81       	ldd	r24, Y+2	; 0x02
    345c:	28 2f       	mov	r18, r24
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	02 2e       	mov	r0, r18
    3466:	02 c0       	rjmp	.+4      	; 0x346c <LED_TOGGLE+0xbc>
    3468:	88 0f       	add	r24, r24
    346a:	99 1f       	adc	r25, r25
    346c:	0a 94       	dec	r0
    346e:	e2 f7       	brpl	.-8      	; 0x3468 <LED_TOGGLE+0xb8>
    3470:	84 27       	eor	r24, r20
    3472:	8c 93       	st	X, r24
    3474:	13 c0       	rjmp	.+38     	; 0x349c <LED_TOGGLE+0xec>
	    	   // _delay_ms(delay);
	    	    break;

	    case PORTD: TGL(PORTD_REG,u8_pin_copy);
    3476:	a2 e3       	ldi	r26, 0x32	; 50
    3478:	b0 e0       	ldi	r27, 0x00	; 0
    347a:	e2 e3       	ldi	r30, 0x32	; 50
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	80 81       	ld	r24, Z
    3480:	48 2f       	mov	r20, r24
    3482:	8a 81       	ldd	r24, Y+2	; 0x02
    3484:	28 2f       	mov	r18, r24
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	02 2e       	mov	r0, r18
    348e:	02 c0       	rjmp	.+4      	; 0x3494 <LED_TOGGLE+0xe4>
    3490:	88 0f       	add	r24, r24
    3492:	99 1f       	adc	r25, r25
    3494:	0a 94       	dec	r0
    3496:	e2 f7       	brpl	.-8      	; 0x3490 <LED_TOGGLE+0xe0>
    3498:	84 27       	eor	r24, r20
    349a:	8c 93       	st	X, r24
	    	   // _delay_ms(delay);
	    	    break;


	}
}
    349c:	0f 90       	pop	r0
    349e:	0f 90       	pop	r0
    34a0:	0f 90       	pop	r0
    34a2:	0f 90       	pop	r0
    34a4:	cf 91       	pop	r28
    34a6:	df 91       	pop	r29
    34a8:	08 95       	ret

000034aa <main>:

void f(void);


int main(void)
{
    34aa:	df 93       	push	r29
    34ac:	cf 93       	push	r28
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62

 app_init();
    34b2:	0e 94 17 07 	call	0xe2e	; 0xe2e <app_init>

 APP_MAIN();
    34b6:	0e 94 55 07 	call	0xeaa	; 0xeaa <APP_MAIN>
    	//u8 x=
    	//LCD_sendcmd(1);
    	LCD_WRITE_NUM(DIO_u8GetPinValue(PORTD,PIN2));
    }
*/
	return 0;
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	90 e0       	ldi	r25, 0x00	; 0
}
    34be:	cf 91       	pop	r28
    34c0:	df 91       	pop	r29
    34c2:	08 95       	ret

000034c4 <f>:


void f(void){
    34c4:	df 93       	push	r29
    34c6:	cf 93       	push	r28
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
    34cc:	2e 97       	sbiw	r28, 0x0e	; 14
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	f8 94       	cli
    34d2:	de bf       	out	0x3e, r29	; 62
    34d4:	0f be       	out	0x3f, r0	; 63
    34d6:	cd bf       	out	0x3d, r28	; 61
	static volatile u8 n=0;
	DIO_VoidsetPinValue(PORTA,n,1);
    34d8:	90 91 dc 02 	lds	r25, 0x02DC
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	69 2f       	mov	r22, r25
    34e0:	41 e0       	ldi	r20, 0x01	; 1
    34e2:	0e 94 0e 0b 	call	0x161c	; 0x161c <DIO_VoidsetPinValue>
	n++;
    34e6:	80 91 dc 02 	lds	r24, 0x02DC
    34ea:	8f 5f       	subi	r24, 0xFF	; 255
    34ec:	80 93 dc 02 	sts	0x02DC, r24
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	a0 ea       	ldi	r26, 0xA0	; 160
    34f6:	b0 e4       	ldi	r27, 0x40	; 64
    34f8:	8b 87       	std	Y+11, r24	; 0x0b
    34fa:	9c 87       	std	Y+12, r25	; 0x0c
    34fc:	ad 87       	std	Y+13, r26	; 0x0d
    34fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3500:	6b 85       	ldd	r22, Y+11	; 0x0b
    3502:	7c 85       	ldd	r23, Y+12	; 0x0c
    3504:	8d 85       	ldd	r24, Y+13	; 0x0d
    3506:	9e 85       	ldd	r25, Y+14	; 0x0e
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	4a ef       	ldi	r20, 0xFA	; 250
    350e:	54 e4       	ldi	r21, 0x44	; 68
    3510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	8f 83       	std	Y+7, r24	; 0x07
    351a:	98 87       	std	Y+8, r25	; 0x08
    351c:	a9 87       	std	Y+9, r26	; 0x09
    351e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3520:	6f 81       	ldd	r22, Y+7	; 0x07
    3522:	78 85       	ldd	r23, Y+8	; 0x08
    3524:	89 85       	ldd	r24, Y+9	; 0x09
    3526:	9a 85       	ldd	r25, Y+10	; 0x0a
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	40 e8       	ldi	r20, 0x80	; 128
    352e:	5f e3       	ldi	r21, 0x3F	; 63
    3530:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3534:	88 23       	and	r24, r24
    3536:	2c f4       	brge	.+10     	; 0x3542 <f+0x7e>
		__ticks = 1;
    3538:	81 e0       	ldi	r24, 0x01	; 1
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	9e 83       	std	Y+6, r25	; 0x06
    353e:	8d 83       	std	Y+5, r24	; 0x05
    3540:	3f c0       	rjmp	.+126    	; 0x35c0 <f+0xfc>
	else if (__tmp > 65535)
    3542:	6f 81       	ldd	r22, Y+7	; 0x07
    3544:	78 85       	ldd	r23, Y+8	; 0x08
    3546:	89 85       	ldd	r24, Y+9	; 0x09
    3548:	9a 85       	ldd	r25, Y+10	; 0x0a
    354a:	20 e0       	ldi	r18, 0x00	; 0
    354c:	3f ef       	ldi	r19, 0xFF	; 255
    354e:	4f e7       	ldi	r20, 0x7F	; 127
    3550:	57 e4       	ldi	r21, 0x47	; 71
    3552:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3556:	18 16       	cp	r1, r24
    3558:	4c f5       	brge	.+82     	; 0x35ac <f+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355a:	6b 85       	ldd	r22, Y+11	; 0x0b
    355c:	7c 85       	ldd	r23, Y+12	; 0x0c
    355e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3560:	9e 85       	ldd	r25, Y+14	; 0x0e
    3562:	20 e0       	ldi	r18, 0x00	; 0
    3564:	30 e0       	ldi	r19, 0x00	; 0
    3566:	40 e2       	ldi	r20, 0x20	; 32
    3568:	51 e4       	ldi	r21, 0x41	; 65
    356a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	bc 01       	movw	r22, r24
    3574:	cd 01       	movw	r24, r26
    3576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	9e 83       	std	Y+6, r25	; 0x06
    3580:	8d 83       	std	Y+5, r24	; 0x05
    3582:	0f c0       	rjmp	.+30     	; 0x35a2 <f+0xde>
    3584:	88 ec       	ldi	r24, 0xC8	; 200
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	9c 83       	std	Y+4, r25	; 0x04
    358a:	8b 83       	std	Y+3, r24	; 0x03
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	9c 81       	ldd	r25, Y+4	; 0x04
    3590:	01 97       	sbiw	r24, 0x01	; 1
    3592:	f1 f7       	brne	.-4      	; 0x3590 <f+0xcc>
    3594:	9c 83       	std	Y+4, r25	; 0x04
    3596:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3598:	8d 81       	ldd	r24, Y+5	; 0x05
    359a:	9e 81       	ldd	r25, Y+6	; 0x06
    359c:	01 97       	sbiw	r24, 0x01	; 1
    359e:	9e 83       	std	Y+6, r25	; 0x06
    35a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a2:	8d 81       	ldd	r24, Y+5	; 0x05
    35a4:	9e 81       	ldd	r25, Y+6	; 0x06
    35a6:	00 97       	sbiw	r24, 0x00	; 0
    35a8:	69 f7       	brne	.-38     	; 0x3584 <f+0xc0>
    35aa:	14 c0       	rjmp	.+40     	; 0x35d4 <f+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ac:	6f 81       	ldd	r22, Y+7	; 0x07
    35ae:	78 85       	ldd	r23, Y+8	; 0x08
    35b0:	89 85       	ldd	r24, Y+9	; 0x09
    35b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	9e 83       	std	Y+6, r25	; 0x06
    35be:	8d 83       	std	Y+5, r24	; 0x05
    35c0:	8d 81       	ldd	r24, Y+5	; 0x05
    35c2:	9e 81       	ldd	r25, Y+6	; 0x06
    35c4:	9a 83       	std	Y+2, r25	; 0x02
    35c6:	89 83       	std	Y+1, r24	; 0x01
    35c8:	89 81       	ldd	r24, Y+1	; 0x01
    35ca:	9a 81       	ldd	r25, Y+2	; 0x02
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	f1 f7       	brne	.-4      	; 0x35cc <f+0x108>
    35d0:	9a 83       	std	Y+2, r25	; 0x02
    35d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    35d4:	2e 96       	adiw	r28, 0x0e	; 14
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	f8 94       	cli
    35da:	de bf       	out	0x3e, r29	; 62
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	cd bf       	out	0x3d, r28	; 61
    35e0:	cf 91       	pop	r28
    35e2:	df 91       	pop	r29
    35e4:	08 95       	ret

000035e6 <__mulsi3>:
    35e6:	62 9f       	mul	r22, r18
    35e8:	d0 01       	movw	r26, r0
    35ea:	73 9f       	mul	r23, r19
    35ec:	f0 01       	movw	r30, r0
    35ee:	82 9f       	mul	r24, r18
    35f0:	e0 0d       	add	r30, r0
    35f2:	f1 1d       	adc	r31, r1
    35f4:	64 9f       	mul	r22, r20
    35f6:	e0 0d       	add	r30, r0
    35f8:	f1 1d       	adc	r31, r1
    35fa:	92 9f       	mul	r25, r18
    35fc:	f0 0d       	add	r31, r0
    35fe:	83 9f       	mul	r24, r19
    3600:	f0 0d       	add	r31, r0
    3602:	74 9f       	mul	r23, r20
    3604:	f0 0d       	add	r31, r0
    3606:	65 9f       	mul	r22, r21
    3608:	f0 0d       	add	r31, r0
    360a:	99 27       	eor	r25, r25
    360c:	72 9f       	mul	r23, r18
    360e:	b0 0d       	add	r27, r0
    3610:	e1 1d       	adc	r30, r1
    3612:	f9 1f       	adc	r31, r25
    3614:	63 9f       	mul	r22, r19
    3616:	b0 0d       	add	r27, r0
    3618:	e1 1d       	adc	r30, r1
    361a:	f9 1f       	adc	r31, r25
    361c:	bd 01       	movw	r22, r26
    361e:	cf 01       	movw	r24, r30
    3620:	11 24       	eor	r1, r1
    3622:	08 95       	ret

00003624 <__divmodhi4>:
    3624:	97 fb       	bst	r25, 7
    3626:	09 2e       	mov	r0, r25
    3628:	07 26       	eor	r0, r23
    362a:	0a d0       	rcall	.+20     	; 0x3640 <__divmodhi4_neg1>
    362c:	77 fd       	sbrc	r23, 7
    362e:	04 d0       	rcall	.+8      	; 0x3638 <__divmodhi4_neg2>
    3630:	49 d0       	rcall	.+146    	; 0x36c4 <__udivmodhi4>
    3632:	06 d0       	rcall	.+12     	; 0x3640 <__divmodhi4_neg1>
    3634:	00 20       	and	r0, r0
    3636:	1a f4       	brpl	.+6      	; 0x363e <__divmodhi4_exit>

00003638 <__divmodhi4_neg2>:
    3638:	70 95       	com	r23
    363a:	61 95       	neg	r22
    363c:	7f 4f       	sbci	r23, 0xFF	; 255

0000363e <__divmodhi4_exit>:
    363e:	08 95       	ret

00003640 <__divmodhi4_neg1>:
    3640:	f6 f7       	brtc	.-4      	; 0x363e <__divmodhi4_exit>
    3642:	90 95       	com	r25
    3644:	81 95       	neg	r24
    3646:	9f 4f       	sbci	r25, 0xFF	; 255
    3648:	08 95       	ret

0000364a <__udivmodsi4>:
    364a:	a1 e2       	ldi	r26, 0x21	; 33
    364c:	1a 2e       	mov	r1, r26
    364e:	aa 1b       	sub	r26, r26
    3650:	bb 1b       	sub	r27, r27
    3652:	fd 01       	movw	r30, r26
    3654:	0d c0       	rjmp	.+26     	; 0x3670 <__udivmodsi4_ep>

00003656 <__udivmodsi4_loop>:
    3656:	aa 1f       	adc	r26, r26
    3658:	bb 1f       	adc	r27, r27
    365a:	ee 1f       	adc	r30, r30
    365c:	ff 1f       	adc	r31, r31
    365e:	a2 17       	cp	r26, r18
    3660:	b3 07       	cpc	r27, r19
    3662:	e4 07       	cpc	r30, r20
    3664:	f5 07       	cpc	r31, r21
    3666:	20 f0       	brcs	.+8      	; 0x3670 <__udivmodsi4_ep>
    3668:	a2 1b       	sub	r26, r18
    366a:	b3 0b       	sbc	r27, r19
    366c:	e4 0b       	sbc	r30, r20
    366e:	f5 0b       	sbc	r31, r21

00003670 <__udivmodsi4_ep>:
    3670:	66 1f       	adc	r22, r22
    3672:	77 1f       	adc	r23, r23
    3674:	88 1f       	adc	r24, r24
    3676:	99 1f       	adc	r25, r25
    3678:	1a 94       	dec	r1
    367a:	69 f7       	brne	.-38     	; 0x3656 <__udivmodsi4_loop>
    367c:	60 95       	com	r22
    367e:	70 95       	com	r23
    3680:	80 95       	com	r24
    3682:	90 95       	com	r25
    3684:	9b 01       	movw	r18, r22
    3686:	ac 01       	movw	r20, r24
    3688:	bd 01       	movw	r22, r26
    368a:	cf 01       	movw	r24, r30
    368c:	08 95       	ret

0000368e <__divmodsi4>:
    368e:	97 fb       	bst	r25, 7
    3690:	09 2e       	mov	r0, r25
    3692:	05 26       	eor	r0, r21
    3694:	0e d0       	rcall	.+28     	; 0x36b2 <__divmodsi4_neg1>
    3696:	57 fd       	sbrc	r21, 7
    3698:	04 d0       	rcall	.+8      	; 0x36a2 <__divmodsi4_neg2>
    369a:	d7 df       	rcall	.-82     	; 0x364a <__udivmodsi4>
    369c:	0a d0       	rcall	.+20     	; 0x36b2 <__divmodsi4_neg1>
    369e:	00 1c       	adc	r0, r0
    36a0:	38 f4       	brcc	.+14     	; 0x36b0 <__divmodsi4_exit>

000036a2 <__divmodsi4_neg2>:
    36a2:	50 95       	com	r21
    36a4:	40 95       	com	r20
    36a6:	30 95       	com	r19
    36a8:	21 95       	neg	r18
    36aa:	3f 4f       	sbci	r19, 0xFF	; 255
    36ac:	4f 4f       	sbci	r20, 0xFF	; 255
    36ae:	5f 4f       	sbci	r21, 0xFF	; 255

000036b0 <__divmodsi4_exit>:
    36b0:	08 95       	ret

000036b2 <__divmodsi4_neg1>:
    36b2:	f6 f7       	brtc	.-4      	; 0x36b0 <__divmodsi4_exit>
    36b4:	90 95       	com	r25
    36b6:	80 95       	com	r24
    36b8:	70 95       	com	r23
    36ba:	61 95       	neg	r22
    36bc:	7f 4f       	sbci	r23, 0xFF	; 255
    36be:	8f 4f       	sbci	r24, 0xFF	; 255
    36c0:	9f 4f       	sbci	r25, 0xFF	; 255
    36c2:	08 95       	ret

000036c4 <__udivmodhi4>:
    36c4:	aa 1b       	sub	r26, r26
    36c6:	bb 1b       	sub	r27, r27
    36c8:	51 e1       	ldi	r21, 0x11	; 17
    36ca:	07 c0       	rjmp	.+14     	; 0x36da <__udivmodhi4_ep>

000036cc <__udivmodhi4_loop>:
    36cc:	aa 1f       	adc	r26, r26
    36ce:	bb 1f       	adc	r27, r27
    36d0:	a6 17       	cp	r26, r22
    36d2:	b7 07       	cpc	r27, r23
    36d4:	10 f0       	brcs	.+4      	; 0x36da <__udivmodhi4_ep>
    36d6:	a6 1b       	sub	r26, r22
    36d8:	b7 0b       	sbc	r27, r23

000036da <__udivmodhi4_ep>:
    36da:	88 1f       	adc	r24, r24
    36dc:	99 1f       	adc	r25, r25
    36de:	5a 95       	dec	r21
    36e0:	a9 f7       	brne	.-22     	; 0x36cc <__udivmodhi4_loop>
    36e2:	80 95       	com	r24
    36e4:	90 95       	com	r25
    36e6:	bc 01       	movw	r22, r24
    36e8:	cd 01       	movw	r24, r26
    36ea:	08 95       	ret

000036ec <__prologue_saves__>:
    36ec:	2f 92       	push	r2
    36ee:	3f 92       	push	r3
    36f0:	4f 92       	push	r4
    36f2:	5f 92       	push	r5
    36f4:	6f 92       	push	r6
    36f6:	7f 92       	push	r7
    36f8:	8f 92       	push	r8
    36fa:	9f 92       	push	r9
    36fc:	af 92       	push	r10
    36fe:	bf 92       	push	r11
    3700:	cf 92       	push	r12
    3702:	df 92       	push	r13
    3704:	ef 92       	push	r14
    3706:	ff 92       	push	r15
    3708:	0f 93       	push	r16
    370a:	1f 93       	push	r17
    370c:	cf 93       	push	r28
    370e:	df 93       	push	r29
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
    3714:	ca 1b       	sub	r28, r26
    3716:	db 0b       	sbc	r29, r27
    3718:	0f b6       	in	r0, 0x3f	; 63
    371a:	f8 94       	cli
    371c:	de bf       	out	0x3e, r29	; 62
    371e:	0f be       	out	0x3f, r0	; 63
    3720:	cd bf       	out	0x3d, r28	; 61
    3722:	09 94       	ijmp

00003724 <__epilogue_restores__>:
    3724:	2a 88       	ldd	r2, Y+18	; 0x12
    3726:	39 88       	ldd	r3, Y+17	; 0x11
    3728:	48 88       	ldd	r4, Y+16	; 0x10
    372a:	5f 84       	ldd	r5, Y+15	; 0x0f
    372c:	6e 84       	ldd	r6, Y+14	; 0x0e
    372e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3730:	8c 84       	ldd	r8, Y+12	; 0x0c
    3732:	9b 84       	ldd	r9, Y+11	; 0x0b
    3734:	aa 84       	ldd	r10, Y+10	; 0x0a
    3736:	b9 84       	ldd	r11, Y+9	; 0x09
    3738:	c8 84       	ldd	r12, Y+8	; 0x08
    373a:	df 80       	ldd	r13, Y+7	; 0x07
    373c:	ee 80       	ldd	r14, Y+6	; 0x06
    373e:	fd 80       	ldd	r15, Y+5	; 0x05
    3740:	0c 81       	ldd	r16, Y+4	; 0x04
    3742:	1b 81       	ldd	r17, Y+3	; 0x03
    3744:	aa 81       	ldd	r26, Y+2	; 0x02
    3746:	b9 81       	ldd	r27, Y+1	; 0x01
    3748:	ce 0f       	add	r28, r30
    374a:	d1 1d       	adc	r29, r1
    374c:	0f b6       	in	r0, 0x3f	; 63
    374e:	f8 94       	cli
    3750:	de bf       	out	0x3e, r29	; 62
    3752:	0f be       	out	0x3f, r0	; 63
    3754:	cd bf       	out	0x3d, r28	; 61
    3756:	ed 01       	movw	r28, r26
    3758:	08 95       	ret

0000375a <_exit>:
    375a:	f8 94       	cli

0000375c <__stop_program>:
    375c:	ff cf       	rjmp	.-2      	; 0x375c <__stop_program>
